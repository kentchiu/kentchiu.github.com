<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: database | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-08-30T16:30:59+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Liquibase 筆記]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/05/30/liquibase-101/"/>
    <updated>2014-05-30T12:44:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/05/30/liquibase-101</id>
    <content type="html"><![CDATA[<!-- MarkdownTOC depth=0 -->


<ul>
<li>執行Liquibase指令的方式

<ul>
<li>maven goals:</li>
</ul>
</li>
<li>同步到xml到db

<ul>
<li>建立user table</li>
<li>加入額外的欄位</li>
<li>insert data</li>
<li>版控說明</li>
<li>完整的 db.changelog-master.xml</li>
</ul>
</li>
<li>從資料庫產生changelog.xml

<ul>
<li>只產生data</li>
<li>同時產生schema + data</li>
</ul>
</li>
<li>完整的pom.xml</li>
<li>個人心得</li>
<li>resource</li>
</ul>


<!-- /MarkdownTOC -->


<p><a href="http://www.liquibase.org/">Liquibase</a>是資料庫版本管理工具，設定的概念是把資料庫schema的異動(table的建立，column的異動，index的異動…)及資料內容的異動(insert，update，delete)用Liquibase定義的語法寫成xml格式change log，然後在資料庫裡多建立一個名為databasechangelog的table(如下)，用來記錄db更新了那些change log，當xml新增了更多的change log後，跟db裡的版號一比對，就可得知未同步的change log有那些，下次同步時，就會同步這些未同步過的change log。概念上跟 git 滿像的。</p>

<p>liquibase會在管理的database中加入databasechangelog table，用來記錄與xml同步的狀態
<code>sql
mydb=# select * from databasechangelog;
-[ RECORD 1 ]-+--------------------------------------------------------------------------------------------------
id            | 1
author        | bob
filename      | /Users/kent/dev/liquibase-exercise/src/main/resources/db.changelog-master.xml
dateexecuted  | 2014-08-30 10:28:35.235724
orderexecuted | 1
exectype      | EXECUTED
md5sum        | 7:17a94fcdd73aa8852c1f53e4d06ee651
description   | createTable
comments      |
tag           |
liquibase     | 3.2.2
</code></p>

<blockquote><p>需特別注意，change log設定檔，一旦同步過後，如果設定檔中的id，檔案路徑等tag有改到，就會被當成新的change log，再次被同步到db中</p></blockquote>

<h4>執行Liquibase指令的方式</h4>

<p>要執行Liquibase指令，可透過command line，ant，maven，或API呼叫，本文採用maven的方式。</p>

<p>``` xml</p>

<pre><code>        &lt;plugin&gt;
            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;
            &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.2.2&lt;/version&gt;
            &lt;configuration&gt;
                &lt;changeLogFile&gt;${basedir}/src/main/resources/db.changelog-master.xml&lt;/changeLogFile&gt;
                &lt;outputChangeLogFile&gt;${basedir}/src/main/resources/output.xml&lt;/outputChangeLogFile&gt;
                &lt;driver&gt;org.postgresql.Driver&lt;/driver&gt;
                &lt;url&gt;jdbc:postgresql://localhost:5432/mydb&lt;/url&gt;
                &lt;username&gt;postgres&lt;/username&gt;
                &lt;password&gt;postgres&lt;/password&gt;
                &lt;promptOnNonLocalDatabase&gt;false&lt;/promptOnNonLocalDatabase&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<p>```</p>

<ul>
<li>changeLogFile : 記錄要套用到db的xml檔(xml -> db)，執行update指令時，會依changeLogFile的內容異動資料庫schema</li>
<li>outputChangeLogFile: 從資料庫匯出xml時，會匯出到outputChangeLogFile (db -> xml)</li>
</ul>


<h4>maven goals:</h4>

<ul>
<li>changelogSync : 將changelog中未套用至db的change logs標示成已同步</li>
<li>changelogSyncSQL : 同<code>changelogSync</code>，但只產生sql，而不執行同步到db</li>
<li>generateChangeLog : 將目前資料庫的shcema(預設不含資料內容)匯出成 xml</li>
<li>dbDoc : 產生像java doc的文件</li>
<li>diff : 比對兩個資料庫間的差異</li>
<li>status : 顯示目前change set有那些change log會被套用到db</li>
<li>tag : 在liquibase產生在db的管理用table打上tag，之後可以當作rollback用</li>
<li>update : 更新未套用過的change set至db(xml -> db)</li>
<li>updateSQL : 同update，但產生更新的sql語法，不會真正同步db</li>
</ul>


<p>以下的指令沒用過，不太清楚實際的動作情形:</p>

<ul>
<li>clearCheckSums :Clears all checksums in the current changelog, so they will be recalculatednext update.</li>
<li>dropAll :
Drops all database objects owned by the user. Note that functions, procedures
and packages are not dropped.</li>
<li>futureRollbackSQL :
Generates the SQL that is required to rollback the database to current state
after the next update.</li>
<li>listLocks :
Lists all Liquibase updater locks on the current database.</li>
<li>releaseLocks :
Removes any Liquibase updater locks from the current database.</li>
<li>rollback :
Invokes Liquibase rollbacks on a database.</li>
<li>rollbackSQL :
Generates the SQL that is required to rollback the database to the specified
pointing attributes 'rollbackCount', 'rollbackTag'</li>
<li>updateTestingRollback :
Applies the DatabaseChangeLogs to the database, testing rollback. This is done
by updating the database, rolling it back then updating it again.</li>
</ul>


<p>像 changelogSync，changelogSyncSQL，或 update，updateSQL，做的事情是差不多的，而有<em>SQL</em>後綴的版本，是會把要執行的SQL語法輸出到stdout，而不進行db的更新。</p>

<p>在使用上，新的database，一開始就用changelog的xml管理，所有的異動都透過xml管理，然後使用<code>mvn liquibase:update</code>，就會將plugin中的<code>changeLogFile</code>指定的
change log檔更新到db，如果是legcy的專案原本就有db的，可以用<code>mvn liquibase:generateChangeLog</code>把db匯成change log檔案至<code>outputChangeLogFile</code>指定的檔案中，之後再以產生出來的change log為基礎，做資料庫版本的管理。</p>

<h2>同步到xml到db</h2>

<h4>建立user table</h4>

<p>src/main/resources/db.changelog-master.xml
```
&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog</p>

<pre><code>     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;
</code></pre>

<p>  <!-- 建立 uesr table --></p>

<pre><code>&lt;changeSet id="create-user-table" author="kent"&gt;
    &lt;createTable tableName="user"&gt;
        &lt;column name="first_name" type="varchar(50)"&gt;
            &lt;constraints nullable="false"/&gt;
        &lt;/column&gt;
        &lt;column name="last_name" type="varchar(50)"&gt;
        &lt;/column&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog>
```</p>

<p>第一次執行<code>mvn liquibase:update</code>執行後，原本完全沒有table的db多了三個table，</p>

<ul>
<li>databasechangelog是記錄同步用的，</li>
<li>databasechangeloglock是做locking的</li>
</ul>


<p>上面兩個都是直接由liquibase管理，不用去管它。</p>

<ul>
<li>user 則是上面的change log中的<code>&lt;createTable&gt;</code>建立的</li>
</ul>


<p>```</p>

<pre><code>             List of relations
</code></pre>

<p> Schema |         Name          | Type  |  Owner <br/>
--------+-----------------------+-------+----------
 public | databasechangelog     | table | postgres
 public | databasechangeloglock | table | postgres
 public | user                  | table | postgres
```</p>

<p>user跟change log中定義的結構是一致的
```</p>

<pre><code>          Table "public.user"
</code></pre>

<p>   Column   |         Type          | Modifiers
------------+-----------------------+-----------
 first_name | character varying(50) | not null
 last_name  | character varying(50) |
```</p>

<h4>加入額外的欄位</h4>

<p>src/main/resources/db.changelog-master.xml
``` xml
&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog</p>

<pre><code>     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;
</code></pre>

<p>   ...(略)</p>

<pre><code>&lt;!-- 在user table加入 address column --&gt;
&lt;changeSet id="addColumn-example" author="kent"&gt;
    &lt;addColumn catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="address" type="varchar(255)"/&gt;
    &lt;/addColumn&gt;
&lt;/changeSet&gt;  
</code></pre>

<p></databaseChangeLog>
```</p>

<p>改完changelog的xml檔，再次執行<code>mvn liquibase:update</code>後，user table就會多出address column，這次執行，因為databasechangelog中已有記錄<code>&lt;changeSet id="create-user-table" author="kent"&gt;</code>已經被執行過了，所以不會再次被執行。</p>

<p>```</p>

<pre><code>           Table "public.user"
</code></pre>

<p>   Column   |          Type          | Modifiers
------------+------------------------+-----------
 first_name | character varying(50)  | not null
 last_name  | character varying(50)  |
 address    | character varying(255) |
```</p>

<h4>insert data</h4>

<p>src/main/resources/db.changelog-master.xml
``` xml
&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog</p>

<pre><code>     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;
</code></pre>

<p>   ...(略)</p>

<pre><code>&lt;!-- insert兩筆測試資料 --&gt;
&lt;changeSet id="insert-example" author="kent" &gt;
    &lt;insert catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt; 
        &lt;column name="last_name" value="chiu"/&gt; 
    &lt;/insert&gt;
    &lt;insert catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt; 
        &lt;column name="last_name" value="chiu"/&gt; 
    &lt;/insert&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog>
```</p>

<p>改完changelog的xml檔，執行<code>mvn liquibase:update</code>執行後，user table就會多出兩筆資料</p>

<p><code>
 first_name | last_name | address
------------+-----------+---------
 kent       | chiu      |
 cindy      | chiu      |
</code></p>

<h4>版控說明</h4>

<p>在實務上，只要是db的schema有要做異動，就一律從change log的設定檔改，如果是資料內容的異動，則視需求看要不要從change log異動。必要的預設資料可以在change log裡，透過insert tag來建立，可以省去每次重建table都還要另外建立預設資料的步驟。</p>

<p>搭配其他指令，還可以讓資料庫回到特一個特定的版本(change set)，這樣在開發時，就不用怕弄亂資料庫了。</p>

<h4>完整的 db.changelog-master.xml</h4>

<p>``` xml
&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog</p>

<pre><code>     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;

&lt;!-- 建立 uesr table --&gt;
&lt;changeSet id="create-user-table" author="kent"&gt;
    &lt;createTable tableName="user"&gt;
        &lt;column name="first_name" type="varchar(50)"&gt;
            &lt;constraints nullable="false"/&gt;
        &lt;/column&gt;
        &lt;column name="last_name" type="varchar(50)"&gt;
        &lt;/column&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;

&lt;!-- 在user table加入 address column --&gt;
&lt;changeSet id="addColumn-example" author="kent"&gt;
    &lt;addColumn catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="address" type="varchar(255)"/&gt;
    &lt;/addColumn&gt;
&lt;/changeSet&gt;

&lt;!-- insert兩筆測試資料 --&gt;
&lt;changeSet id="insert-example" author="kent" &gt;
    &lt;insert catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt; 
        &lt;column name="last_name" value="chiu"/&gt; 
    &lt;/insert&gt;
    &lt;insert catalogName="mydb" schemaName="public" tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt; 
        &lt;column name="last_name" value="chiu"/&gt; 
    &lt;/insert&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog>
```</p>

<h2>從資料庫產生changelog.xml</h2>

<p>對於即有的database，可以透過<code>generateChangeLog</code>從資料庫產生change log，再以這個change log檔為基礎，之後的異動，再透過liquibase管理(xml -> db)</p>

<p>使用<code>generateChangeLog</code>進行匯出時，預設是只有schema(tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints)，如果要產
生資料，要在<code>diffTypes</code>中加入<strong>data</strong>這個type。</p>

<p><code>bash
kent@Kents-MacBook-Pro:~/dev/liquibase-exercise$ mvn liquibase:generateChangeLog
[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building liquibase-exercise 1.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- liquibase-maven-plugin:3.2.2:generateChangeLog (default-cli) @ liquibase-exercise ---
[INFO] ------------------------------------------------------------------------
[INFO] Executing on Database: jdbc:postgresql://localhost:5432/mydb
[INFO] Generating Change Log from database postgres @ jdbc:postgresql://localhost:5432/mydb (Default Schema: public)
INFO 8/30/14 12:30 PM: liquibase: /Users/kent/dev/liquibase-exercise/src/main/resources/output.xml does not exist, creating
[INFO] Output written to Change Log file, /Users/kent/dev/liquibase-exercise/src/main/resources/output.xml
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.087 s
[INFO] Finished at: 2014-08-30T12:31:00+08:00
[INFO] Final Memory: 8M/61M
[INFO] ------------------------------------------------------------------------
</code></p>

<p>執行完<code>generateChangeLog</code>可以看到change log產生到我們plugin的設定中指定的位置<code>src/main/resources/output.xml</code></p>

<p>如果沒有特別指定<code>diffTypes</code>參數，那只會產生'tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints'
``` xml
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd"></p>

<pre><code>&lt;changeSet author="kent (generated)" id="1409373059484-1"&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
&lt;/changeSet&gt;
&lt;changeSet author="kent (generated)" id="1409373299327-1"&gt;
    &lt;createTable tableName="user"&gt;
        &lt;column name="first_name" type="VARCHAR(50)"&gt;
            &lt;constraints nullable="false"/&gt;
        &lt;/column&gt;
        &lt;column name="last_name" type="VARCHAR(50)"/&gt;
        &lt;column name="address" type="VARCHAR(255)"/&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog>
```</p>

<h4>只產生data</h4>

<p>指定<code>diffTypes=data</code>，就會只產生資料，不會有schema的資訊，如果有需要，也可以直接將資料匯出成csv檔</p>

<p><code>bash
mvn liquibase:generateChangeLog -Dliquibase.diffTypes=data
</code></p>

<p>產生的xml如下
``` xml
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd"></p>

<pre><code>&lt;changeSet author="kent (generated)" id="1409373576402-1"&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog></p>

<p>```</p>

<h4>同時產生schema + data</h4>

<p>如果要產生的xml如下，那<code>diffTypes</code>就要設定為<code>tables,views,columns,indexs,foreignkeys,primarykeys,uniqueconstraints,data</code>
<code>bash
mvn liquibase:generateChangeLog -Dliquibase.diffTypes=tables,views,columns,indexs,foreignkeys,primarykeys,uniqueconstraints,data
</code></p>

<p>產生的xml如下
```
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd"></p>

<pre><code>&lt;changeSet author="kent (generated)" id="1409373576402-1"&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
&lt;/changeSet&gt;
&lt;changeSet author="kent (generated)" id="1409373769747-1"&gt;
    &lt;createTable tableName="user"&gt;
        &lt;column name="first_name" type="VARCHAR(50)"&gt;
            &lt;constraints nullable="false"/&gt;
        &lt;/column&gt;
        &lt;column name="last_name" type="VARCHAR(50)"/&gt;
        &lt;column name="address" type="VARCHAR(255)"/&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;
&lt;changeSet author="kent (generated)" id="1409373769747-2"&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="kent"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
    &lt;insert tableName="user"&gt;
        &lt;column name="first_name" value="cindy"/&gt;
        &lt;column name="last_name" value="chiu"/&gt;
        &lt;column name="address"/&gt;
    &lt;/insert&gt;
&lt;/changeSet&gt;
</code></pre>

<p></databaseChangeLog></p>

<p>```</p>

<h2>完整的pom.xml</h2>

<p>``` xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"</p>

<pre><code>     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
&lt;groupId&gt;com.kent&lt;/groupId&gt;
&lt;artifactId&gt;liquibase-exercise&lt;/artifactId&gt;
&lt;version&gt;1.1.0-SNAPSHOT&lt;/version&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;version&gt;9.3-1101-jdbc41&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;
            &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.2.2&lt;/version&gt;
            &lt;configuration&gt;
                &lt;changeLogFile&gt;${basedir}/src/main/resources/db.changelog-master.xml&lt;/changeLogFile&gt;
                &lt;outputChangeLogFile&gt;${basedir}/src/main/resources/output.xml&lt;/outputChangeLogFile&gt;
                &lt;driver&gt;org.postgresql.Driver&lt;/driver&gt;
                &lt;url&gt;jdbc:postgresql://localhost:5432/mydb&lt;/url&gt;
                &lt;username&gt;postgres&lt;/username&gt;
                &lt;password&gt;postgres&lt;/password&gt;
                &lt;promptOnNonLocalDatabase&gt;false&lt;/promptOnNonLocalDatabase&gt;
                &lt;!-- 同時產生資料跟schema --&gt;
                &lt;!--
                &lt;diffTypes&gt;tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints, data&lt;/diffTypes&gt;
                --&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;        
</code></pre>

<p></project>                   <br/>
```</p>

<h2>個人心得</h2>

<p>會接觸liquibase，主要是因為維護的專案，是屬於產品類型的，一但delivery給客戶後，要昇級程式，常不可避免的會動到db的結構或資料。
新增table跟column通常都不太會有問題，但是如果是要做delete或rename，甚至是對即有資料內容做一些格式的調整或轉換，一些簡單的sql指令(ddl或dml)就有點使不上力了，可能就要寫一些sql的funciton來處理，如果邏輯更複雜時就需要用程式處理，</p>

<p>在當時並沒有比較適合的solution，於是採用了類似Ruby On Rails管資料庫版本的方式做了一套，大部份的異動，都還是希望透過
sql script就能處理，但有些最基本的判斷，像column存不存在，不存在就建立，或column的rename，這些透過sql也不是很好處理，通常都要透過自製的sql function來處理，如果比較複雜的，就寫一個小程式來取代原來的sql script，使用上並不方便，而且
維護成本也不小，光每次測試sql patch，所以這次斷然決定換成用liquibase來管理，看看會不會有顯著的改善，目前看來使用經
驗算是不錯。</p>

<h2>resource</h2>

<ul>
<li><a href="http://www.liquibase.org/documentation/maven/index.html">http://www.liquibase.org/documentation/maven/index.html</a> - liquibase maven plugin</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/05/30/postgresql_101/"/>
    <updated>2012-05-30T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/05/30/postgresql_101</id>
    <content type="html"><![CDATA[<h1>Command Line</h1>

<p>用使用者帳號<code>username</code>登入指定的databalse</p>

<pre><code>$ psql -U username -W -d database

Welcome to psql 8.3.21, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit
</code></pre>

<ul>
<li><code>\q</code> 離開psql指令模式</li>
<li><code>\h</code> SQL 指令的 help</li>
<li><code>\?</code> psql 指令的 help</li>
</ul>


<p>進入後，提示符號會變成<code>資料庫名稱 + -#</code> ,ex : <code>mydb-#</code>，後面的提示符如果是在 <code>mydb-#</code> 表示已進入 psql command mode環境</p>

<pre><code>mydb-# \?

General
  # 重新連線到特定的db (目前在"mydb")    
  \c[onnect] [DBNAME|- USER|- HOST|- PORT|-]
                 connect to new database (currently "mydb")
  \cd [DIR]      change the current working directory
  \copyright     show PostgreSQL usage and distribution terms
  \encoding [ENCODING]
                 show or set client encoding
  \h [NAME]      help on syntax of SQL commands, * for all commands
  \prompt [TEXT] NAME
                 prompt user to set internal variable
  \password [USERNAME]
                 securely change the password for a user
  \q             quit psql
  \set [NAME [VALUE]]
                 set internal variable, or list all if no parameters
  \timing        toggle timing of commands (currently off)
  \unset NAME    unset (delete) internal variable
  \! [COMMAND]   execute command in shell or start interactive shell

Query Buffer
  \e [FILE]      edit the query buffer (or file) with external editor
  \g [FILE]      send query buffer to server (and results to file or |pipe)
  \p             show the contents of the query buffer
  \r             reset (clear) the query buffer
  \w FILE        write query buffer to file

Input/Output
  \echo [STRING] write string to standard output
  \i FILE        execute commands from file
  \o [FILE]      send all query results to file or |pipe
  \qecho [STRING]
                 write string to query output stream (see \o)

Informational
  # 顯示schema
  \d [NAME]      describe table, index, sequence, or view
  # \dt 列出目前db所有的tables
  # \di 列出目前db所有的indexs
  # \ds 列出目前db所有的sequences
  # \dv 列出目前db所有的views
  # \dS 列出目前db所有的system tables
  \d{t|i|s|v|S} [PATTERN] (add "+" for more detail)
                 list tables/indexes/sequences/views/system tables
  \da [PATTERN]  list aggregate functions
  \db [PATTERN]  list tablespaces (add "+" for more detail)
  \dc [PATTERN]  list conversions
  \dC            list casts
  \dd [PATTERN]  show comment for object
  \dD [PATTERN]  list domains
  \df [PATTERN]  list functions (add "+" for more detail)
  \dF [PATTERN]  list text search configurations (add "+" for more detail)
  \dFd [PATTERN] list text search dictionaries (add "+" for more detail)
  \dFt [PATTERN] list text search templates
  \dFp [PATTERN] list text search parsers (add "+" for more detail)
  \dg [PATTERN]  list groups
  \dn [PATTERN]  list schemas (add "+" for more detail)
  \do [NAME]     list operators
  \dl            list large objects, same as \lo_list
  \dp [PATTERN]  list table, view, and sequence access privileges
  \dT [PATTERN]  list data types (add "+" for more detail)
  \du [PATTERN]  list users
  \l             list all databases (add "+" for more detail)
  \z [PATTERN]   list table, view, and sequence access privileges (same as \dp)

Formatting
  \a             toggle between unaligned and aligned output mode
  \C [STRING]    set table title, or unset if none
  \f [STRING]    show or set field separator for unaligned query output
  \H             toggle HTML output mode (currently off)
  \pset NAME [VALUE]
                 set table output option
                 (NAME := {format|border|expanded|fieldsep|footer|null|
                 numericlocale|recordsep|tuples_only|title|tableattr|pager})
  \t             show only rows (currently off)
  \T [STRING]    set HTML &lt;table&gt; tag attributes, or unset if none
  \x             toggle expanded output (currently off)

Copy, Large Object
  \copy ...      perform SQL COPY with data stream to the client host
  \lo_export LOBOID FILE
  \lo_import FILE [COMMENT]
  \lo_list
  \lo_unlink LOBOID    large object operations  
</code></pre>

<h4>列出目前所在的database的所有 tables</h4>

<p> \d{t|i|s|v|S} [PATTERN] (add "+" for more detail)</p>

<ul>
<li>\dt 列出目前db所有的tables</li>
<li>\di 列出目前db所有的indexs</li>
<li>\ds 列出目前db所有的sequences</li>
<li>\dv 列出目前db所有的views</li>
<li>\dS 列出目前db所有的system tables</li>
</ul>


<p>ex:</p>

<pre><code>mydb-# \dt

           List of relations
 Schema |     Name      | Type  | Owner
--------+---------------+-------+-------
 public | auth          | table | admin
 public | match_history | table | admin
 public | usr           | table | admin
(3 rows)
</code></pre>

<h4>顯示某個table，view，index的schema</h4>

<p> \d [NAME]      describe table, index, sequence, or view</p>

<p>ex:</p>

<pre><code>mydb-# \d auth
                                      Table "public.auth"
   Column    |            Type             |                     Modifiers
-------------+-----------------------------+---------------------------------------------------
 id          | integer                     | not null default nextval('auth_id_seq'::regclass)
 create_date | timestamp without time zone |
 enabled     | boolean                     | not null
 expire_date | timestamp without time zone |
 feature_id  | integer                     |
 hwid        | character varying(255)      |
 match_date  | timestamp without time zone |
 matchable   | boolean                     | not null
 max_device  | integer                     |
 printed     | boolean                     | not null
 sn          | character varying(255)      | not null
 trial       | boolean                     | not null
 agent_id    | integer                     |
 user_id     | integer                     |
 version     | character varying(20)       | not null default 1
 edition     | character varying(255)      |
Indexes:
    "auth_pkey" PRIMARY KEY, btree (id)
    "auth_sn_key" UNIQUE, btree (sn)    
</code></pre>

<h4>expanded mode (將資料顯示的方式轉90度)</h4>

<p><code>-x</code> : Turn on the expanded table formatting mode</p>

<p>正常的情況下查詢出來的資料，欄位是以水平方式排列</p>

<p><code>sql
mydb=# select id,author from databasechangelog;
 id | author
----+--------
 1  | bob
(1 row)
</code></p>

<p>透過<code>\x</code>參數可以把讓資料顯示方式變成<strong>垂直排列</strong>，這對於資料欄位較多或資料較長時，layout會亂掉，如果用<em>expanded mode</em>就可以有比較好的效果
<code>sql
mydb=# \x
Expanded display is on.
mydb=# select id,author from databasechangelog;
-[ RECORD 1 ]
id     | 1
author | bob
</code></p>

<h1>Sequence (AUTO INCREMENT)</h1>

<p>PostgreSQL<del>並沒有自增型欄位型態</del>(AUTO
INCREMENT)，但是有提供Sequence機制，這部份，與<a href="http://wiki.kent-chiu.com/doku.php?id=database:oracle_101#auto_increment" title="database:oracle_101">oracle</a>比較類似，但PostgreSQL可以透過建立table時的自訂語法來自動套用Sequence，讓其動作比較接近<strong>AUTO
INCREMENT</strong>的效果</p>

<blockquote><p>更新: 型態選用<code>serial</code>即可有 auto increment 的功能，在執行不指定id欄位的insert後，每個資料列會自動填入 +1 的序號值，不需額外的處理</p></blockquote>

<h3>使用方式</h3>

<h5>讓table的某一column套用sequence</h5>

<p>```
CREATE TABLE tablename (</p>

<pre><code>colname SERIAL
</code></pre>

<p>);
```</p>

<p>上面的語法等效於</p>

<p>```
CREATE SEQUENCE tablename_colname_seq;
CREATE TABLE tablename (</p>

<pre><code>colname integer DEFAULT NEXTVAL('tablename_colname_seq') NOT NULL
</code></pre>

<p>);
```</p>

<h5>建立sequence</h5>

<p><code>
create sequence seq start 100;
</code></p>

<p>以上語法會建立一個名為<code>seq</code>的sequence，啟始值為100 (從100起跳)</p>

<h5>取得目前sequence的值</h5>

<p><code>
select currval('seq');
</code></p>

<h5>取得下一個sequence的值</h5>

<p><code>
select nextval('seq');
</code></p>

<h5>重新設定sequence值</h5>

<p><code>
select setval('seq',9)
</code></p>

<h5>重新設定sequence值(建議)</h5>

<p><code>
select setval('seq', max(id)) FROM myTable;
</code></p>

<h3>Drop all tables script</h3>

<p>```
/<em> create a function for drop all tables </em>/
CREATE OR REPLACE FUNCTION drop_all_table() RETURNS SETOF RECORD   AS $$
DECLARE
  stmt RECORD;
BEGIN</p>

<pre><code>FOR stmt IN
    /* select table */
   SELECT c.relname FROM pg_catalog.pg_class AS c LEFT JOIN
pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE relkind =
'r' AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND
pg_catalog.pg_table_is_visible(c.oid)
 LOOP
    /* drop table one by one */
    EXECUTE 'drop table ' || quote_ident(stmt.relname) || ';';
END LOOP;
</code></pre>

<p>END;
$$ LANGUAGE plpgsql STRICT;
 
begin;
/<em> execute the function </em>/
SELECT drop_all_table();
commit;
```</p>

<h3>Truncate all tables script</h3>

<p>```
/<em> create a function for drop all tables </em>/
CREATE OR REPLACE FUNCTION truncate_all_table() RETURNS SETOF RECORD   AS $$
DECLARE
  stmt RECORD;
BEGIN</p>

<pre><code>FOR stmt IN
    /* select table */
   SELECT c.relname FROM pg_catalog.pg_class AS c LEFT JOIN
pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE relkind =
'r' AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND
pg_catalog.pg_table_is_visible(c.oid)
 LOOP
    /* truncate table one by one */
    EXECUTE 'truncate table ' || quote_ident(stmt.relname) || ';';
END LOOP;
</code></pre>

<p>END;
$$ LANGUAGE plpgsql STRICT;
 
begin;
/<em> execute the function </em>/
SELECT  truncate_all_table();
commit;
```</p>

<p>如果遇到建立script時<code>language “plpgsql” does not exist</code>(通常在linux下才會),可透過createlang命令，安裝plpgsql到指定的db</p>

<p><code>
createlang -d &lt;dbname&gt; plpgsql
</code></p>

<h1>建立全新的Database</h1>

<p>從完全沒有db開始建立的流程如下</p>

<ul>
<li>pgsql/bin/initdb.exe -D <em>path</em></li>
<li><em>path</em>pg_hba.conf
設定local可以不用密碼登入(暫時性的，等設定完成記得改回來)</li>
<li>用os的帳號登入新的db
(通常是administrator)，因為上面已設定不用密碼了，所以只要os的帳號即可登入</li>
<li>登入後再建立新的database跟user</li>
<li>把<em>path</em>pg_hba.conf改回需認證才能登入</li>
</ul>


<h1>管理</h1>

<h5>列出目前活動</h5>

<p>```
select * from pg_stat_activity ;</p>

<p> datid | datname | procpid | usesysid | usename | current_query
-------+---------+---------+----------+---------+---------------
 16976 | simpydb |   31008 |      100 | otis    |
 16976 | simpydb |   26126 |      100 | otis    |
(2 rows)
```</p>

<h1>Resource</h1>

<ul>
<li><a href="http://www.postgresql.org/docs/8.1/static/sql-createsequence.html" title="http://www.postgresql.org/docs/8.1/static/sql-createsequence.html">CREATE SEQUENCE</a></li>
<li><a href="http://www.postgresql.org/docs/8.1/static/functions-sequence.html" title="http://www.postgresql.org/docs/8.1/static/functions-sequence.html">Sequence Manipulation
Functions</a></li>
<li><a href="http://www.postgresql.org/docs/8.0/interactive/datatype.html#DATATYPE-SERIAL" title="http://www.postgresql.org/docs/8.0/interactive/datatype.html#DATATYPE-SERIAL">PostgreSQL serial data
type</a></li>
<li><a href="http://wiki.kent-chiu.com/doku.php?id=database:oracle_101" title="database:oracle_101">Oracle 101</a></li>
<li><a href="http://www.postgresql.org/docs/9.1/static/errcodes-appendix.html">postgresql error code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/01/17/database/"/>
    <updated>2012-01-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/01/17/database</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-1002limh/index.html?ca=drs-tp4608" title="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-1002limh/index.html?ca=drs-tp4608">sql
調校技巧(ibm)</a></li>
<li><a href="http://www.microsoft.com/china/MSDN/library/data/sqlserver/FiveWaystoRevupYourSQLPerformanCE.mspx?mfr=true" title="http://www.microsoft.com/china/MSDN/library/data/sqlserver/FiveWaystoRevupYourSQLPerformanCE.mspx?mfr=true">調校技巧(含分析方式)</a></li>
<li><a href="http://www.catswhocode.com/blog/10-sql-tips-to-speed-up-your-database" title="http://www.catswhocode.com/blog/10-sql-tips-to-speed-up-your-database">http://www.catswhocode.com/blog/10-sql-tips-to-speed-up-your-database</a>

<ul>
<li>10 sql tips to speed up your database</li>
</ul>
</li>
<li>Practical database design from IBM DW <a href="http://www.ibm.com/developerworks/web/library/wa-dbdsgn1.html" title="http://www.ibm.com/developerworks/web/library/wa-dbdsgn1.html">(part
1)</a>
<a href="http://www.ibm.com/developerworks/web/library/wa-dbdsgn2.html" title="http://www.ibm.com/developerworks/web/library/wa-dbdsgn2.html">(part
2)</a></li>
<li><a href="http://wiki.kent-chiu.com/lib/exe/fetch.php?media=database:db2bp_physical_design_0508i.pdf" title="database:db2bp_physical_design_0508i.pdf">db2bp_physical_design_0508i.pdf</a>

<ul>
<li>physical database design from IBM</li>
</ul>
</li>
<li><a href="http://wiki.kent-chiu.com/doku.php?id=database:postgresql_101" title="database:postgresql_101">PostgreSQL
101</a></li>
<li><a href="http://wiki.kent-chiu.com/doku.php?id=database:oracle_101" title="database:oracle_101">Oracle
101</a></li>
<li><a href="http://wiki.kent-chiu.com/doku.php?id=database:the_use_the_index_luke_study_note" title="database:the_use_the_index_luke_study_note">The Use thd index,Luke
學習筆記</a></li>
<li><a href="http://www.jpab.org/" title="http://www.jpab.org/">JPA Performance Benchmark
(JPAB)</a> -
各種資料庫在JPA下效能的比較</li>
<li><h2><a href="http://coolshell.cn/articles/6470.html" title="http://coolshell.cn/articles/6470.html">中國鐵路訂票效能處理問題</a></h2>

<p>中國在長假期時，需應付相當大量的訂單瞬間湧入，網站一下就負荷不了了，這裡有篇滿到位的原因分析。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最佳實踐]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/01/08/best_practice/"/>
    <updated>2012-01-08T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/01/08/best_practice</id>
    <content type="html"><![CDATA[<h1>SQL DML</h1>

<ul>
<li>'in'的效能比'or'好</li>
<li>避免使用負向的查詢， NOT、!=、&lt;>、!&lt;、!>、NOT EXISTS、NOT
IN、NOT LIKE等</li>
<li>避免將'%'放在查詢的條件前面 ex: '%foo' (full table scan)</li>
<li>避免select (*)</li>
<li>减少COUNT(*)</li>
<li>短的sql比長的sql好</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Use thd index,Luke 學習筆記]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/the_use_the_index_luke_study_note/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/the_use_the_index_luke_study_note</id>
    <content type="html"><![CDATA[<p>這篇的內容，主要是記錄 <a href="http://use-the-index-luke.com" title="http://use-the-index-luke.com">Use the
index,Luke</a>
這本線上書籍的學習筆記。 內容大部份取自該網站。</p>

<p>關於 <a href="http://use-the-index-luke.com" title="http://use-the-index-luke.com">Use the
index,Luke</a>
這本書：這本書是以Open
Document的方式公佈在網路上，有網頁版及pdf版可以下載，
本書的內容主要描述database
index的方方面面，該書作者認為對一個開發人員來說，對於database的性能調教，只需要瞭解index就很足够了。</p>

<h2>Anatomy of an SQL Index</h2>

<h3>The Leaf Nodes</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/the_use_the_index_luke_study_note_001.png" alt="the_use_the_index_luke_study_note_001.png" /></p>

<ul>
<li>大部分的database的index設計多以B-Tree結構實作</li>
<li>index本身不為database的一部分,是另外存放在table之外</li>
<li>index是在database的block或page上操作</li>
<li>index結構小且固定，易於排序或異動操作</li>
<li>一個indexed data對應到一個table row，indexed data是排序過的，但table
data本身是沒有排序過的</li>
<li>indexed data的排序不是簡單的由大到小，或由小大而，而是balanced
search tree (B-Tree)的排序結構</li>
</ul>


<h3>The Tree</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/the_use_the_index_luke_study_note_002.png" alt="the_use_the_index_luke_study_note_002.png" /></p>

<ul>
<li>B-Tree的每一個node有兩個以上的值，會由小到大排列</li>
<li>B-Tree的next level的節點的最後一個值，會為上一級節點的值</li>
<li>同一個level的節點內的值也會由小到大依序排列</li>
<li>值可以是重覆的</li>
</ul>


<p><img src="http://blog.kent-chiu.com/images/2011-10-17/the_use_the_index_luke_study_note_003.png" alt="the_use_the_index_luke_study_note_003.png" /></p>

<ul>
<li>以據B-Tree，可以很快的找任一個節點</li>
<li>以要找值”57”來說，從root開始找的規則如上圖所示

<ol>
<li>root找57介於39到83之間，找出下一級(level
2)的節點的最大節為83的節點</li>
<li>找到level2的節點為
46,53,57,83，裡面已有我們要的值”57”，再依上述的規則找level3的節點</li>
<li>找到level3的節點為
55,57,57,此節點已經是葉節點(leaf)，所以，即為我們的要節點</li>
</ol>
</li>
</ul>


<p>一般數百萬的資料，tree的深度約在4\~5層，最糟的情形下，tree的深度也不應該大於7層</p>

<h3>Slow Indexes</h3>

<p>即使使用了index，search的動作還是有可能很慢，主要的原因發生在以下兩個操作</p>

<ol>
<li>Scanning a wider range than intended</li>
<li>Table access</li>
</ol>


<h5>Scanning a wider range than intended</h5>

<p>像上例中，57的使在leaf
node出現了兩次，這代表如果有需要，database會對這個兩個57的子節點做更多的比對，而這種情形，在index愈大時，愈容易發生</p>

<h5>Table access</h5>

<p>在最糟的情形下，每一個rowid可能分佈在不同的table
block，這表示database需要讀入更多的table
block才能完成操作，另句話說，如果所有的rowid分佈在同一個table
block，那麼只需讀一個table block就可以完成search</p>

<h2>The Where Clause</h2>

<h3>The Equals Operator</h3>

<p>以下以此table的schema為例</p>

<p><code>
CREATE TABLE employees (
   employee_id   NUMBER         NOT NULL,
   first_name    VARCHAR2(1000) NOT NULL,
   last_name     VARCHAR2(1000) NOT NULL,
   date_of_birth DATE           NOT NULL,
   phone_number  VARCHAR2(1000) NOT NULL,
   CONSTRAINT employees_pk PRIMARY KEY (employee_id)
);
</code></p>

<p>employee_id是pk，針對pk做query後得到的execution plan如下</p>

<p>```
SELECT first_name, last_name
  FROM employees
 WHERE employee_id = 123
 </p>

<h2> </h2>

<h2>| Id | Operation                   | Name         | Rows | Cost |</h2>

<p>|  0 | SELECT STATEMENT            |              |    1 |    2 |
|  1 |  TABLE ACCESS BY INDEX ROWID| EMPLOYEES    |    1 |    2 |</p>

<h2>|* 2 |   INDEX UNIQUE SCAN         | EMPLOYEES_PK |    1 |    1 |</h2>

<p> </p>

<h2>Predicate Information (IDENTIFIED BY operation id):</h2>

<p>   2 - access("EMPLOYEE_ID"=123)
```</p>

<p>由上面的結果可以看到此sql是透過速度最快的<em>INDEX UNIQUE
SCAN</em>執行，可以得到唯一的結果，然後需再透過<em>TABLE ACCESS BY INDEX
ROWID</em>取得”first_name”, “last_name”， 取”first_name”,
“last_name”是透過<a href="#the_leaf_nodes" title="database:the_use_the_index_luke_study_note">The Leaf Nodes</a>方式，所以速度很快</p>

<p>如果在EMPLOYEE_ID再加入一個sub ID時，讓employee_id,
subsidiary_id成為一個UNIQUE INDEX</p>

<p>```
CREATE UNIQUE INDEX employee_pk</p>

<pre><code>ON employees (employee_id, subsidiary_id);
</code></pre>

<p>```</p>

<p>當where條件中，同時包含employee_id, subsidiary_id, 就會用INDEX UNIQUE
SCAN</p>

<p>```
SELECT first_name, last_name
  FROM employees
 WHERE employee_id   = 123
   AND subsidiary_id = 30;</p>

<h2> </h2>

<h2>| Id | Operation                   | Name         | Rows | Cost |</h2>

<p>|  0 | SELECT STATEMENT            |              |    1 |    2 |
|  1 |  TABLE ACCESS BY INDEX ROWID| EMPLOYEES    |    1 |    2 |</p>

<h2>|* 2 |   INDEX UNIQUE SCAN         | EMPLOYEES_PK |    1 |    1 |</h2>

<p> </p>

<h2>Predicate Information (IDENTIFIED BY operation id):</h2>

<p>   2 - access("EMPLOYEE_ID"=123 AND "SUBSIDIARY_ID"=30) <br/>
```</p>

<p>但如果where條件中，只用到SUBSIDIARY_ID，那便會用效率不好的TABLE ACCESS
FULL (Full Table Scan)</p>

<p>```
SELECT first_name, last_name
  FROM employees
 WHERE subsidiary_id = 20;</p>

<h2> </h2>

<h2>| Id | Operation         | Name      | Rows | Cost |</h2>

<p>|  0 | SELECT STATEMENT  |           |  110 |  477 |</p>

<h2>|* 1 |  TABLE ACCESS FULL| EMPLOYEES |  110 |  477 |</h2>

<p> </p>

<h2>Predicate Information (IDENTIFIED BY operation id):</h2>

<p>   1 - filter("SUBSIDIARY_ID"=20)
```</p>

<p>因為查詢時，是查詢以下的結構</p>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/the_use_the_index_luke_study_note_004.png" alt="the_use_the_index_luke_study_note_004.png" /></p>

<p>如果要讓查詢更有效率，可SUBSIDIARY_ID再為加上的一個的index，就會由FULL
TABLE SCAN變成INDEX RANGE SCAN</p>

<h2>```</h2>

<h2>| Id | Operation                   | Name       | Rows | Cost |</h2>

<p>|  0 | SELECT STATEMENT            |            |  110 |   77 |
|  1 |  TABLE ACCESS BY INDEX ROWID| EMPLOYEES  |  110 |   77 |</p>

<h2>|* 2 |   INDEX RANGE SCAN          | EMP_SUP_ID |  110 |    1 |</h2>

<h2>Predicate Information (identified by operation id):</h2>

<p>   2 - access("SUBSIDIARY_ID"=20)
```</p>

<h4>Execution Plan分析</h4>

<p><code>
SELECT first_name, last_name, subsidiary_id, phone_number
  FROM employees
 WHERE last_name  = 'WINAND'
   AND subsidiary_id = 30;
</code></p>

<p>如果用以上條件查詢，會產出</p>

<h2>```</h2>

<h2>| Id | Operation                   | Name         | Rows | Cost |</h2>

<p>|  0 | SELECT STATEMENT            |              |    1 |   30 |
|* 1 |  TABLE ACCESS BY INDEX ROWID| EMPLOYEES    |    1 |   30 |</p>

<h2>|* 2 |   INDEX RANGE SCAN          | EMPLOYEES_PK |   40 |    2 |</h2>

<p> </p>

<h2>Predicate Information (IDENTIFIED BY operation id):</h2>

<p>   1 - filter("LAST_NAME"='WINAND')
   2 - access("SUBSIDIARY_ID"=30)
```</p>

<p>我們一步步解說database做了什麼事</p>

<ol>
<li>第一步是<em>INDEX RANGE SCAN</em>它的id是2，對應到”2 -
access(“SUBSIDIARY_ID”=30)“，它會在index
tree，找出第一個”SUBSIDIARY_ID”=30的leaf node，透過這個leaf
node可以找出所有相符的資料(可能會有相當多筆，此例中是40筆)</li>
<li>第二步是<em>TABLE ACCESS BY INDEX
ROWID</em>會取出ROWID相對的整個資料列(row)，有了整個資料列，便可執行filter(“LAST_NAME”='WINAND')的動作。</li>
</ol>


<p>在原來有index的欄位上做'UPPER''之類的function，會讓查詢變成FULL TABLE
SCAN</p>

<p>用Bind Parameters可以有以下兩個益處</p>

<ol>
<li>Security 可以避免SQL Injection</li>
<li>Performance Optimizer會重用cache住的sql statement，如果執行的sql
statement相當的相似。</li>
</ol>


<h3>Searching For Ranges</h3>

<p>SQL的查詢的操作運算子(EX:
&lt;,>,between,…)可以執行基於key的查找，而<strong>查詢欄位的順序</strong>對這類查詢的效能，會有巨大的影響。</p>

<h2>Execution Plan</h2>

<h3>Oracle Scripts</h3>

<h3>PostgreSQL Scripts</h3>

<p>要觀查PostgreSQL的Execution Plan只需要在要執行的statement前加上 EXPLAIN</p>

<p><code>
EXPLAIN SELECT * FROM MY_TABLE
</code></p>

<p>如果SQL Statement中有bind parameter (\$1, \$2, …)，就必需先進行prepare</p>

<p><code>
PREPARE stmt(int) AS SELECT $1;
</code></p>

<p>然後再EXPLAIN EXECUTE</p>

<p><code>
EXPLAIN EXECUTE stmt(1);
</code></p>

<p>```</p>

<h2> QUERY PLAN</h2>

<p> Result  (cost=0.00..0.01 rows=1 width=0)
```</p>

<ul>
<li>cost
cost有兩個值，第一個是啟動所需的cost，第二個是執行後，取回全部資料所需的cost，cost是相對的值，沒有一定的單位，各種資料庫的cost有自已計算的方式</li>
<li>rows 估計的row count</li>
<li>width 預期的row width</li>
</ul>


<p>EXPLAIN可以加上ANALYZE，會得到更多的資料，但ANALYZE會真正去執行SQL
COMMAND，所以<strong>當COMMAND是INSERT，UPDAET，DELETE時要特別小心</strong></p>

<p>```
EXPLAIN ANALYZE EXECUTE stmt(1);
 </p>

<pre><code>               QUERY PLAN
</code></pre>

<hr />

<p> Result  (cost=0.00..0.01 rows=1 width=0)(actual time=0.002..0.002 rows=1 loops=1)
 Total runtime: 0.020 ms
```</p>

<h3>SQLServer Scripts</h3>
]]></content>
  </entry>
  
</feed>
