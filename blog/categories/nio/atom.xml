<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nio | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/nio/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-11T22:01:55+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JAVA NIO 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/04/03/nio_101/"/>
    <updated>2012-04-03T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/04/03/nio_101</id>
    <content type="html"><![CDATA[<h3>Path</h3>

<p>之前java.io的基本操作是基於<a href="http://docs.oracle.com/javase/7/docs/api/java/io/File.html" title="http://docs.oracle.com/javase/7/docs/api/java/io/File.html">File</a>,NIO的基本操作是<a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html" title="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html">Path</a>。
Path</p>

<p>兩者間可以透過<code>Path.toFile()</code>,<code>File.toPath()</code>互相轉換，Path雖然可以完成很多java.io.File的操作，但因為java.io.File具有一些操作是Path沒辦法做的，所以，java.io.File並沒有被deprecate</p>

<p>aPath.resolve(bPath) - bPath會串接在aPath後面，結果會是 <code>aPath/bPath</code></p>

<p>如果不想看了解細節，可以在了解Path後，可以先試著用用看io跟nio的轉換表來使用NIO
http://docs.oracle.com/javase/tutorial/essential/io/legacy.html#mapping
http://docs.oracle.com/javase/tutorial/essential/io/legacy.html#mapping")</p>

<h3>Paths</h3>

<h5>多重目錄</h5>

<p><code>
Path path = Paths.get("myPath", "subPathA", "subPathB"); // myPath/subPathA/subPathB
</code></p>

<h5>環境變數</h5>

<p>Path並不直接支援環境變數(Environment
Variable)的使用，所以，需要自行透過System.getProperty()取出變數後，丟進path</p>

<p><code>
Path downloadedFile = Paths.get(System.getProperty("user.home"),"downloads", "test.txt");
</code></p>

<h3>Files</h3>

<h5>讀入文字檔</h5>

<p><code>
List&lt;String&gt; lines = Files.readAllLines(path,Charset.forName("UTF-8"));
</code></p>

<h5>列出目錄下的子目錄或檔案</h5>

<p>這邊的try-catch是java7的新功能，只要有實作<a href="http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html" title="http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html">Closeable</a>的類別，就可以用這樣的方式處理。</p>

<p>```
Path dir = ...;
try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, "*.{java,class,jar}")) {</p>

<pre><code>for (Path entry: stream) {
    System.out.println(entry.getFileName());
}
</code></pre>

<p>} catch (IOException x) {</p>

<pre><code>//IOException can never be thrown by the iteration.
//In this snippet, it can only be thrown by newDirectoryStream.
System.err.println(x);
</code></pre>

<p>}
```</p>

<h1>MISC</h1>

<h5>Symbolic,Hard Links</h5>

<p>雖然 Windows 沒有 Symbolic, Hard Links
但在程式中還是可以使用，NIO會處理跨平台的相容性。 Symbolic 會用 Windows
中的 Shortcut取代。</p>

<h5>從jar檔中取得Path</h5>

<p>在程式中，常用<code>url = myObject.getClass().getResource(“my.txt”)</code>取得檔案的url，然後直接使用裡面的資訊取得File或Stream，Path的話，可以這樣用<code>Path.get(url.toURI())</code>，
但這個在預設的檔案系統下可以行的通，但程式被包成時jar檔行不通了，因為jar檔在NIO里是另一個FileSystem，以下的method，
可以不用管resource是放jar或直接放classpath裡面，都以把resource抓成Path，抓成Path後，file
system的資訊會被包在Path中，所以再來就可以不用管他是不是在jar裡面了</p>

<p>```
public static Path urlToPath(URL buildUrl) throws URISyntaxException, IOException {</p>

<pre><code>Path result;
    if ("jar".equalsIgnoreCase(buildUrl.toURI().getScheme())) {
    JarURLConnection jarUrl = (JarURLConnection) buildUrl.openConnection();
    FileSystem fs = FileSystems.newFileSystem(Paths.get(jarUrl.getJarFileURL().toURI()), null);
    result = fs.getPath(jarUrl.getEntryName());
    logger.info("load {} from jar : {}", result.getFileName(),fs);
} else {
    result = Paths.get(buildUrl.toURI());
    logger.info("load {} from : {}", result.getFileName() ,buildUrl);
}
return result;
</code></pre>

<p>}
```</p>

<h1>Resource</h1>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/io/fileio.html" title="http://docs.oracle.com/javase/tutorial/essential/io/fileio.html">Oracle官網NIO教學</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/io/legacy.html#mapping" title="http://docs.oracle.com/javase/tutorial/essential/io/legacy.html#mapping">io跟nio的轉換表</a></li>
<li>The power of java 7 NIO.2 (JSR 203) - <a href="http://tamanmohamed.blogspot.com/2012/03/jdk7-part-1-power-of-java-7-nio2-jsr.html" title="http://tamanmohamed.blogspot.com/2012/03/jdk7-part-1-power-of-java-7-nio2-jsr.html">part
1</a></li>
<li><a href="http://tutorials.jenkov.com/java-nio/index.html" title="http://tutorials.jenkov.com/java-nio/index.html">Java NIO
Tutorial</a>

<ul>
<li>一序列的Java NIO教學</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
