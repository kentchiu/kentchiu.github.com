<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spring | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-09-18T16:50:57+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Boot筆記]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/05/30/spring-boot-101/"/>
    <updated>2014-05-30T12:44:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/05/30/spring-boot-101</id>
    <content type="html"><![CDATA[<p>pom.xml</p>

<p>``` xml</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;myproject&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.1.0.M2&lt;/version&gt;
    &lt;/parent&gt;

    &lt;!-- Additional lines to be added here... --&gt;

&lt;/project&gt;
</code></pre>

<p>```</p>

<p>maven設定檔是透過<code>&lt;parent&gt;</code> tag繼承 spring-boot預先定義好的 parent pom，在parent的pom檔中，有許多預設的dependencies，所以，引用到 parent pom裡已預先定義好的 dependency 時，就不需再定義該 <code>&lt;dependency&gt;</code> tag下的 <code>&lt;version&gt;</code> tag。在本文章中的 <code>&lt;dependency&gt;</code>  只要是沒加 <code>&lt;version&gt;</code> tag的，都是因為 parent pom 已有預先定義好的 dependencies.</p>

<p>建議可以調 parent 的 pom.xml 出來看看，會比較清楚 spring boot 的 building 機制，eclipse 跟 intelliJ 都支援 link 到 parent pom 的功能。</p>

<p>Spring Boot Hello World:</p>

<p>``` java
@Controller
@EnableAutoConfiguration
public class Application {</p>

<pre><code>@RequestMapping("/")
@ResponseBody
String home() {
    return "Hello World!";
}


public static void main(String[] args) {
    ApplicationContext ctx = SpringApplication.run(Application.class, args);

    System.out.println("Let's inspect the beans provided by Spring Boot:");

    String[] beanNames = ctx.getBeanDefinitionNames();
    Arrays.sort(beanNames);
    // 表列出引用到的 beans
    for (String beanName : beanNames) {
        System.out.println(beanName);
    }
}
</code></pre>

<p>}
```</p>

<p>比起傳統的 Spring RESTful 程式，spring boot簡單許多。</p>

<p>spring-boot-maven-plugin主要的功能是 build 出 war 檔或可執行的 jar 檔</p>

<p>``` xml
<build></p>

<pre><code>&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p></build>
```</p>

<p>執行 <code>mvn spring-boot:run</code> ， 加入 <code>--debug</code> 參數可以dump auto config 的細節， 方便除錯 <code>mvn spring-boot:run --debug</code>，如果是在IDE執行成 Application，那把<code>--debug</code>加到program argument即可，或者是直接寫到<code>SpringApplicationBuilder</code></p>

<p><code>new SpringApplicationBuilder(MyConfig.class).run(new String[]{"--debug"});</code></p>

<h1>``` bash</h1>

<h1>AUTO-CONFIGURATION REPORT</h1>

<h2>Positive matches:</h2>

<p>   AuditAutoConfiguration.AuditEventRepositoryConfiguration</p>

<pre><code>  - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found no beans (OnBeanCondition)
</code></pre>

<p>   EndpointAutoConfiguration#autoConfigurationAuditEndpoint</p>

<pre><code>  - @ConditionalOnBean (types: org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport; SearchStrategy: all) found the following [autoConfigurationReport] @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint; SearchStrategy: current) found no beans (OnBeanCondition)
</code></pre>

<p>   EndpointAutoConfiguration#beansEndpoint</p>

<pre><code>  - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.BeansEndpoint; SearchStrategy: all) found no beans (OnBeanCondition)
</code></pre>

<p>```</p>

<p>如果想要抓到Application傳進來的參數，可以implement <code>CommandLineRunner</code></p>

<p>``` java
import org.springframework.boot.<em>
import org.springframework.stereotype.</em></p>

<p>@Component
public class MyBean implements CommandLineRunner {</p>

<pre><code>public void run(String... args) {
    // Do something...
}
</code></pre>

<p>}
```</p>

<h2>Properties</h2>

<p>屬性檔預設預案是在 classpath下的 application.properties或 application-{profile}.properties</p>

<p>屬性中可以用亂數產生器,因為使用了<code>RandomValuePropertySource</code></p>

<p><code>properties
my.secret=${random.value}
my.number=${random.int}
my.bignumber=${random.long}
my.number.less.than.ten=${random.int(10)}
my.number.in.range=${random.int[1024,65536]}
</code></p>

<p>在屬性檔的屬性可以透過<code>@Value</code>及<code>@ConfigurationProperties</code> binding 到程式， 也可以jsr-303的 bean validation 進行驗證。</p>

<h2>JPA</h2>

<p>要在 spring boot 中啟用 JPA也相當簡單， 只要加入 <code>spring-boot-starter-data-jpa</code> 跟 database driver即可，其他的設定像 hibernate.dialect 等 spring boot 會依照使用的資料庫選擇適合的設定。</p>

<p>使用 hsqldb 當 database</p>

<p>``` xml</p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;
        &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>

<p>```</p>

<p>使用 mysql 當 database</p>

<p>```</p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>

<p>```</p>

<p>如果用 in-memory database，像hsqldb，h2，derby … 當db，jpa會自動建立 entity 對應的table，如果是其他 database，則需自行建立，或者也可以透過 application.properties 設定檔來改寫預設的行為。</p>

<h2>Testing</h2>

<h4>Unit Test</h4>

<p>spring一向強調測試的重要性，在spring寫測試比起在其它 framework 下會愉快許多。spring boot 在測試上，在基於 spring 本身的基礎上，又加了一些方便的配置。</p>

<p>在繼承 parent pom之後，unit test常用的三板斧，就會被配置在 test scope了(不會被 deploy 成product)，這三板斧是:</p>

<ol>
<li>Junit - 單元測試lib</li>
<li>Hamcrest - 斷言工具 (assertion)，搭配 <code>assertThat</code> 用的(不要再 <code>assertEquals</code>，請一律<code>assertThat</code>吧)</li>
<li>Mockito - 目前java最流行的 mock framework</li>
</ol>


<h4>Database Test</h4>

<p>如果要做的測試跟db有關，建議採用in-memory database，不要mock，但如果沒有採用像 jpa 這種會自動依 dialect 轉換 sql 語法的 framework時，可能就要對測試方式做調整。在資料庫的測試，我通常是採用 hsqldb + dbunit，而production的database，即依專案需求而決定，使用jpa時，單元測試時在 hsqldb，真正執行時在其他db ex: mysql， postgresql，…，都沒遇過太大的問題。</p>

<p>但是如果沒辦法使用jpa時(通常會換成 JdbcTemplate)，而且又使用到許多特定資料庫特有的功能時，就會採用 dbunit + rollback base的測試，這一類的測試，在測試程式的撰寫上，通常需要花比較多的心力。</p>

<h4>Web Test</h4>

<p>web test，spring 本來就有提供 MockMvc 的 mock object，4.x 版後以的 spring mvc test 都改用 fluent api 來寫測試了。</p>

<h4>Spring Boot Application Test</h4>

<h4>unsorted</h4>

<ul>
<li><del>在專案中所有的 classes 都會被 <code>@ComponentScan</code> 掃描</del> ﹣》 只有base package</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[透過JMX重新載入Tomcat上的Web Application]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/11/16/reload-tomcat-web-application-by-jmx/"/>
    <updated>2013-11-16T15:45:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/11/16/reload-tomcat-web-application-by-jmx</id>
    <content type="html"><![CDATA[<h2>tomcat</h2>

<h2>test by jconsole</h2>

<p>啟動tomat</p>

<pre><code>kents-mbp:~ kent$ tail -f ~/dev/apache-tomcat-7.0.42/logs/catalina.out
Nov 16, 2013 4:05:29 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /Users/kent/dev/apache-tomcat-7.0.42/webapps/my-webapp.war
</code></pre>

<p>jconsole的位置在JDK的bin目錄下，執行後可以看到本機jvm運行中的程式。</p>

<p>一層一層展開下去可以看到tomcat有一個reload的節點，把節點的object name複製出來，程式會用到</p>

<p><code>Catalina/WebModule/"//localhost/my-webapp"/non/e/none/Operations/reload</code></p>

<p>jconsole可以直接執行reload的節點，執行後可以看到tomcat進行reload</p>

<pre><code>Nov 16, 2013 4:16:24 PM org.apache.catalina.core.StandardContext reload  # 透過JMX執行reload operation後可以看到tomcat對my-webapp進行reload
INFO: Reloading Context with name [/my-webapp] has started
Nov 16, 2013 4:16:25 PM org.apache.catalina.core.StandardContext reload
INFO: Reloading Context with name [/my-webapp] is completed
</code></pre>

<p>也可以透過程式進行jmx呼叫，下面的程式是透過spring3執行jmx</p>

<pre><code>// bean的configration檔
public MBeanServerConnection jmxConnector() {
    MBeanServerConnectionFactoryBean factoryBean =new MBeanServerConnectionFactoryBean();
    try {
        factoryBean.setServiceUrl("service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jmxrmi");
        factoryBean.afterPropertiesSet();
        MBeanServerConnection connection = factoryBean.getObject();
        return connection;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}


// 程式
@Autowaire
private MBeanServerConnection connection;

public void reloadWebApplication() {
    try {
        ObjectName objectName = new ObjectName("Catalina:j2eeType=WebModule,name=//localhost/idcview,J2EEApplication=none,J2EEServer=none");
        connection.invoke(objectName, "reload", null, null); // 執行tomcat的reload
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Rest檔案上傳及下載]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc/"/>
    <updated>2013-03-10T14:27:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc</id>
    <content type="html"><![CDATA[<p>File upload</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/foobar/upload", method = RequestMethod.POST)
public @ResponseBody
String upload(@RequestParam("file") MultipartFile file, @RequestParam("fileId") String fileId) {
    logger.info("save import file {} to {}", file.getOriginalFilename(), fileId);

    File resultHome = getWorkingDir();
    File temp = new File(resultHome, fileId);
    try {
        IOUtils.copy(file.getInputStream(), new FileOutputStream(temp));
        return "{success: true}";
    } catch (FileNotFoundException e) {
        logger.error("upload file fail", e);
    } catch (IOException e) {
        logger.error("upload file fail", e);
    }
    return "{success: false}";
}
</code></pre>

<p>```</p>

<p>File Download</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/forbar/export", method = RequestMethod.GET)
public HttpEntity&lt;byte[]&gt; excelExcel() throws IOException {
    File file = new File("myexcel.xls");
    byte[] body = FileUtils.readFileToByteArray(file);
    HttpHeaders header = new HttpHeaders();
    header.setContentType(new MediaType("application", "xls"));
    header.set("Content-Disposition", "attachment; filename=" + "foobar.xls");
    header.setContentLength(body.length);
    return new HttpEntity&lt;byte[]&gt;(body, header);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
