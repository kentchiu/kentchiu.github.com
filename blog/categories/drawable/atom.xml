<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: drawable | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/drawable/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-23T12:25:56+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Drawable 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/04/17/drawable_101/"/>
    <updated>2012-04-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/04/17/drawable_101</id>
    <content type="html"><![CDATA[<p>這篇文章裡的原始碼我放在GITHUB上 :
<a href="https://github.com/DraculaCwg/android_exercise" title="https://github.com/DraculaCwg/android_exercise">https://github.com/DraculaCwg/android_exercise</a></p>

<p>在android中，要設計出美觀的ui，通常都跟<code>Drawable</code>相關的物件脫離不了關係，<code>Drawable</code>翻成中文為”可繪的”，</p>

<p><img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_001.png" alt="drawable_101_001.png" /></p>

<p>由上面的類別結構圖可以得知，圖檔、顏色、動畫、圖形，漸層這些都是屬於<code>Drawable</code>的子類別。
回過頭來看所有gui元件的祖先<code>View</code>
class，裡面跟<code>Drawable</code>有關的是setBackground開頭的幾個method，
也就是說，對於所有的元件，我們都可以透過圖片、形狀、顏色、…等<code>Drawable</code>的子類別來改變元件的外觀。</p>

<p>```</p>

<pre><code>public class View implements Drawable.Callback, KeyEvent.Callback, AccessibilityEventSource {
    public void setBackgroundColor(int color) {
        setBackgroundDrawable(new ColorDrawable(color));
    }
 
    public void setBackgroundColor(int color) {
       ...
    }
 
    @RemotableViewMethod
    public void setBackgroundResource(int resid) {
        if (resid != 0 &amp;&amp; resid == mBackgroundResource) {
            return;
        }
 
        Drawable d= null;
        if (resid != 0) {
            d = mResources.getDrawable(resid);
        }
        setBackgroundDrawable(d);
 
        mBackgroundResource = resid;
    }
 
    public void setBackgroundDrawable(Drawable d) {
        ...
    }
}
</code></pre>

<p>```</p>

<p>實務上比較常用的做法，是透過xml來設定元件的background，而官網文件上的<a href="http://developer.android.com/guide/topics/resources/drawable-resource.html" title="http://developer.android.com/guide/topics/resources/drawable-resource.html">Drawable
Resources</a>
裡面的xml tag都可以找到跟上面的類別相對應的tag，需要特別注意的是 .png,
.9.png,.jpg, or
.gif這些圖檔只要放在res\drawable的目錄下，就會自動依檔名變成可以直接在XML裡引用的Drawable
Resource，不需額外的tag
而另外常用的還有<code>Shape Drawable</code>這種resource，他裡面包含了處理顏色、形狀，外框的子tags</p>

<p>基本上，只要透過圖片跟Shape
Drawable，就可以玩出很多效果了，先從簡單的來好了:</p>

<h3>圖片</h3>

<p>要改變元件的外觀，最快的方式就是把元件加上背景圖片，下圖效果都是單純的把元件的背景圖片換掉而已</p>

<p><img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_002.png" alt="drawable_101_002.png" /></p>

<p>上圖三個view，分別是用這三個圖片當底圖 (圖片來源 :
<a href="http://www.dibbus.com/2011/03/9patch-images-in-android/" title="http://www.dibbus.com/2011/03/9patch-images-in-android/">http://www.dibbus.com/2011/03/9patch-images-in-android/</a>)</p>

<p><img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_003.png" alt="drawable_101_003.png" />
<img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_004.png" alt="drawable_101_004.png" />
<img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_005.png" alt="drawable_101_005.png" /></p>

<p>透過把android:background設定成圖片的resource就可以達到上面的效果</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical" &gt;
</code></pre>

<p> </p>

<pre><code>&lt;TextView
    android:id="@+id/bule"
    android:layout_width="match_parent"
    android:layout_height="100dp"
    android:background="@drawable/btn_blue_matte"
    android:gravity="center"
    android:text="bule"
    android:textColor="@color/White" /&gt;
</code></pre>

<p> </p>

<pre><code>&lt;TextView
    android:id="@+id/bule_glossy"
    android:layout_width="match_parent"
    android:layout_height="100dp"
    android:background="@drawable/btn_blue_glossy"
    android:gravity="center"
    android:text="bule glossy"
    android:textColor="@color/White" /&gt;
</code></pre>

<p> </p>

<pre><code>&lt;TextView
    android:id="@+id/corner"
    android:layout_width="match_parent"
    android:layout_height="100dp"
    android:background="@drawable/btn_blue_pink_glossy"
    android:gravity="center"
    android:text="blue glossy with pink"
    android:textColor="@color/White" /&gt;
</code></pre>

<p> 
</LinearLayout>
```</p>

<h3>Shape Drawable</h3>

<p>除了用圖片，也可以用<code>Shape Drawable</code>的方式來改變元件的外觀，Shape
Drawable可以運用的tag如下</p>

<ol>
<li>&lt;corners> 圖形的四個角的形狀</li>
<li>&lt;gradient> 漸層</li>
<li>&lt;padding> 內部圖文</li>
<li>&lt;size></li>
<li>&lt;solid> 填滿的顏色</li>
<li>&lt;stroke> 外框的線條效果</li>
</ol>


<p>下面就是透過設定<code>Shape Drawable</code>的tag達到的效果</p>

<ol>
<li>第一個view是使用了數個子tag達到的</li>
<li>第二個view是只使用<code>&lt;gradient&gt;</code>做漸層</li>
<li>第三個view是只使用<code>&lt;corners&gt;</code>來設定圖形為圓角(round)</li>
<li>第四個view是只使用<code>&lt;solid&gt;</code>設定背景為綠色</li>
<li>第五個view是只使用<code>&lt;stroke&gt;</code>來設定外框的效果</li>
</ol>


<p><img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_006.png" alt="drawable_101_006.png" /></p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" &gt;
 
    &lt;TextView
        android:id="@+id/all"
        android:layout_width="match_parent"
        android:layout_height="75dp"
        android:gravity="center"
        android:background="@drawable/shape_all"
        android:textColor="@color/Black"
        android:text="shape mix" /&gt;
 
    &lt;TextView
        android:id="@+id/gradient"
        android:layout_width="match_parent"
        android:layout_height="75dp"
        android:gravity="center"
        android:background="@drawable/shape_gradient"
        android:textColor="@color/Black"
        android:text="gradient" /&gt;
 
    &lt;TextView
        android:id="@+id/corner"
        android:layout_width="match_parent"
        android:layout_height="75dp"
        android:gravity="center"
        android:background="@drawable/shape_corners"
        android:textColor="@color/Black"
        android:text="corner" /&gt;
 
 
    &lt;TextView
        android:id="@+id/corner"
        android:layout_width="match_parent"
        android:layout_height="75dp"
        android:gravity="center"
        android:background="@drawable/shape_solid"
        android:textColor="@color/Black"
        android:text="corner" /&gt;
    &lt;TextView
        android:id="@+id/stroke"
        android:layout_width="match_parent"
        android:layout_height="75dp"
        android:gravity="center"
        android:background="@drawable/shape_stroke"
        android:textColor="@color/White"
        android:text="stroke" /&gt;
 
&lt;/LinearLayout&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;
    &lt;gradient
        android:centerColor="@color/WhiteSmoke"
        android:endColor="@color/Yellow"
        android:startColor="@color/Blue" /&gt;
    &lt;corners android:radius="50dp" /&gt;
    &lt;stroke
        android:dashGap="5dp"
        android:dashWidth="3dp"
        android:width="5dp"
        android:color="@color/DarkSalmon" /&gt;
&lt;/shape&gt;
</code></pre>

<p>```</p>

<h5>漸層</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;
 
    &lt;gradient
        android:angle="90"
        android:centerColor="@color/WhiteSmoke"
        android:endColor="@color/Yellow"
        android:startColor="@color/Blue" /&gt;
 
&lt;/shape&gt;
</code></pre>

<p>```</p>

<h5>圓角</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;
    &lt;corners android:radius="50dp"/&gt;
    &lt;solid android:color="@color/White"/&gt;
&lt;/shape&gt;
</code></pre>

<p>```</p>

<h5>背景色</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;
 
    &lt;solid android:color="@color/Green" /&gt;
 
&lt;/shape&gt;
</code></pre>

<p>```</p>

<h5>外框</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;
    &lt;stroke android:width="5dp"
        android:color="@color/Red"
        android:dashWidth="3dp"
        android:dashGap="5dp"
        /&gt;
&lt;/shape&gt;
</code></pre>

<p>```</p>

<h3>半透明效果</h3>

<p>像下圖的半透明效果(Smoked
Glass)，可以直接透過設定backgroud的顏色的透明度來達到，</p>

<p><img src="http://blog.kent-chiu.com/images/2012-04-17/drawable_101_007.png" alt="drawable_101_007.png" /></p>

<p>上圖的效果，主要就是在下面的這張圖上，放了一個半透明的text
view，要讓view半透明就是設定View的backgroud屬性，<code>android:background=”#77000000”</code>
#77000000是傳統的RGB前面加上一個透明度(alpha)，以傳統的RGB值#000000是全黑，#FFFFFF是全白，而前面的alpha的值也是00\~FF，這邊設成77剛好是一半。</p>

<p>[[android:drawable_101_008.png][]</p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
 
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/frameLayout1"
    android:layout_width="match_parent"
    android:layout_height="200dp"
    android:background="@drawable/google_doodle" &gt;
 
    &lt;TextView
        android:id="@android:id/text2"
        android:layout_width="fill_parent"
        android:layout_height="100dp"
        android:background="#77000000"
        android:gravity="center_vertical"
        android:text="smoked glass"
        android:textColor="#ffffffff"
        android:textSize="30dip" /&gt;
 
&lt;/FrameLayout&gt;
</code></pre>

<p>```</p>

<p>透明度的效果好不好，會跟後面的背景有關，有時，同一個透明度的值，在不同的背景下，效果就會差很多</p>

<h1>Resource</h1>

<ul>
<li><a href="http://www.dibbus.com/2011/03/9patch-images-in-android/" title="http://www.dibbus.com/2011/03/9patch-images-in-android/">http://www.dibbus.com/2011/03/9patch-images-in-android/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
