<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: layout | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/layout/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-08-31T01:36:04+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Layout]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/layout/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/layout</id>
    <content type="html"><![CDATA[<ul>
<li>可以透xml(建議)或程式直接設定layout</li>
<li>太過複雜的Layout會影響操作效能跟操作性，應盡可能保持Layout愈簡單愈好</li>
</ul>


<p><code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  android:orientation="vertical"
  android:layout_width="fill_parent"
  android:layout_height="fill_parent"&gt;
&lt;TextView
  android:layout_width="fill_parent"
  android:layout_height="wrap_content"
  android:text="Enter Text Below"
/&gt;
&lt;EditText
  android:layout_width="fill_parent"
  android:layout_height="wrap_content"
  android:text="Text Goes Here!"
/&gt;
&lt;/LinearLayout&gt;
</code></p>

<p>上例中的fill_parent、wrap_content為<a href="#layout_parameter" title="android:layout ↵">Layout
Parameter</a>，每個Layout適用的<a href="#layout_parameter" title="android:layout ↵">Layout
Parameter</a>不盡相同，使用時需注意。</p>

<p>Layout
Parameters的使用需配合上一層的ViewGroup的layout決定，如上圖中，第一層的Layout是LinearLayout所以，第二層的三個Views(RelativeLayout,
View, View)都必需使用<code>LinearLayout</code>的<code>LayoutParamters</code>進行細部設定
，而第三層的三個View都是<code>RelativeLayout</code>的children，所以，都要用<code>RelativeLayout</code>的<code>LayoutParamters</code>進行細部設定。^<a href="#fn__1">1)</a>^</p>

<p>用程式設定Layout Parameters的方式如下:</p>

<p><code>
myView.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
</code></p>

<h5>Layout Parameter</h5>

<p>Layout的設定，主要是透過<a href="http://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html" title="http://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html">Layout
Parameter</a>，不同的Layouts需套用不同的Layout
Parameters. Table Layout有Table Layout專屬的Layout Parameters、Liner
Layout有Liner Layout專屬的Layout Parameters</p>

<p>可以透過<a href="http://developer.android.com/guide/developing/tools/layoutopt.html" title="http://developer.android.com/guide/developing/tools/layoutopt.html">layoutopt</a>工具來對layout進行最佳化</p>

<p>@ : at the beginning of the string indicates that the XML parser should
parse and expand the rest of the ID string and identify it as an ID
resource.</p>

<ul>
<li>: means that this is a new resource name that must be created and
added to our resources (in the R.java file)</li>
</ul>


<h5>通用屬性</h5>

<ol>
<li>gravity 決定元件內容靠在什麼地方</li>
<li>layout_gravity 決定元件靠在父元件的什麼地方</li>
</ol>


<p>以一個TextView元件來說，<code>android:gravity=“center”</code>會讓TextView內容置中，而<code>android:gravity=“right”</code>會讓TextView在父元件中靠右</p>

<p><a href="http://thinkandroid.wordpress.com/2010/01/14/how-to-position-views-properly-in-layouts/" title="http://thinkandroid.wordpress.com/2010/01/14/how-to-position-views-properly-in-layouts/">這邊有gravity跟layout_gravity的說明</a></p>

<h4>Configuration Changes</h4>

<p>當瑩幕直立轉換成橫放或橫放轉換成直立時，會引發Configuration
Change，如果有特別指定直立或橫放專用的layout時，android會以專用的layout。
直立(portrait)或橫放(landscape)有專用的layout目錄，這三個目錄的檔案名稱可以重覆，它們只會產生一個共用的layout
id( R.layout.main_layout)。</p>

<p><code>
\res\layout\main_layout.xml
\res\layout-port\main_layout.xml
\res\layout-land\main_layout.xml
</code></p>

<p>或者更多的變化型式</p>

<p><code>
\res\layout\main_layout.xml
\res\layout-port\main_layout.xml
\res\layout-en\main_layout.xml
</code></p>

<p>上面的叫port,en,land叫<a href="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" title="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">configuration
qualifiers</a>，許多組合可以參閱<a href="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" title="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">官方文件</a></p>

<h2>RelativeLayout</h2>

<p>RelativeLayout字面上的意思是相對的layout，相關是指某一元件，與父元件或子元件的相對的關係。</p>

<h5>與父元件相對關係</h5>

<p>與父元件相對關係用boolean(true|false)值決定</p>

<ol>
<li>layout_alignParentTop 子元件的上緣是否對齊容器(父元件)的上緣</li>
<li>layout_alignParentBottom 子元件的下緣是否對齊容器(父元件)的下緣</li>
<li>layout_alignParentLeft 子元件的左邊緣是否對齊容器(父元件)的左邊緣</li>
<li>layout_alignParentRight 子元件的右邊緣是否對齊容器(父元件)的右邊緣</li>
<li>layout_centerHrizontal 子元件是否水平置中於容器(父元件)</li>
<li>layout_centerVertical 子元件是否垂值置中於容器(父元件)</li>
<li>layout_centerInparent 子元件是否完全置中(水平 + 垂值)於容器(父元件)</li>
<li>layout_alignWithParentIfMissing
如果相對的子元件不存在時，以父元件為參考</li>
</ol>


<h5>與容器(Container)內其他子元件相對關係</h5>

<p>因為是其它子元件相對應的關係，所以以下的屬性需要指定是要與那一個子元件關聯(父元件只有一個，所以上面的屬性只需要指定true或false)</p>

<ol>
<li>layout_above 在指定元件的上方</li>
<li>layout_below 在指定元件的下方</li>
<li>layout_toLeftOf 在指定元件的左方</li>
<li>layout_toRightOf 在指定元件的右方</li>
<li>layout_alignTop 元件上緣與指定元件的上緣對齊</li>
<li>layout_alignBottom 元件下緣與指定元件的下緣對齊</li>
<li>layout_alignLeft 元件左邊緣與指定元件的左邊緣對齊</li>
<li>layout_alignRight 元件右邊緣與指定元件的右邊緣對齊</li>
</ol>


<p>詳請可參閱<a href="http://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html" title="http://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html">RelativeLayout.LayoutParams
API</a></p>

<h5>用程式設定RelativeLayout的LayoutParams</h5>

<p><code>
RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,   LayoutParams.WRAP_CONTENT);
params.addRule(RelativeLayout.ALIGN_PARENT_TOP);
params.addRule(RelativeLayout.ABOVE, R.id.dictionary);
</code></p>

<h1>進階的layout</h1>

<p>當layout過於複雜時，可以用以下三種方式解決</p>

<ol>
<li><a href="http://developer.android.com/resources/articles/layout-tricks-merge.html" title="http://developer.android.com/resources/articles/layout-tricks-merge.html">&lt;include></a>
tag</li>
<li><a href="http://developer.android.com/resources/articles/layout-tricks-stubs.html" title="http://developer.android.com/resources/articles/layout-tricks-stubs.html">&lt;ViewStub></a>
tag</li>
<li><a href="http://developer.android.com/guide/topics/ui/custom-components.html" title="http://developer.android.com/guide/topics/ui/custom-components.html">Custom
Components</a></li>
</ol>


<h1>Resources</h1>

<ul>
<li><a href="http://developer.android.com/guide/topics/ui/layout-objects.html" title="http://developer.android.com/guide/topics/ui/layout-objects.html">Layout Objects in Android
Dev</a></li>
</ul>


<p>^<a href="#fnt__1">1)</a>^ 這個跟java swing一樣，如果有寫過java
swing，應該很熟悉這種使用方式</p>
]]></content>
  </entry>
  
</feed>
