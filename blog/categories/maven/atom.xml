<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-08-30T16:29:07+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven Resources]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/12/07/resource/"/>
    <updated>2012-12-07T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/12/07/resource</id>
    <content type="html"><![CDATA[<p>maven的command是有次序性的 ex:
<code>mvn clean install source:jar javadoc:jar</code>
只會產生source.jar跟javadoc.jar在target目錄下，但是
<code>mvn clean source:jar javadoc:jar install</code>
就會產生source.jar跟javadoc.jar並安裝到local的repository，
善用這個特性可以加快building的速度</p>

<h3>m2eclipse</h3>

<p>使用m2eclipse時如果過到maven
console出現求要使用jdk不要使用jre的訊息時，可以透過以-vm指定vm</p>

<p>```
....</p>

<p>-install
C:\Users\Kent\AppData\Local\Genuitec\Profiles\Bellwin_3.6</p>

<h1>用這一行指定eclipse使用的vm是jdk版本而不是jre版本後，就正常了</h1>

<p>-vm
C:\Program Files\Java\jdk1.6.0_25\bin\javaw.exe
-configuration
C:\Users\Kent\AppData\Local\Genuitec\Profiles\Bellwin_3.6\configuration
-vmargs
-Xms250m
-Xmx768m
```</p>

<h3>download source &amp; javadoc</h3>

<p><code>
mvn dependency:sources
mvn dependency:resolve -Dclassifier=javadoc
</code></p>

<h3>版本檢查，java source下載</h3>

<p><code>
versions:display-dependency-updates versions:display-plugin-updates versions:display-property-updates   dependency:sources dependency:resolve -Dclassifier=javadoc
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Version Plugin]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/version_plugin/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/version_plugin</id>
    <content type="html"><![CDATA[<p><a href="http://mojo.codehaus.org/versions-maven-plugin/index.html" title="http://mojo.codehaus.org/versions-maven-plugin/index.html">Version Plugin Home</a></p>

<p>檢查maven plugins是否有新版本</p>

<p><code>
mvn versions:display-plugin-updates
</code></p>

<p>檢查專案所需的libs(dependencies)是否有新版本</p>

<p><code>
mvn versions:display-dependency-updates
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sonar 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/sonar_101/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/sonar_101</id>
    <content type="html"><![CDATA[<h1>如何看懂 Sonar 報表</h1>

<p>Sonar主要還是透過maven的一些plugins像
<a href="http://maven.apache.org/plugins/maven-pmd-plugin/" title="http://maven.apache.org/plugins/maven-pmd-plugin/">PMD</a>,
<a href="http://maven.apache.org/plugins/maven-pmd-plugin/" title="http://maven.apache.org/plugins/maven-pmd-plugin/">CPD</a>,
<a href="http://mojo.codehaus.org/findbugs-maven-plugin/" title="http://mojo.codehaus.org/findbugs-maven-plugin/">findbugs</a>,
<a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/" title="http://maven.apache.org/plugins/maven-checkstyle-plugin/">checkstyle</a>,
<a href="http://mojo.codehaus.org/cobertura-maven-plugin/" title="http://mojo.codehaus.org/cobertura-maven-plugin/">cobertura(coverage)</a>,
<a href="http://mojo.codehaus.org/javancss-maven-plugin/" title="http://mojo.codehaus.org/javancss-maven-plugin/">JavaNCSS</a>,…
來對java程式碼做靜態分析(static
analysis),然後用比較美觀的方式呈現將各種報表整合在一起。想要看懂Sonar的分析結果，就得先了解它做了那些方面的分析。
所有相關分析的術語跟分析方式的概要說明在<a href="http://docs.codehaus.org/display/SONAR/Metric+definitions" title="http://docs.codehaus.org/display/SONAR/Metric+definitions">這裡</a>。</p>

<h2>Dashboard</h2>

<p>Dashboard看的是統計跟平均值，真正有用的資訊，應該是drilldown進去看到細節會比較有用</p>

<p>Dashboard中常會看到向上或向下的三角型，通常會有灰、紅、綠三色，那個叫<a href="http://docs.codehaus.org/display/SONAR/Tendencies" title="http://docs.codehaus.org/display/SONAR/Tendencies">Tendency</a>，是指跟前一次build出來的results比較的結果.</p>

<h3>Rules Compliance</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_001.png" alt="sonar_101_001.png" /></p>

<p>左邊的圖是程式五項能力指標</p>

<ol>
<li>Usa. Usability 可用性</li>
<li>Eff. Efficiency 效率</li>
<li>Mai. Maintainabilitiy 維護性</li>
<li>Por. Portability 可攜性</li>
<li>Rel. Reliability 可靠性</li>
</ol>


<p>愈高愈好，最好能五個指標都是 100%</p>

<p>右邊的Voilations是程式經過checkstyle, PDM,
findbugs,….這些rule檢查後的不通過數量，嚴重性依上而下為</p>

<ul>
<li>Blocker 阻塞</li>
<li>Critical 嚴重</li>
<li>Major 主要</li>
<li>Minor 次要</li>
<li>Info 資訊</li>
</ul>


<p>檢查不通過的數量當然是愈少愈好，理想值是都為0</p>

<p>建議盡可能的把所有的check rules打開，然後再把不適用的rule做調整或停用</p>

<h3>Code coverage</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_002.png" alt="sonar_101_002.png" /></p>

<p>程式的單元測試覆蓋率</p>

<ul>
<li>line converage 行覆蓋率 : 100行程式碼，有95被測到，就算95%</li>
<li>branch coverage 分支覆蓋率 : if - elseif - else
如果只測到if內的code就只有33%，若測到 if - elseif 就是66%，if -
elseif - else全測到就是100%</li>
<li>tests test class數量</li>
<li>skipped 略過沒測的數量</li>
</ul>


<p>另外常見的還有</p>

<ul>
<li>class converage : 類別覆蓋率</li>
<li>method converage : 方法覆蓋率</li>
</ul>


<p>覆蓋率愈高愈好，100%為理想值，但通常，粒度(Grain)的單位愈小，愈難達到100%，粒度的大小由上至下為，類別
> 方法 > 分支 >　行 一般來說，建議值為：</p>

<ul>
<li>class converage 100%</li>
<li>method converage 100%</li>
<li>branch coverage
採用<a href="http://en.wikipedia.org/wiki/Test-driven_development" title="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>的號稱可以達到95%,
但個人建議值在 70% 以上</li>
<li>line coverage
採用<a href="http://en.wikipedia.org/wiki/Test-driven_development" title="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>的號稱可以達到95%,
, 但個人建議值在 80% 以上</li>
</ul>


<p>覆蓋率比較有爭議性， 覆蓋率 !=
品質，但基本上把不需要測試的settor,gettor去掉後，保持line
coverage在75%以上，應該不難。</p>

<h3>Complexity</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_003.png" alt="sonar_101_003.png" /></p>

<p>程式的複雜度，採用<a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity" title="http://en.wikipedia.org/wiki/Cyclomatic_complexity">McCabe</a>的計算方式</p>

<p>左邊是平均值，右邊的chart圖是統計值，統計有兩個view，可以從class的角度或從method的角度(建議)來看</p>

<p>x軸是複雜度，y軸是數量， 在本例中：</p>

<ul>
<li>複雜度為1的method約有600個</li>
<li>複雜度為2的method約有180個</li>
<li>複雜度為4的method約有100個</li>
<li>…</li>
</ul>


<p>以method為計算單位的建議值</p>

<p>  Cyclomatic Complexity   Risk Evaluation                            中文解釋</p>

<hr />

<p>  1 to 10                 a simple program, without very much risk   method夠簡單，風險低
  11 to 20                a more complex program, moderate risk      method有點複雜，有點風險
  21 to 50                a complex, high risk program               method很複雜，高風險
  > 50                   an un-testable program (very high risk)    只有上帝跟原開發者才懂的method(也許過個月後，只有剩上帝懂)</p>

<h3>Chidamber &amp; Kemerer</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_004.png" alt="sonar_101_004.png" /></p>

<p>左邊的chart圖是LCOM4(Lack of cohesion of methods)，右邊是RFC(Response
for class)
LCOM4是用來判別類別是否具有太多的責任的指標，一般來說，類別設計應該符合<a href="http://wiki.kent-chiu.com/doku.php?id=prog:ood_5_principles#srp" title="prog:ood_5_principles">單一責任原則</a>,如果一個類別之中的methods，並沒有共同的參數或是公用的field，那表示此類別可能可以進行切割。</p>

<p><a href="http://www.sonarsource.org/clean-up-design-at-class-level-with-sonar/" title="http://www.sonarsource.org/clean-up-design-at-class-level-with-sonar/">LCOM4的說明文章</a>
LCOM4的chart圖x軸是LCOM4的值，y軸是class的數量</p>

<ul>
<li>LCOM4 = 1 好的類別，表示類別只有一個責任</li>
<li>LCOM4 >= 2 可能需進行切割的類別，數字表示可以切割的數量</li>
<li>LCOM4 = 0 空類別</li>
</ul>


<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_008.png" alt="sonar_101_008.png" /></p>

<p>上圖中，LCOM4=3，每一個區域表示可以被獨立切割的部份</p>

<p>RFC的chart圖x軸是RFC的值，y軸是class的數量，RFC的值愈小愈好，</p>

<ul>
<li>0\~50 建議值</li>
<li>> 50 表示該類別太過複雜</li>
</ul>


<p>這個chart圖，通常會搭配<a href="http://docs.codehaus.org/display/SONAR/Dependency+Structure+Matrix" title="http://docs.codehaus.org/display/SONAR/Dependency+Structure+Matrix">Dependency Structure Matrix
(DSM)</a></p>

<h3>Comments &amp; Duplications</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_005.png" alt="sonar_101_005.png" /></p>

<p>左邊是程式註解的數量，右邊是程式重覆(copy &amp; paste code)的數量</p>

<h3>Package design</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_006.png" alt="sonar_101_006.png" /></p>

<p>左邊的Package tangle index是指package糾纏指標，右邊的Dependencies to
cut是指有多少個packages需要做依賴性切割</p>

<p>Package tangle index的值愈小愈好</p>

<ul>
<li>0% 最佳值</li>
<li>100% 最差值</li>
</ul>


<p>Dependencies to cut的值愈小愈好，理想值為0</p>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_009.jpg" alt="sonar_101_009.jpg" /></p>

<p>只要圖中消除紅底白色的部份，就可以有效降低Package tangle index</p>

<h3>Size metrics</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/sonar_101_007.png" alt="sonar_101_007.png" /></p>

<p>左邊的Lines of code(loc)是程式數量的統計，右邊的classes是類別內容的統計</p>

<h2>Resource Viewer</h2>

<p>TBD</p>

<h1>Resources</h1>

<ul>
<li><a href="http://www.sonarsource.org/" title="http://www.sonarsource.org/">官方網站</a></li>
<li><a href="http://docs.codehaus.org/display/SONAR/Use+Sonar" title="http://docs.codehaus.org/display/SONAR/Use+Sonar">官方文件</a></li>
<li><a href="http://docs.codehaus.org/display/SONAR/Metric+definitions" title="http://docs.codehaus.org/display/SONAR/Metric+definitions">評估指標的定義</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FindBugs Plugin Configuration]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/findbugs/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/findbugs</id>
    <content type="html"><![CDATA[<p>If findbugs is too strict to you, you might want to bypass some checking
rules. Here is the way.</p>

<p>We need tell findbugs plugin uses our configuration rather default.</p>

<p>```</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;debug&gt;true&lt;/debug&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>```</p>

<p>run</p>

<p><code>
mvn findbugs:findbugs
</code></p>

<p>then, we got a report like this.</p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;BugCollection version='1.3.9' threshold='medium' effort='min'&gt;
    &lt;file classname='com.bellwin.idcview.Jqgrid%24Cell'&gt;
        &lt;BugInstance type='URF_UNREAD_FIELD' priority='Normal' category='PERFORMANCE'
          message='Unread field: com.bellwin.idcview.Jqgrid$Cell.cell' lineNumber='16' /&gt;
    &lt;/file&gt;
    &lt;file classname='com.bellwin.idcview.device.servlet.DeviceServlet'&gt;
        &lt;BugInstance type='SE_BAD_FIELD' priority='Normal' category='BAD_PRACTICE'
          message='Class com.bellwin.idcview.device.servlet.DeviceServlet defines non-transient non-serializable instance field deviceService'
          lineNumber='-1' /&gt;
    &lt;/file&gt;
    &lt;Error&gt;&lt;/Error&gt;
    &lt;Project&gt;
        &lt;SrcDir&gt;D:\dev\workspaces\bellwin\web\src\main\java&lt;/SrcDir&gt;
    &lt;/Project&gt;
&lt;/BugCollection&gt;
</code></pre>

<p>```</p>

<p>The above report was output by findbugs. There are two rules not pass</p>

<ol>
<li>URF_UNREAD_FIELD in PERFORMANCE category</li>
<li>SE_BAD_FIELD in BAD_PRACTICE category</li>
</ol>


<p>If we want don't want to check the rule <strong>URF_UNREAD_FIELD</strong>, we need
check
<a href="http://findbugs.googlecode.com/svn/trunk/findbugs/etc/findbugs.xml" title="http://findbugs.googlecode.com/svn/trunk/findbugs/etc/findbugs.xml">findbugs.xml</a>
setting file.</p>

<p>```</p>

<pre><code>  &lt;Detector class="edu.umd.cs.findbugs.detect.UnreadFields" 
            speed="fast"
            reports="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,NP_UNWRITTEN_FIELD,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,UWF_NULL_FIELD,UWF_UNWRITTEN_FIELD,SS_SHOULD_BE_STATIC,UUF_UNUSED_FIELD,URF_UNREAD_FIELD,SIC_INNER_SHOULD_BE_STATIC,SIC_INNER_SHOULD_BE_STATIC_ANON,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,SIC_THREADLOCAL_DEADLY_EMBRACE" /&gt;
</code></pre>

<p>```</p>

<p>The URF_UNREAD_FIELD rule is implemented by <code>UnreadFields</code> class. We
put UnreadFields to <code>&lt;omitVisitors&gt;</code> tag of plugin's configuration. This
forece Findbugs omit the <code>URF_UNREAD_FIELD</code> rule.</p>

<p>```</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;omitVisitors&gt;UnreadFields&lt;/omitVisitors&gt;
        &lt;!--
           Uses comma-delimited to apply more rules
           &lt;omitVisitors&gt;FindDeadLocalStores,UnreadFields&lt;/omitVisitors&gt;
        --&gt;
        &lt;debug&gt;true&lt;/debug&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Maven Artifacts to Nexus Server]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/deploy_to_nexus/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/deploy_to_nexus</id>
    <content type="html"><![CDATA[<p>maven的deploy指令可以直接將artifact deploy到nexus server</p>

<h3>pom.xml的設定</h3>

<p><a href="http://host:8080/nexus">http://host:8080/nexus</a>是可以連到nexus server的url
<code>&lt;id&gt;nexus&lt;/id&gt;</code>是辨識用的repository id,必須跟下面的settings.xml一致</p>

<p>```
<distributionManagement></p>

<pre><code>&lt;!-- use the following if you're not using a snapshot version. --&gt;
&lt;repository&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;name&gt;Internal Releases&lt;/name&gt;
    &lt;url&gt;http://host:8080/nexus/content/repositories/releases&lt;/url&gt;
&lt;/repository&gt;
&lt;!-- use the following if you ARE using a snapshot version. --&gt;
&lt;snapshotRepository&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;name&gt;Internal Releases&lt;/name&gt;
    &lt;url&gt;http://host:8080/nexus/content/repositories/snapshots&lt;/url&gt;
&lt;/snapshotRepository&gt;
</code></pre>

<p></distributionManagement>
```</p>

<h3>user_home/.m2/settings.xml設定</h3>

<p><code>&lt;id&gt;nexus&lt;/id&gt;</code>是辨識用的repository id,必須跟上面的pom.xml中的一致</p>

<p>```
<servers></p>

<pre><code>&lt;server&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;username&gt;username&lt;/username&gt;
    &lt;password&gt;password&lt;/password&gt;
&lt;/server&gt;
&lt;server&gt;
    &lt;id&gt;thirdparty&lt;/id&gt;
    &lt;username&gt;username&lt;/username&gt;
    &lt;password&gt;password&lt;/password&gt;
&lt;/server&gt;
</code></pre>

<p></servers>
```</p>

<h3>deploy</h3>

<p>執行以下的指令即可進行deploy</p>

<p><code>
mvn deploy
</code></p>

<p>如果執行時遇到 401 的error code，表示帳號或密碼有誤</p>
]]></content>
  </entry>
  
</feed>
