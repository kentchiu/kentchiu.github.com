<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jasterreport | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/jasterreport/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-23T12:27:33+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jesper Report, IReport 匯出成中文PDF]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/12/jesper-report-font-issue/"/>
    <updated>2013-05-12T12:22:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/12/jesper-report-font-issue</id>
    <content type="html"><![CDATA[<p>jasper report 匯出成 PDF 時， 中文字會無法正常匯出， 需做額外的處理，才能正確的輸出中文。
中文會有問題主要的原因是缺少中文字體的關係，所以只要滿足了這個條件， PDF 就能顯示中文。</p>

<p>以下步驟為設定 iReport Designer (5.x) 中文字型的方式</p>

<h4>工具 ﹣> 選項</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-000.png" alt="2013-05-12-jesper-report-font-issue-000.png" /></p>

<h4>安裝字型</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-001.png" alt="2013-05-12-jesper-report-font-issue-001.png" /></p>

<p>字形檔為 true type (.ttf)格式，本範例是繁體中文的標楷體 (kaiu.ttf)</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-002.png" alt="2013-05-12-jesper-report-font-issue-002.png" /></p>

<blockquote><p>可以在windows的字型檔目錄下取得字型檔，但我在測試時無法直接在windows/font的目錄選得字型檔，
須把字型檔copy到其他目錄時，iReport 的 <em>Select True Type Font</em> dialog 才看得到字型檔。</p></blockquote>

<h4>設定字型檔的細節</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-005.png" alt="2013-05-12-jesper-report-font-issue-005.png" /></p>

<p>選進來後的Family Name(字型檔名) 預設是 "標楷體"，我把它改名成 <em>kaiu</em> (這麼做的原因只是不想讓設定檔出現一堆中文字型名稱，當然，
你也可以保持預設的名稱 "標楷體")，PDF details的設定要特別注意，
PDF ENcodeing要設成 <em>Identity-H (Unicode with horizontal writer)</em>, 然後 <em>Enbed this font in PDF document</em>要勾選</p>

<p>到這邊，基本上就算設定好了，之後就是要在範本檔 (jrxml) 裡指定中文字時，要使用剛設定出來的這個字型即可</p>

<h4>在範本檔設定使用中文字型</h4>

<p>文字內容的<code>font name</code>要設定為剛剛新安裝的字型檔名稱</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-007.png" alt="2013-05-12-jesper-report-font-issue-007.png" /></p>

<p>做preivew後就會產出 pdf 檔，裡面的中文就會正常顯示了</p>

<h3>用程式匯出成pdf檔時中文的問題</h3>

<p>上述的步驟，只是讓iReport Designer可以正確的匯出有中文字的 pdf，但如果是要用程式做 pdf 匯出的動作，需要把字型檔 export 成 jar 格式的 extension ，
並丟到 class path 底下，用程式做匯出時，中文字才會正常的顯示。</p>

<p>匯出的功能是在原來安裝字型檔的功能畫面上，裡面有一個 <code>Export as extension</code> 的按鍵，執行後設定 export 的副檔名為 <em>.jar</em> 即可，ex : kaiu.jar</p>

<p>匯出後，將該 jar 檔丟到 class path下即可；如果執行匯出時，發生字型檔找不到的異常，應該是字型檔的 jar 檔沒正確的放在 class path 下</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-006.png" alt="2013-05-12-jesper-report-font-issue-006.png" /></p>

<h6>jrxml 範本定義檔 hello.jrxml</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="myreport"&gt;

 &lt;detail&gt;
    &lt;band height="20"&gt;
      &lt;staticText&gt;
        &lt;reportElement x="180" y="0" width="200" height="20"/&gt;
        &lt;textElement&gt;
            &lt;font fontName="kaiu" isPdfEmbedded="true"/&gt;
        &lt;/textElement&gt;
        &lt;text&gt;&lt;![CDATA[Hello!!! World! 中文字測試]]&gt;&lt;/text&gt;
      &lt;/staticText&gt;
    &lt;/band&gt;
  &lt;/detail&gt;
&lt;/jasperReport&gt;
</code></pre>

<p><code>&lt;font fontName="kaiu" isPdfEmbedded="true"/&gt;</code> : fontName 必須設定安裝時設定的名稱</p>

<h6>測試程式</h6>

<pre><code>@Test
public void exportToPDF_statics_text_only() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/hello.jrxml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), new JREmptyDataSource());
        String output = input.getParent() + "/hello1.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>執行 test case後，可以看 output 的目錄看到匯出的 PDF 檔中文是否有正常顯示</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JasperReport 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/12/jasperreport-101/"/>
    <updated>2013-05-12T00:49:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/12/jasperreport-101</id>
    <content type="html"><![CDATA[<h4>jrxml  report定義檔</h4>

<p>Jasper Report 是由副檔名為 <code>jrxml</code> 的 xml 檔進行報表範本定義，範本檔的主結構可被切割成數個區，每一區有專屬的tag，每個 tag 有各自專屬的位置及功能，
每個 tag 都不是必要的，可以視需求選用，以下列出 Jasper Report 主結構會用到的 tag</p>

<ol>
<li><code>&lt;title&gt;</code>            - 主標題，只會出現一次</li>
<li><code>&lt;pageHeader&gt;</code>       - 頁首標題，每頁頁首都會出現</li>
<li><code>&lt;columnHeader&gt;</code>     - <code>&lt;detail&gt;</code> 的 header，會出現在每個detail區前面</li>
<li><code>&lt;detail&gt;</code>           - 內容區，會重覆的出現，一個 detail 對應到 data source 的一個資料列</li>
<li><code>&lt;columnFooter&gt;</code>     - <code>&lt;detail&gt;</code> 的 footer，會出現在每個detail區後面(可設定只出現在最後的detail區)</li>
<li><code>&lt;pageFooter&gt;</code>       - 頁尾區，每頁頁尾都會出現，通常來放置頁碼 (可設定只出現在最後一頁)</li>
<li><code>&lt;summary&gt;</code>          - 總結區，在報表的最後面，只會出現一次</li>
<li><code>&lt;background&gt;</code>       - 設定背景圖片</li>
</ol>


<p>上面的tag，都需要包含 <code>&lt;band&gt;</code> ，才能再放入報表元素(Report Element）</p>

<p>另外還有 <code>group</code> tag用來做可用來群組化，每個 group tag 下可有自已的 header 跟 footer</p>

<p>每一區的位置如下圖所示</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-001.png" alt="2013-05-12-jasperreport-101-001.png" /></p>

<p>比較完整的主結構是像這樣</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-002.png" alt="2013-05-12-jasperreport-101-002.png" /></p>

<p>上面有提到，每一區必須要定義一個唯一的 <code>&lt;band&gt;</code> 後，才能放入其他的報表元件 (Report Element), 報表元件有這些 :</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-003.png" alt="2013-05-12-jasperreport-101-003.png" /></p>

<h4>Jasper Report 版的 HELLO WORLD</h4>

<p>以下的 hello word 範例，我們不用 designer, 改用全手工的方式打造出最簡單的報表定義檔，定義檔內只有 detail 區， detail 區裡顯示靜態的文字 'Hello World'</p>

<blockquote><p>用 designer 產生的定義檔，會多很多 tags，每個 tag 也會多很多屬性，用手工打造比較乾淨，也比較容易理解</p></blockquote>

<h6>xml helloworld.jrxml 定義檔</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="myreport"&gt;
 &lt;detail&gt;
    &lt;band height="20"&gt;
      &lt;staticText&gt;
        &lt;reportElement x="180" y="0" width="200" height="20"/&gt;
        &lt;text&gt;&lt;![CDATA[Hello World!]]&gt;&lt;/text&gt;
      &lt;/staticText&gt;
    &lt;/band&gt;
  &lt;/detail&gt;
&lt;/jasperReport&gt;
</code></pre>

<p>我們只用了 detail section, 上面有提到 section 內必須要有 <code>&lt;band&gt;</code> tag才能放置其他的 Report Element, 我們這邊用到的 Report Element 為
<code>&lt;staticText&gt;</code> 用途為顯示靜態文字， <code>&lt;staticText&gt;</code> 使用 <code>&lt;reportElement&gt;</code> 做基本屬性設定，然後用 <code>&lt;text&gt;</code> 設定文字內容</p>

<h6>java junit test case for export pdf</h6>

<pre><code>@Test
public void exportToPDF_statics_text_only() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/helloworld.jrxml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), new JREmptyDataSource());
        String output = input.getParent() + "/hello1.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p><code>JasperFillManager.fillReport()</code> 需要三個參數,</p>

<ol>
<li>jasperReport
jrxml complied 後的 binary file</li>
<li>paramaters
控制報表的參數設定值</li>
<li>datasource 為 <code>JRDataSource</code> 的 subclass</li>
</ol>


<h6>java JasperFillManager.fill() 的 source code</h6>

<p><code>JasperFillManager.fill()</code> 的 source code 如下</p>

<pre><code>/**
 * Fills the compiled report design supplied as the first parameter and returns
 * the generated report object.
 * 
 * @param jasperReport compiled report design object to use for filling
 * @param parameters   report parameters map
 * @param dataSource   data source object
 * @return generated report object
 */
public JasperPrint fill(
    JasperReport jasperReport, 
    Map&lt;String,Object&gt; parameters, 
    JRDataSource dataSource
    ) throws JRException
{
    return JRFiller.fill(jasperReportsContext, jasperReport, parameters, dataSource);
}
</code></pre>

<p>JRDataSource 的 subclass 如下圖，我們這個範例，因為只是單純的顯示靜態文字，不需要任何的資料，所以使用 <code>JREmptyDataSource</code> 即可</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-004.png" alt="2013-05-12-jasperreport-101-004.png" /></p>

<h4>JRMapCollectionDataSource</h4>

<p>這個範例改用 java collection 當作 data source</p>

<h6>helloword_collection.xml</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd"
    name="myreport"&gt;
    &lt;field name="USER_NAME" class="java.lang.String" /&gt;

    &lt;detail&gt;
        &lt;band height="30"&gt;
            &lt;staticText&gt;
                &lt;reportElement x="10" y="0" width="100" height="20" /&gt;
                &lt;text&gt;&lt;![CDATA[Hello!]]&gt;&lt;/text&gt;
            &lt;/staticText&gt;
            &lt;textField&gt;
                &lt;reportElement x="80" y="0" width="100" height="20" /&gt;
                &lt;textFieldExpression&gt;&lt;![CDATA[$F{USER_NAME}]]&gt;&lt;/textFieldExpression&gt;
            &lt;/textField&gt;
        &lt;/band&gt;
    &lt;/detail&gt;

&lt;/jasperReport&gt;
</code></pre>

<p>範本定義檔裡用了兩個 report element</p>

<ol>
<li><code>&lt;staticText&gt;</code> : 用來顯示靜態文字</li>
<li><code>&lt;textField&gt;</code>  : 文字欄位，裡面的 <code>&lt;textFieldExpression&gt;</code> 可以用使用 Jasper Report 的 Expression
$F{USER_NAME} 為Jasper Report 的 Expression，是變數名稱的 placeholder，在匯出後，
placeholder 會被 data source 裡對應的值所取代，有幾個資料列就會重覆幾次</li>
</ol>


<h6>java 匯出 PDF 的 test case</h6>

<pre><code>@Test
public void exportToPDF_data_from_collection() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/helloword_collection.xml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());

        Collection&lt;Map&lt;String, ?&gt;&gt; col = Lists.newArrayList();
        col.add(ImmutableMap.&lt;String, Object&gt;of("USER_NAME", "Kent"));
        col.add(ImmutableMap.&lt;String, Object&gt;of("USER_NAME", "Cindy"));
        JRMapCollectionDataSource ds = new JRMapCollectionDataSource(col );
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), ds);
        String output = input.getParent() + "/hello1_collection.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<ul>
<li>這個範例改用 java collection 來當作資料源，所以要用 <code>JRMapCollectionDataSource</code></li>
<li>10 ~ 12 行 放了兩個單位的資料('Kent' &amp; 'Cindy') 進去 data source， 所以，在輸出時，會看到這兩組資料會被套用到 detail section</li>
</ul>


<p>輸出的PDF結果如下</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-005.png" alt="2013-05-12-jasperreport-101-005.png" /></p>
]]></content>
  </entry>
  
</feed>
