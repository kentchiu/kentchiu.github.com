<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kohana | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/kohana/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-08-30T16:40:09+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kohana 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/kohana_101/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/kohana_101</id>
    <content type="html"><![CDATA[<p>DISCLAIMER: most materials is get from web, I just resort it for study
purpose, you can find the source where this article from in resource
section.</p>

<h1>Basic Rules and Concepts</h1>

<ol>
<li>Fat models, skinny controllers!</li>
<li>Keep as much business logic in the model as possible.</li>
<li>If you see your controller getting “fat”, consider offloading some
of the logic to the relevant model (or else bad things will start
happening!).</li>
<li>Models should not talk to the views directly (and vice versa).</li>
<li>Related models provide information to the controller via their
association (relation).</li>
<li>It’s quite alright for the views to contain some logic, which deals
with the view or presentation.</li>
</ol>


<h1>Debugging</h1>

<ul>
<li><a href="#configuration" title="kohana:kohana_101 ↵">Configuration</a></li>
<li><a href="#kohanadebug" title="kohana:kohana_101 ↵">Kohana::debug()</a></li>
<li><a href="#profiler" title="kohana:kohana_101 ↵">Profiler</a></li>
<li><a href="#log_file" title="kohana:kohana_101 ↵">Log File</a></li>
<li><a href="#sql_query_logging" title="kohana:kohana_101 ↵">SQL Query Logging</a></li>
</ul>


<h1>Name Convention</h1>

<p>```
Class                       File</p>

<p>Controller_Template         classes/controller/template.php
Model_User                  classes/model/user.php
Model_Auth_User             classes/model/auth/user.php
Auth                        classes/auth.php
```</p>

<h4>Configuration</h4>

<ul>
<li>set <code>$config['display_errors'] = TRUE;</code> to enable error messages
showing in page. It can also check error messages in log file. Check
your settings in <code>config/log.php</code> to be sure.</li>
<li>set your <code>$config['threshold'] = 1;</code>. This sets log threshold to a
suitable level for production. Higher threshold levels will log less
critical notices and information, but can slow down your
application.</li>
</ul>


<h4>Kohana::debug()</h4>

<h4>Profiler</h4>

<p><a href="http://docs.kohanaphp.com/libraries/profiler" title="http://docs.kohanaphp.com/libraries/profiler">http://docs.kohanaphp.com/libraries/profiler</a></p>

<h4>Log File</h4>

<h4>SQL Query Logging</h4>

<p><a href="http://www.howtogeek.com/howto/database/monitor-all-sql-queries-in-mysql/" title="http://www.howtogeek.com/howto/database/monitor-all-sql-queries-in-mysql/">http://www.howtogeek.com/howto/database/monitor-all-sql-queries-in-mysql/</a></p>

<h1>Page Flow</h1>

<p>Every application follows the same flow:</p>

<ol>
<li>Application starts from index.php</li>
<li>Includes APPPATH/bootstrap.php</li>
<li><p>Request::instance called to process the request</p>

<ol>
<li>Checks each route until a match is found</li>
<li>Loads controller and passes the request to it</li>
<li>Calls the Controller::before method</li>
<li>Calls the controller action</li>
<li>Calls the Controller::after method</li>
</ol>
</li>
<li><p>Displays the Request response</p></li>
</ol>


<p>Sequence Diagram.(TBD)</p>

<h1>Enable Module</h1>

<p>```</p>

<pre><code>/**
 * Enable modules. Modules are referenced by a relative or absolute path.
 */
Kohana::modules(array(
    // 'auth'       =&gt; MODPATH.'auth',       // Basic authentication
    // 'codebench'  =&gt; MODPATH.'codebench',  // Benchmarking tool
    // 'database'   =&gt; MODPATH.'database',   // Database access
    // 'image'      =&gt; MODPATH.'image',      // Image manipulation
    // 'orm'        =&gt; MODPATH.'orm',        // Object Relationship Mapping
    // 'pagination' =&gt; MODPATH.'pagination', // Paging of results
    // 'userguide'  =&gt; MODPATH.'userguide',  // User guide and API documentation
    ));
</code></pre>

<p>```</p>

<h1>URI</h1>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/kohana101_01.png" alt="kohana101_01.png" /></p>

<ul>
<li>http://localhost/kohana : No segments, so a default controller is
used.</li>
<li>http://localhost/kohana/index.php : Still no segments, so same as
before.</li>
<li>http://localhost/kohana/index.php/welcome : Only one segment, which
is segment 1. This corresponds to a controller called “Welcome”</li>
<li>http://localhost/kohana/index.php/welcome/search/php : Three
segments given:

<ol>
<li>Segment 1 is “welcome” and corresponds to controller “Welcome”</li>
<li>Segment 2 is “search” and corresponds to method “search()” in
controller “Welcome”</li>
<li>Segment 3 is “php” and corresponds to argument 1 passed to
method “search()” in controller “Welcome”</li>
</ol>
</li>
</ul>


<h1>System Components</h1>

<p>The most important Kohana are Controllers, Libraries, Helpers, Modules,
Models and Views</p>

<ul>
<li>Models: Separate the data access from the logic and presentation.</li>
<li>Views: Simplifies the organization of information for display</li>
<li>Controllers: Are the heart of your application, implementing it's
logic.</li>
<li>Libraries: Provide the functionality that drives your application;
Database access, Sessions, Caching etc.</li>
<li>Helpers: Assist you with common tasks; Formatting HTML, Sending
email, Validating, Creating HTML forms etc.</li>
<li>Modules: Assist in grouping common components or functionality:
Authentication, Handling media etc.</li>
</ul>


<h1>System Layout</h1>

<p>There are three layers to Kohana; Application, Module, System. A very
important concept to understand in Kohana is the cascade. The cascade
refers to where and how Kohana searches for resources. A specific naming
convention and directory layout is enforced. A specific search order is
enforced.</p>

<p>```
------- Search order direction ------->
(1)             --> (2)             --> (3)
application/    -->  modules/       -->  system/</p>

<pre><code>controllers/--&gt;     controllers/--&gt;     controllers/
helpers/    --&gt;     helpers/    --&gt;     helpers/
libraries/  --&gt;     libraries/  --&gt;     libraries/
models/     --&gt;     models/     --&gt;     models/
views/      --&gt;     views/      --&gt;     views/
</code></pre>

<p>```</p>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/kohana101_02.png" alt="kohana101_02.png" /></p>

<h1>Database</h1>

<p>Copy system/config/database.php to application/config/database.php</p>

<p>```</p>

<pre><code>$config['default'] = array
(
    'benchmark'     =&gt; TRUE,
    'persistent'    =&gt; FALSE,
    'connection'    =&gt; array
    (
        'type'      =&gt; 'mysql',
        'user'      =&gt; 'username',       // set to db user name
        'pass'      =&gt; 'password',       // set to db user password
        'host'      =&gt; 'localhost',
        'port'      =&gt; FALSE,
        'socket'    =&gt; FALSE,
        'database'  =&gt; 'db name'     // set to db name
    ),
    'character_set' =&gt; 'utf8',
    'table_prefix'  =&gt; '',
    'object'        =&gt; TRUE,
    'cache'         =&gt; FALSE,
    'escape'        =&gt; TRUE
);
</code></pre>

<p>```</p>

<h2>Five ways to work with relational databases</h2>

<ol>
<li>Write your own SQL using the query() method. You must escape the
query manually.</li>
<li>Write custom SQL that is automatically escaped. Use Query Binding.</li>
<li>Use the Query Builder. It provides methods that generate platform
independent SQL statements that are automatically escaped.</li>
<li>Use a Model. Utilize Query or Query Builder to create your own data
access methods.</li>
<li>Use ORM. Object Relational Mapping is a class that extends the basic
Model, to implement data access without using SQL statements.</li>
</ol>


<h1>Constants</h1>

<ul>
<li>DOCROOT - docroot real path</li>
<li>KOHANA - front controller name (index.php)</li>
<li>APPPATH - application folder real path</li>
<li>MODPATH - module real folder path</li>
<li>SYSPATH - system real folder path</li>
</ul>


<h1>KO3 struct</h1>

<p>```
kohana
  |-
  |-application</p>

<pre><code>|-cache
|-config
|-classess
  |-controller
  |-model
  |-other_libraries.php
|-i18n
|-logs
|-messages
|-vendor
|-views
|-bootstrap.php
</code></pre>

<p>  |-modules
  |-system
  index.php
```</p>

<h1>Resource</h1>

<ul>
<li><a href="http://dev.kohanaphp.com/wiki/kohana2/Kohana101" title="http://dev.kohanaphp.com/wiki/kohana2/Kohana101">Kohana 101 from kohana dev
site</a></li>
<li><a href="http://docs.kohanaphp.com/" title="http://docs.kohanaphp.com/">the kohana
manual</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
