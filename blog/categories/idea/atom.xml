<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IDEA | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/idea/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-08-30T16:30:59+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python type hint in IDEA]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea/"/>
    <updated>2013-12-28T12:09:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea</id>
    <content type="html"><![CDATA[<p>在現代的IDE中，程式碼自動完成(code assist or code complete)幾乎是必備的基本功能，這個功能在靜態功能型別的語言中，IDE通常可以很完全的運作；但是在動態型別的語言中，就常常沒辦法推斷出正確的型別了。
因為有的IDE從另外從程式碼外的其它地方(通常是註解)加入協助IDE做類型推斷(type infer)的動作。</p>

<p>IDEA的python plugin(或 pycharm)也是使用註解的做type hint來協助IDEA做類型推斷。如果是使用python3開發，那麼還可以用<a href="http://www.python.org/dev/peps/pep-3107/">PEP-3107</a>。
<em>PEP-3107</em>在語言的級別上加入了參數跟傳回值的型別，這樣IDE就有辦法做類型的推斷。</p>

<pre><code># 未採用PEP-3107的method宣告方式
def a_method(foo, bar) :
    return foobar;

# 採用PEP-3107的method宣告方式
def a_method(foo : TypeFoo, bar: TypeBar) -&gt; TypeFooBar
</code></pre>

<p>TypeFoo是參數foo的型別，TypeBar是參數bar的型別，而TypeFooBar則是 return value foobar的型別</p>

<p>但是以下幾種狀況是<em>PEP-3107</em>無法處理的:</p>

<ul>
<li>locale variable，如果 locale variable不是某個method的傳回值，那就沒有型別</li>
<li>field ，field也沒有型別</li>
<li>third party的lib，third party的lib寫法可能不是採用<em>PEP-3107</em>方式，所以ide也無法提供code complete</li>
</ul>


<p>計對這些狀況，可以用一開始提到的方式，套用特定的註解來協助IDE做類型推斷。</p>

<pre><code>r = praw.Reddit(user_agent='User-Agent: rbot/1.0 by draculacwg')
''':type: six.Subreddit ''' 
subreddit = r.get_subreddit(subreddits)
submissions = subreddit.get_new()
</code></pre>

<p>原來的<code>subreddit.get_new()</code>，原本沒有code complete，加入<code>''':type: six.Subreddit '''</code> 後，就會有code complete了</p>

<h4>IDEA 建議的type hinting 語法</h4>

<ul>
<li>Foo # Class Foo visible in the current scope</li>
<li>x.y.Bar # Class Bar from x.y module</li>
<li>Foo | Bar # Foo or Bar</li>
<li>(Foo, Bar) # Tuple of Foo and Bar</li>
<li>list[Foo] # List of Foo elements</li>
<li>dict[Foo, Bar] # Dict from Foo to Bar</li>
<li>T # Generic type (T-Z are reserved for generics)</li>
<li>T &lt;= Foo # Generic type with upper bound Foo</li>
<li>Foo[T] # Foo parameterized with T</li>
<li>(Foo, Bar) -> Baz # Function of Foo and Bar that returns Baz</li>
<li>list[dict[str, datetime]] # List of dicts from str to datetime (nested arguments)</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html">http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html</a> - pycharm 或 IDEA python plugin中 type hint的方式</li>
<li><a href="http://www.python.org/dev/peps/pep-0257/">http://www.python.org/dev/peps/pep-0257/</a> - PEP 257  : Docstring Conventions</li>
<li><a href="http://www.python.org/dev/peps/pep-3107/">http://www.python.org/dev/peps/pep-3107/</a> - PEP 3107 : python 3 中可用的類型註解</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My IntelliJ IDEA Shortcut]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/17/my-intellij-idea-shortcut/"/>
    <updated>2013-05-17T11:03:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/17/my-intellij-idea-shortcut</id>
    <content type="html"><![CDATA[<p>Intellij IDEA Mac版的 KeyMap 有兩個版本，這邊的是 Mac 專用版的版本 (Mac OS X 10.5+)</p>

<h2>符號說明</h2>

<ul>
<li>⌘ : cmd key</li>
<li>⌥ : option / alt key</li>
<li>⌃ : ctrl key</li>
<li>⇧ : shift key</li>
<li>⇥ : tab</li>
<li>⏎ : enter key</li>
<li>⌦ : delete (mac pro 上是 fn + backspace)</li>
<li>⌫ : backspace</li>
<li>⌙ : space</li>
<li>⎋ : esc</li>
<li>⇠⇡⇣⇢ : 方向鍵</li>
</ul>


<h2>常用</h2>

<p>A ~ Z 不分大小寫</p>

<ul>
<li>⌘ + ⇧ + A   : Find Action，萬鍵之王，可用來找其他快捷鍵，但前提是必須知道對應操作的關鍵字，像 : 'Copy' , 'Code Completion', 'Go To Line', ....</li>
<li>⌘ + ⇧ + V   : 從剪貼簿選取</li>
<li>⌘ + ⇧ + E   : 列出最近異動的檔案</li>
<li>⌘ + ⇧ + F12 : 最大化編輯區</li>
<li>⌘ + O       : Go to Class</li>
<li>⌃ + R       : Run</li>
<li>⌃ + D       : Debug</li>
<li>⌘ + ⇧ + ⌫   : 跳到上次的異動處</li>
<li>⌘ + [       : 上一個位置</li>
<li>⌘ + ]       : 下一個位置</li>
<li>⌘ + P       : method parameter 提示</li>
<li>⌃ + space   : 自動完成 (選到method後，用tab可以 overwrite 目前的 method)</li>
<li>⌘ + D       : 複製游標所在位置的那一行，或已選擇擇的區塊</li>
<li>⌘ + ⌫       : 刪除游標所在位置的那一行，或已選擇擇的區塊</li>
<li>⌘ + f12     : member outline</li>
<li>⌃ + ⌥ + R   : Run...</li>
<li>⌃ + ⌥ + D   : Debug...</li>
<li>⌃ + ⇧ + R   : run test case (如果是在method內會只會執行該 method)</li>
<li>⌃ + ⇧ + D   : debug  test case</li>
<li>⌘ + ⇧ + T   : 程式跟測試程式間互跳</li>
<li>⌥ + ⇧ + ⇡   : 游標所在位置的那一行或已選擇擇的區塊 上移</li>
<li>⌥ + ⇧ + ⇣   : 游標所在位置的那一行或已選擇擇的區塊 下移</li>
<li>⌥ + ⇡       : 增量選擇 (字母 -> 單字 -> 片語 -> 行 -> 區塊 -> ...)</li>
<li>⌥ + ⇣       : 減量選擇</li>
<li>⌘ + N       : 產生新的 class, file , test case, getter/setter, toString,...</li>
<li>⌘ + F       : Find</li>
<li>⌘ + R       : Replace</li>
<li>⌘ + ⇧ + F   : Find in path</li>
<li>⌘ + ⇧ + R   : Replace in path</li>
<li>F7          : Step into</li>
<li>F8          : Step over</li>
</ul>


<h2>少用，但值得記</h2>

<ul>
<li>⌃ + J               : 調出javadoc</li>
<li>⌃ + ⇧ + J         : 多行合併</li>
<li>⌘ + ⏎             : 智能分行</li>
<li>⌃ + T               : 在本行(或標記區塊)加上 try/catch,if block, ....</li>
<li>⌃ + ⇧ + ⌥ + V    : 以純文字貼上(無格式，不會被ide format)</li>
</ul>

]]></content>
  </entry>
  
</feed>
