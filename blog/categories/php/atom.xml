<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-17T00:33:43+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SimpleXML]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/simplexml/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/simplexml</id>
    <content type="html"><![CDATA[<ul>
<li>access single element by name</li>
<li>access multi elements by array with name</li>
</ul>


<p>```</p>

<pre><code>&lt;members&gt;
    &lt;user id="kent"&gt;Kent Chiu&lt;/user&gt;
    &lt;user id="leon"&gt;Leon Wong&lt;/user&gt;
&lt;/members&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>  $members = simplexml_load_file('member.xml'); // root
    $root-&gt;user[0]; // Kent Chiu
    $root-&gt;user[1]; // Leon Wong
        $root-&gt;user[0][id]; // kent
    $root-&gt;user[0] = 'DraculaCwg'; // now Kent Chiu is replaced to DraculaCwg
    $root-&gt;user[2] = "New User"; // appends a node 
    $root-&gt;user[2][id] = "new";
</code></pre>

<p>```</p>

<h2>Resources</h2>

<ul>
<li><a href="http://tw2.php.net/manual/en/book.simplexml.php" title="http://tw2.php.net/manual/en/book.simplexml.php">SimpleXML at
PHP.net</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/phpunit_101/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/phpunit_101</id>
    <content type="html"><![CDATA[<h2>Hello World</h2>

<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class ArrayTest extends PHPUnit_Framework_TestCase {
    public function testNewArrayIsEmpty() {
        // Create the Array fixture.
        $fixture = array();
 
        // Assert that the size of the Array fixture is 0.
        $this-&gt;assertEquals(0, sizeof($fixture));
    }
 
    public function testArrayContainsAnElement() {
        // Create the Array fixture.
        $fixture = array();
 
        // Add an element to the Array fixture.
        $fixture[] = 'Element';
 
        // Assert that the size of the Array fixture is 1.
        $this-&gt;assertEquals(1, sizeof($fixture));
    }
}
?&gt;
</code></pre>

<p>```</p>

<h2>Data Providers</h2>

<ul>
<li>using the @dataProvider annotation</li>
<li>A data provider method must be public</li>
<li>A data provider method must be return an array of arrays or an
object that implements the Iterator interface and yields an array
for each iteration step</li>
</ul>


<p>```</p>

<pre><code>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase {
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c) {
        $this-&gt;assertEquals($c, $a + $b);
    }
 
    public function provider() {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;
</code></pre>

<p>```</p>

<h2>Expected Exception</h2>

<p>there are 3 ways to expecte exception</p>

<ol>
<li>Using @expectedException annotation</li>
<li>Using setExpectedException() method</li>
<li>Using try/catch fail() pattern.</li>
</ol>


<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }
}
?&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... Code that is expected to raise an exception ...
        }
 
        catch (InvalidArgumentException $expected) {
            return;
        }
 
        $this-&gt;fail('An expected exception has not been raised.');
    }
}
?&gt;
</code></pre>

<p>```</p>

<h2>setUp() and tearDown()</h2>

<p>Yes. There are setUp and terrDown fixtures in PHPUnit.</p>

<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class DatabaseTestSuite extends PHPUnit_Framework_TestSuite
{
    protected function setUp()
    {
        $this-&gt;sharedFixture = new PDO(
          'mysql:host=wopr;dbname=test',
          'root',
          ''
        );
    }
 
    protected function tearDown()
    {
        $this-&gt;sharedFixture = NULL;
    }
}
?&gt;
</code></pre>

<p>```</p>

<h2>Test Suites</h2>

<p>TBD</p>

<h2>TestCase Extensions</h2>

<p>there are some TestCase extensions can be used, for example</p>

<ol>
<li>PHPUnit_Extensions_OutputTestCase</li>
<li>PHPUnit_Extensions_PerformanceTestCase</li>
<li>PHPUnit_Extensions_Database_TestCase</li>
</ol>


<p>or you can make your own.</p>

<p>Search PHPUnit_Extensions_* from all testcase extension.</p>

<h2>Skip and Incomplete Test</h2>

<p>```</p>

<pre><code>&lt;?php
require_once 'PHPUnit/Framework.php';
 
class ArrayTest extends PHPUnit_Framework_TestCase {
    public function testNewArrayIsEmpty() {
        $array = array();
        $this-&gt;assertEquals(0, sizeOf($array));
    }
 
    public function testArrayContainsAnElement() {
        $array[] = "content";
        $this-&gt;assertEquals(1, sizeof($array));
        $this-&gt;markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }
 
 
    public function testArrayContainsTwoElement() {
        $array[] = "content";
        $array[] = "content2";
        $this-&gt;assertEquals(2, sizeof($array));
        $this-&gt;markTestSkipped("this test is not completed yet");
    }
}
 
?&gt;
</code></pre>

<p>```</p>

<p>the output result will show as S or I</p>

<p>```</p>

<pre><code>PHPUnit 3.3.15 by Sebastian Bergmann.
 
.SI
 
Time: 0 seconds
 
OK, but incomplete or skipped tests!
Tests: 3, Assertions: 1, Incomplete: 1, Skipped: 1.
</code></pre>

<p>```</p>

<p>if assertion fail before markTestSkipped() or markTestIncomplete(),
assertion will still fail.</p>

<h2>Test Doubles (a.k.a Mocking)</h2>

<p>check
<a href="http://www.phpunit.de/manual/current/en/test-doubles.html" title="http://www.phpunit.de/manual/current/en/test-doubles.html">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Data Object (PDO)]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/pdo/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/pdo</id>
    <content type="html"><![CDATA[<h2>What can it do?</h2>

<ul>
<li>Prepare/execute, bound parameters</li>
<li>Transactions</li>
<li>LOBS</li>
<li>SQLSTATE standard error codes, flexible error handling</li>
<li>Portability attributes to smooth over database specific nuances</li>
</ul>


<h2>Connecting</h2>

<p>```</p>

<pre><code>try {
$dbh = new PDO($dsn, $user,
               $password, $options);
} catch (PDOException $e) {
die("Failed to connect:" .
    $e-&gt;getMessage();
}
</code></pre>

<p>```</p>

<h2>DSNs</h2>

<ul>
<li>mysql:host=name;dbname=dbname</li>
<li>pgsql:host=name dbname=dbname</li>
<li>odbc:odbc_dsn</li>
<li>oci:dbname=dbname;charset=charset</li>
<li>sqlite:/path/to/file</li>
</ul>


<h2>Connection Management</h2>

<p>```</p>

<pre><code>try {
$dbh = new PDO($dsn, $user, $pw);
// use the database here
// ...
// done; release
$dbh = null;
} catch (PDOException $e) {
die($e-&gt;getMessage();
}
</code></pre>

<p>```</p>

<h2>Error Handling</h2>

<ul>
<li><p>Maps error codes to ANSI SQLSTATE (5 character text string)</p>

<ul>
<li>also provides the native db error information</li>
</ul>
</li>
<li><p>Three error handling strategies</p>

<ul>
<li>silent (default)</li>
<li>warning</li>
<li>exception</li>
</ul>
</li>
</ul>


<h3>PDO::ERRMODE_SILENT</h3>

<p>```</p>

<pre><code>// The default mode
if (!dbh-&gt;query($sql)) {
  echo $dbh-&gt;errorCode(), "&lt;br&gt;";
  $info = $dbh-&gt;errorInfo();
  // $info[0] == $dbh-&gt;errorCode()
  //             SQLSTATE error code
  // $info[1] is driver specific err code
  // $info[2] is driver specific
  //             error message
}
</code></pre>

<p>```</p>

<h3>PDO::ERRMODE_WARNING</h3>

<p>```</p>

<pre><code>$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE,
                   PDO::ERRMODE_WARNING);
</code></pre>

<p>```</p>

<ul>
<li>Behaves the same as silent mode</li>
<li>Raises an E_WARNING as errors are detected</li>
<li>Can suppress with @ operator as usual</li>
</ul>


<h3>PDO::ERRMODE_EXCEPTION</h3>

<p>```</p>

<pre><code>$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE,
                   PDO::ERRMODE_EXCEPTION);
try {
  $dbh-&gt;exec($sql);
} catch (PDOException $e) {
  // display warning message
  print $e-&gt;getMessage();
  $info = $e-&gt;errorInfo;
  // $info[0] == $e-&gt;code
  //             SQLSTATE error code
  // $info[1] driver specific error code
  // $info[2] driver specific error string
}
</code></pre>

<p>```</p>

<h2>Get Data</h2>

<p>```</p>

<pre><code>$dbh = new PDO($dsn);
$stmt = $dbh-&gt;prepare(
                 "SELECT * FROM FOO");
$stmt-&gt;execute();
while ($row = $stmt-&gt;fetch()) {
  print_r($row);
}
$stmt = null;
</code></pre>

<p>```</p>

<h2>Forward-only cursors</h2>

<ul>
<li>a.k.a. “unbuffered” queries in mysql parlance</li>
<li>They are the default cursor type</li>
<li>rowCount() doesn't have meaning</li>
<li>FAST!</li>
<li>Other queries are likely to block</li>
<li>You must fetch all remaining data before launching another query</li>
<li>\$stmt→closeCursor();</li>
</ul>


<h2>Buffered Queries</h2>

<p>```</p>

<pre><code>$dbh = new PDO($dsn);
$stmt = $dbh-&gt;query("SELECT * FROM FOO");
$rows = $stmt-&gt;fetchAll();
$count = count($rows);
foreach ($rows as $row) {
  print_r($row);
}
</code></pre>

<p>```</p>

<h2>Fetch modes</h2>

<ul>
<li><p>\$stmt→fetch(PDO::FETCH_BOTH);</p>

<ol>
<li>Array with numeric and string keys</li>
<li>default option</li>
</ol>
</li>
<li><p>PDO::FETCH_NUM</p>

<ol>
<li>numeric keys only</li>
</ol>
</li>
<li><p>PDO::FETCH_ASSOC</p>

<ol>
<li>string keys only</li>
</ol>
</li>
<li><p>PDO::FETCH_OBJ</p>

<ol>
<li>stdClass object</li>
<li>\$obj→name == 'name' column</li>
</ol>
</li>
<li><p>PDO::FETCH_CLASS</p>

<ol>
<li>You choose the class</li>
</ol>
</li>
<li><p>PDO::FETCH_INTO</p>

<ol>
<li>You provide the object</li>
</ol>
</li>
<li><p>PDO::FETCH_COLUMN</p>

<ol>
<li>Fetches a column (example later)</li>
</ol>
</li>
<li><p>PDO::FETCH_BOUND</p>

<ol>
<li>Only fetches into bound variables</li>
</ol>
</li>
<li><p>PDO::FETCH_FUNC</p>

<ol>
<li>Returns the result filtered through a callback</li>
</ol>
</li>
<li><p>see the manual for more</p></li>
</ul>


<h2>Iterators</h2>

<p>```</p>

<pre><code>$dbh = new PDO($dsn);
$stmt = $dbh-&gt;query(
           "SELECT name FROM FOO",
           PDO::FETCH_COLUMN, 0);
foreach ($stmt as $name) {
  echo "Name: $name\n";
}
$stmt = null;
</code></pre>

<p>```</p>

<h2>Changing data</h2>

<p>```</p>

<pre><code>$deleted = $dbh-&gt;exec( "DELETE FROM FOO WHERE 1");
$changes = $dbh-&gt;exec(
  "UPDATE FOO SET active=1 "
 ."WHERE NAME LIKE '%joe%'");
</code></pre>

<p>```</p>

<h2>Autonumber/sequences</h2>

<p>```</p>

<pre><code>$dbh-&gt;exec( "insert into foo values (...)");
echo $dbh-&gt;lastInsertId();
$dbh-&gt;exec( "insert into foo values (...)");
echo $dbh-&gt;lastInsertId("seqname");
</code></pre>

<p>```</p>

<p>Its up to you to call the right one for your db!</p>

<h2>Prepared Statements</h2>

<p>```</p>

<pre><code>// No need to manually quote data here
$stmt = $dbh-&gt;prepare(
   "INSERT INTO CREDITS (extension, name)"
  ."VALUES (:extension, :name)");
$stmt-&gt;execute(array(
   'extension' =&gt; 'xdebug',
   'name'      =&gt; 'Derick Rethans'
));
</code></pre>

<p>```</p>

<h2>Prepared Statements</h2>

<p>```</p>

<pre><code>// No need to manually quote data here
$stmt = $dbh-&gt;prepare(
   "INSERT INTO CREDITS (extension, name)"
  ."VALUES (?, ?)");
$stmt-&gt;execute(array(
                  'xdebug',
                  'Derick Rethans'
));
</code></pre>

<p>```</p>

<h2>\$db->quote()</h2>

<ul>
<li>If you really must quote things “by-hand”</li>
<li>\$db→quote() adds quotes and proper escaping as needed</li>
<li>But doesn't do anything in the ODBC driver!</li>
<li>Best to use prepared statements</li>
</ul>


<h2>Transactions</h2>

<p>```</p>

<pre><code>$dbh-&gt;beginTransaction();
try {
  $dbh-&gt;query("UPDATE ...");
  $dbh-&gt;query("UPDATE ...");
  $dbh-&gt;commit();
} catch (PDOException $e) {
  $dbh-&gt;rollBack();
}
</code></pre>

<p>```</p>

<h2>Stored Procedures</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;prepare( "CALL sp_set_string(?)");
$stmt-&gt;execute(array('foo'));
$stmt = $dbh-&gt;prepare( "CALL sp_set_string(?)");
$stmt-&gt;bindValue(1, 'foo');
$stmt-&gt;execute();
</code></pre>

<p>```</p>

<h2>OUT parameters</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;prepare( "CALL sp_get_string(?)");
$stmt-&gt;bindParam(1, $ret, PDO::PARAM_STR, 4000);
if ($stmt-&gt;execute()) {
  echo "Got $ret\n";
}
</code></pre>

<p>```</p>

<h2>IN/OUT parameters</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;prepare(
           "call @sp_inout(?)");
$val = "My input data";
$stmt-&gt;bindParam(1, $val,
                 PDO::PARAM_STR|
                 PDO::PARAM_INPUT_OUTPUT,
                 4000);
if ($stmt-&gt;execute()) {
  echo "Got $val\n";
}
</code></pre>

<p>```</p>

<h2>Multi-rowset queries</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;query("call sp_multi_results()");
do {
  while ($row = $stmt-&gt;fetch()) {
    print_r($row);
  }
} while ($stmt-&gt;nextRowset());
</code></pre>

<p>```</p>

<h2>Binding columns</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;prepare(
   "SELECT extension, name from CREDITS");
if ($stmt-&gt;execute()) {
  $stmt-&gt;bindColumn('extension', $ext);
  $stmt-&gt;bindColumn('name', $name);
  while ($stmt-&gt;fetch(PDO::FETCH_BOUND)) {
    echo "Extension: $ext\n";
    echo "Author:    $name\n";
  }
}
</code></pre>

<p>```</p>

<h2>Oracle style NULLs</h2>

<ul>
<li><p>Oracle translates empty strings into NULLs</p>

<ul>
<li>\$dbh→setAttribute(PDO::ATTR_ORACLE_NULLS, true)</li>
</ul>
</li>
<li><p>Translates empty strings into NULLs when fetching data</p></li>
<li>But won't change them on insert</li>
</ul>


<h2>LOBs</h2>

<ul>
<li>Large objects are usually >4kb in size</li>
<li>Nice to avoid fetching them until you need them</li>
<li>Mature RDBMS offer LOB APIs for this</li>
<li>PDO exposes LOBs as Streams</li>
</ul>


<h2>Fetching an image</h2>

<p>```</p>

<pre><code>$stmt = $dbh-&gt;prepare(
   "select contenttype, imagedata"
  ." from images where id=?");
$stmt-&gt;execute(array($_GET['id']));
$stmt-&gt;bindColumn(1, $type,
                  PDO::PARAM_STR, 256);
$stmt-&gt;bindColumn(2, $lob,
                  PDO::PARAM_LOB);
$stmt-&gt;fetch(PDO::FETCH_BOUND);
header("Content-Type: $type");
fpassthru($lob);
</code></pre>

<p>```</p>

<h2>Uploading an image</h2>

<p>```</p>

<pre><code>$stmt = $db-&gt;prepare("insert into images "
   . "(id, contenttype, imagedata)"
   . " values (?,?,?)");
$id = get_new_id();
$fp = fopen($_FILES['file']['tmp_name'],'rb');
$stmt-&gt;bindParam(1, $id);
$stmt-&gt;bindParam(2, $_FILES['file']['type']);
$stmt-&gt;bindParam(3, $fp, PDO::PARAM_LOB);
$stmt-&gt;execute();
</code></pre>

<p>```</p>

<h2>Scrollable Cursors</h2>

<ul>
<li>Allow random access to a rowset</li>
<li>Higher resource usage than forward-only cursors</li>
<li>Can be used for positioned updates (more useful for CLI/GUI apps)</li>
</ul>


<h2>Positioned updates</h2>

<ul>
<li>An open (scrollable) cursor can be used to target a row for another
query</li>
<li>Name your cursor by setting PDO::ATTR_CURSOR_NAME during prepare()</li>
<li>UPDATE foo set bar = ? WHERE CURRENT OF cursor_name</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAMP install on CentOS5]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/lamp_install/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/lamp_install</id>
    <content type="html"><![CDATA[<h2>OS installation</h2>

<h3>VMWare</h3>

<ul>
<li>掛載iso檔</li>
<li>網路卡設成NAT</li>
<li>記憶體可調小一點300M應該就夠了</li>
<li>不用特別去裝VMTools</li>
</ul>


<h3>CentOS 5</h3>

<ul>
<li>安裝成text mode的server就可(不用gui)</li>
<li>照<a href="http://smartraining.cn/centos/server_installation" title="http://smartraining.cn/centos/server_installation">這篇</a>的方式去裝就好了</li>
<li>網路設定如以改用dhcp</li>
<li>Firewall disabled</li>
</ul>


<h4>新建一個一般usre</h4>

<p><code>
adduser username
passwd username
</code></p>

<h4>網路設定</h4>

<ul>
<li>裝完後，如果網路沒有active，可以到/etc/sysconfig/network-scripts/ifcfg-eth0
修改網路設定</li>
</ul>


<p>指定IP</p>

<p>```</p>

<pre><code>DEVICE=eth0                          #網路卡名稱
BOOTPROTO=static                     #BOOTP協定
BROADCAST=192.168.202.255            #廣播 IP Address
HWADDR=00:15:C5:E5:99:B1             #MAC Address
IPADDR=192.168.202.100               #IP Address
NETMASK=255.255.254.0                #Netmask (遮罩)
NETWORK=192.168.202.0                #網段
ONBOOT=yes                           #開機自動啟動 
</code></pre>

<p>```</p>

<p>DHCP</p>

<p>```</p>

<pre><code>DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
</code></pre>

<p>```</p>

<p>設定完重新啟動網卡</p>

<p>```</p>

<h1>/etc/rc.d/init.d/network restart</h1>

<p>```</p>

<h4>安裝packages</h4>

<ul>
<li>記得透過<a href="http://smartraining.cn/centos/yum" title="http://smartraining.cn/centos/yum">yum</a>裝以一下以下幾個packages，滿有用的</li>
</ul>


<p><code>
yum -y  install wget bzip2 unzip zip nmap tree lynx
</code></p>

<h2>Server installation</h2>

<p>預設的php是5.1.x的，有點太舊了，可以透過<a href="http://www.52crack.com/blog/?action=show&amp;id=368" title="http://www.52crack.com/blog/?action=show&amp;id=368">這個連結</a>的說明更新到5.2.x</p>

<h3>MySQL 5</h3>

<p>MySQL install</p>

<p><code>
yum -y install mysql-server
</code></p>

<p>set MySQL as daemon</p>

<p><code>
chkconfig mysqld on
</code></p>

<p>check config</p>

<p>```
chkconfig --list mysqld</p>

<h1>2 - 5 should be on</h1>

<p>mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off
```</p>

<p>startup MySQL server</p>

<p><code>
/etc/rc.d/init.d/mysqld start
</code></p>

<p>change password</p>

<p><code>
mysqladmin -u root password 'Your Password'
</code></p>

<h3>Apache 2</h3>

<p>install Apache server</p>

<p><code>
yum -y install httpd
</code></p>

<h3>PHP 5</h3>

<p>install PHP</p>

<p><code>
yum -y install php php-mbstring php-mysql php-gd php-pear
</code></p>

<p>setup php.ini</p>

<p><code>
date.timezone = "Asia/Taipei"
</code></p>

<h3>Apache Config</h3>

<p>set Apache as daemon</p>

<p><code>
chkconfig httpd on
</code></p>

<p>check config</p>

<p>```
chkconfig --list httpd</p>

<h1>2 - 5 should be on</h1>

<p>httpd  0:off 1:off 2:on 3:on 4:on 5:on 6:off
```</p>

<p>startup httpd server</p>

<p><code>
/etc/rc.d/init.d/httpd start
</code></p>

<h2>verify installed</h2>

<p>create new php file in document root</p>

<p><code>
vi /var/www/html/index.php
</code></p>

<p>```</p>

<pre><code>&lt;?php 
phpinfo();
?&gt;
</code></pre>

<p>```</p>

<p>open by lynx borwser</p>

<p><code>
lynx http://localhost
</code></p>

<p>you should check
<a href="http://wiki.kent-chiu.com/doku.php?id=ubuntu:lamp" title="ubuntu:lamp">this</a>
article to config LAMP server</p>

<p>如果無法從linux外存取web，可能會firewall的關係，在command
line下執行<code>setup</code>可以關掉firewall</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Web Server Instruction]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/install_web_server/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/install_web_server</id>
    <content type="html"><![CDATA[<h2>For Windows Platform</h2>

<h3>All in one package</h3>

<ul>
<li><p><a href="http://vertrigo.sourceforge.net/" title="http://vertrigo.sourceforge.net/">vertrigo</a></p>

<ol>
<li>apache server</li>
<li>PHP</li>
<li>MySQL</li>
<li>PHPmyAdmin</li>
<li>SQLite</li>
<li>SQLiteManager</li>
<li>zend optimizer</li>
<li>smarty</li>
</ol>
</li>
<li><p><a href="http://www.wampserver.com/" title="http://www.wampserver.com/">WAMP</a></p>

<ol>
<li>apache server</li>
<li>PHP</li>
<li>MySQL</li>
<li>PHPmyAdmin</li>
<li>SQLite</li>
<li>SQLiteManager</li>
<li>zend optimizer</li>
<li>smarty</li>
</ol>
</li>
</ul>


<h2>For Ubuntu(Linux) Platform</h2>

<p>apt-get will give you the whole world.!</p>
]]></content>
  </entry>
  
</feed>
