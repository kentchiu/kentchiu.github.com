<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rest | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-08-28T10:37:41+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用curl指令測試REST服務]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command/"/>
    <updated>2013-08-14T11:26:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/CURL">cURL</a> 是很方便的Rest客戶端，可以很方便的完成許多Rest API測試的需求，甚至，如果是需要先登入或認證的rest api，也可以進行測試，利用<em>curl</em>指令，可以送出HTTP GET, POST, PUT, DELETE, 也可以改變 HTTP header來滿足使用REST API需要的特定條件。</p>

<p><a href="http://curl.haxx.se/docs/manpage.html">curl的參數很多</a>，這邊僅列出目前測試REST時常用到的:</p>

<pre><code>-X/--request [GET|POST|PUT|DELETE|…]  使用指定的http method發出 http request
-H/--header                           設定request裡的header
-i/--include                          顯示response的header
-d/--data                             設定 http parameters 
-v/--verbose                          輸出比較多的訊息
-u/--user                             使用者帳號、密碼
-b/--cookie                           cookie  
</code></pre>

<blockquote><p>linux command line 的參數常，同一個功能常會有兩個功能完全相同參數，一個是比較短的參數，前面通常是用<code>-</code>(一個<code>-</code>)導引符號，另一個比較長的參數，通常會用<code>--</code>(兩個<code>-</code>)導引符號</p>

<p>在curl 使用說明</p>

<pre><code>  -X, --request COMMAND  Specify request command to use
      --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
      --retry NUM   Retry request NUM times if transient problems occur
      --retry-delay SECONDS When retrying, wait this many seconds between each
      --retry-max-time SECONDS  Retry only within this period&gt;
</code></pre>

<p>參數<code>-X</code>跟<code>--request</code>兩個功能是一樣的，所以使用時
<code>ex:curl -X POST http://www.example.com/</code> 跟 <code>curl --request POST http://www.example.com/</code> 是相等的功能</p></blockquote>

<h4>GET/POST/PUT/DELETE使用方式</h4>

<p>-X 後面加 http method，</p>

<pre><code>curl -X GET "http://www.rest.com/api/users"
curl -X POST "http://www.rest.com/api/users"
curl -X PUT "http://www.rest.com/api/users"
curl -X DELETE "http://www.rest.com/api/users"
</code></pre>

<p>url要加引號也可以，不加引號也可以，如果有非純英文字或數字外的字元，不加引號可能會有問題，如果是網碼過的url，也要加上引號</p>

<h4>HEADER</h4>

<p>在http header加入的訊息</p>

<pre><code>curl -v -i -H "Content-Type: application/json" http://www.example.com/users
</code></pre>

<h4>HTTP Parameter</h4>

<p>http參數可以直接加在url的query string，也可以用<code>-d</code>帶入參數間用<code>&amp;</code>串接</p>

<pre><code>curl -X POST -d "param1=value1&amp;param2=value2"
curl -X POST -d "param1=a 0space"     
# "a space" url encode後空白字元會編碼成'%20'為"a%20space"，編碼後的參數可以直接使用
curl -X POST -d "param1=a%20space"     
</code></pre>

<h4>需先認證或登入才能使用的service #####</h4>

<p>許多服務，需先進行登入或認證後，才能存取其API服務，依服務要求的條件，的curl可以透過cookie，session或加入在header加入session key，api key或認證的token來達到認證的效果。</p>

<p>session 例子:</p>

<p>後端如果是用session記錄使用者登入資訊，後端會傳一個 session id給前端，前端需要在每次跟後端的requests的header中置入此session id，後端便會以此session id識別前端是屬於那個session，以達到session的效果</p>

<pre><code>curl --request GET 'http://www.rest.com/api/users' --header 'sessionid:1234567890987654321'
</code></pre>

<h2>相關資源    </h2>

<ul>
<li><a href="http://linux.about.com/od/commands/l/blcmdl1_curl.htm">http://linux.about.com/od/commands/l/blcmdl1_curl.htm</a> - curl 手冊</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL encoding]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/25/url-encoding/"/>
    <updated>2013-06-25T11:01:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/25/url-encoding</id>
    <content type="html"><![CDATA[<p><code>https://bob:bobby@www.lunatech.com:8080/file;p=1?q=2#third</code></p>

<ul>
<li>Scheme           : https</li>
<li>User             : bob</li>
<li>Password         :bobby</li>
<li>Host address     : www.lunatech.com</li>
<li>Port             : 8080</li>
<li>Path             : /file</li>
<li>Path parameters  : p=1</li>
<li>Query parameters : q=2</li>
<li>Fragment         : third</li>
</ul>


<h6>Path parameters</h6>

<p>Path parameters 又叫 Matrix Parameters, 每個 <em>path segment</em> 可以有自已的 Matrix Parameters，這在 Restful style 的設計上有時會很有用。</p>

<h6>Fragment</h6>

<p>Fragment 是用來指出整份 URL resrouce 的某一特定部份，在網頁設計上是用來做定位用的錨點 (anchor)</p>

<h4>保留字處理</h4>

<p>path 跟 query string 對保留字的處理方式不一樣，所以，在做編解碼時，要分開處理</p>

<p>ex:
空白字元在 path 會被編成 %20 , '+' 會被編成 '_' ,但在 query string 空白字元會被編成 '+' or '%20', '+' 會被編成 '%2B'</p>

<p>所以，如果有一個<code>blue+light blue</code>同時放在 path 跟 query string，那結果會是這樣</p>

<pre><code>http://example.com/blue+light%20blue?blue%2Blight+blue
</code></pre>

<h4>編碼、中文與 Unicode</h4>

<p>RFC 1738 並沒有規定要用什麼樣的編碼，所以，一般會在 HTTP header 指定 encoding 或採用 HTML page encoding</p>

<h2>Resource</h2>

<ul>
<li><a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding</a> - What every web developer must know about URL encoding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API Design]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design/"/>
    <updated>2013-06-04T09:58:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design</id>
    <content type="html"><![CDATA[<h2>Method</h2>

<p>POST,DELETE : 操作是 non-idempotent(非幕等)</p>

<p>GET, PUT  : 操作是 idempotent(幕等)</p>

<blockquote><p>TBC : 解釋 idempotent</p></blockquote>

<h3>GET</h3>

<p>GET method用來取得一筆或多的資源，如果是多筆資源，還可以加入分頁，過濾等資訊，也可在header傳入分頁的links，ex:'first', 'last', 'next' and 'prev'</p>

<ul>
<li>GET     http://www.example.com/orders                           取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345                     取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/orders/12345/items               取得訂單編號為 12345 的訂單下的所有訂單項目</li>
<li>GET     http://www.example.com/orders/12345/oitems/678          取得訂單編號為 12345 的訂單下的訂單項目 678</li>
<li>GET     http://www.example.com/orders?customer=kent             取得客戶 kent 的所有訂單</li>
</ul>


<h5>status code</h5>

<ul>
<li>200 (OK)            順利取得資源</li>
<li>400 (BAD REQUEST)   無法順利取得資訊，通常是參數有問題或某個查詢條件失效</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>POST</h3>

<p>POST method用來建立新資源，建立完成資源後，通常是回應 201(CREATED) 的狀態碼，而且建立的新資源的 uri link 會放在 HEAD (不是response body)</p>

<pre><code>POST http://www.example.com/order
</code></pre>

<p>response</p>

<pre><code>200 OK
Content-Type: application/json
Location: http://www.example.com/order/123  
</code></pre>

<h5>status code</h5>

<ul>
<li>201 (CREATED)       成功建立新資源</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>PUT</h3>

<p>POST method 用來更新資源，</p>

<p>如果 resource 的 id，是由前端決定，而不是後端，那麼此時 PUT 也可以拿用做建立新資源的動作</p>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個status code，response裡會有異動後的內容</li>
<li>201 (CREATED)       成功建立新資源</li>
<li>204 (No Content)    更新成功，如果使用這個status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>DELETE</h3>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個 status code，response裡會有異動後的內容</li>
<li>204 (No Content)    更新成功，如果使用這個 status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在，連續呼叫兩次相同的 delete，會傳回 404</li>
</ul>


<h4>命名規則</h4>

<p>資源命名應為<strong>複數名詞</strong>，不論是 GET, POST, PUT, DELETE 應該都要用<strong>複數名詞</strong>來命名，如果是要取得單筆資訊，
則是在<strong>複數名詞</strong>的資源後接上該資源的indentity</p>

<p>如果是複合字，應該用<code>-</code>隔開，而不是用 camel style : ex: 採用 <code>hello-world</code> 而非 <code>helloWorld</code></p>

<ul>
<li>GET     http://www.example.com/orders             取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345       取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/users?name=kent    取得使用者 kent 的資訊</li>
<li>PUT     http://www.example.com/users/kent         更新使用者 kent</li>
<li>POST    http://www.example.com/users/kent         新增使用者 kent</li>
<li>DELETE  http://www.example.com/users/kent         刪除使用者 kent</li>
</ul>


<p>所以，一般來說，只有兩種 url 的定義方式</p>

<pre><code>GET | PUT | DELETE  http://www.example.com/orders/{id}
POST                http://www.example.com/orders
</code></pre>

<blockquote><p>TBC : 查一下 resource id是用純數字(/user/1)，或使用有意義的名稱為佳(users/kent)
目前認為用 id 應該會比較好，因為名稱可能會異動，如果要用名稱，應該是類似查詢參數的用法 /users?name=kent</p></blockquote>

<h4>輔助用字</h4>

<ul>
<li>search 搜尋，如果有時就是做搜尋當resource最直覺，就用吧，以名詞命規的規格，還是可以有例外的</li>
<li>filter 過濾用</li>
<li>page   分頁用</li>
<li>sort   排序用，可以用<code>-</code>表示昇冪, ex: sort=-age 由大到小排序，sort=age 由小到大排序</li>
<li>fields 用來指定後端只傳合那些欄位  ex: fields=id,name,address</li>
<li>embed  用來指定後端傳合的部份是不是包含 detail，有些資料是master/detail的關係，用embed可以決定要不要傳回 detail</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a> - HTTP 狀態碼</li>
<li><a href="http://www.restapitutorial.com/lessons/httpmethods.html">http://www.restapitutorial.com/lessons/httpmethods.html</a>  - RESTful Tutorial</li>
<li><a href="http://blog.2partsmagic.com/restful-uri-design/">http://blog.2partsmagic.com/restful-uri-design/</a> - rest 命名規格</li>
<li><a href="http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs">http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs</a> - 如何避免用動詞命名</li>
<li>一般流行的 Rest API

<ol>
<li> <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html">http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html</a> - Amazon 的 REST API文件</li>
<li> <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list">https://dev.twitter.com/docs/api/1.1/get/lists/list</a> - twitter 的 REST API文件</li>
<li> <a href="https://developers.facebook.com/docs/reference/api/">https://developers.facebook.com/docs/reference/api/</a> - FaceBook 的 REST API文件</li>
<li> <a href="https://developer.linkedin.com/apis">https://developer.linkedin.com/apis</a> - linkedin 的 REST API文件</li>
</ol>
</li>
<li><a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel">http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel</a> - 設計Restful API 相當不錯的參考資料    ，內容很全面，方方面面都有提到</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Rest檔案上傳及下載]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc/"/>
    <updated>2013-03-10T14:27:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc</id>
    <content type="html"><![CDATA[<p>File upload</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/foobar/upload", method = RequestMethod.POST)
public @ResponseBody
String upload(@RequestParam("file") MultipartFile file, @RequestParam("fileId") String fileId) {
    logger.info("save import file {} to {}", file.getOriginalFilename(), fileId);

    File resultHome = getWorkingDir();
    File temp = new File(resultHome, fileId);
    try {
        IOUtils.copy(file.getInputStream(), new FileOutputStream(temp));
        return "{success: true}";
    } catch (FileNotFoundException e) {
        logger.error("upload file fail", e);
    } catch (IOException e) {
        logger.error("upload file fail", e);
    }
    return "{success: false}";
}
</code></pre>

<p>```</p>

<p>File Download</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/forbar/export", method = RequestMethod.GET)
public HttpEntity&lt;byte[]&gt; excelExcel() throws IOException {
    File file = new File("myexcel.xls");
    byte[] body = FileUtils.readFileToByteArray(file);
    HttpHeaders header = new HttpHeaders();
    header.setContentType(new MediaType("application", "xls"));
    header.set("Content-Disposition", "attachment; filename=" + "foobar.xls");
    header.setContentLength(body.length);
    return new HttpEntity&lt;byte[]&gt;(body, header);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發RESTful應用程式]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/developing_restful_android_applications/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/developing_restful_android_applications</id>
    <content type="html"><![CDATA[<p>andoird程式中，常常會有以下類型的動作方式：</p>

<ol>
<li>到網路抓取資料</li>
<li>儲存到手機</li>
<li>檢查並更新手機上的資料</li>
</ol>


<p>像Rss Reader就是很典型的範例，使用者需要在網路有效時對遠端的rss
server同部rss資料，並可以在沒有網路時在local進行離線閱讀。
這類型的程式有幾個困難需要處理</p>

<ol>
<li>不能在activity進行網路抓資料的動作，因為極可能會block住ui，user無法進行其他操作</li>
<li>抓取資料後，需要在local進行cache(通常是存在SQLite資料庫)</li>
<li>需對資料庫跟遠端的rss進行同步，如果有新的rss，應該進行通知</li>
<li>又不能太過頻繁的進行同步</li>
<li>同步後，使用者在畫面上可以馬上讀取到</li>
</ol>


<p>解決這些問題，不是在一個activity中全部做完即可，而是需要許多個組件相互配合，才不會讓user有不好的使用經驗，為了解決這些問題，google建議了三個處理這個問題的patterns。詳情請參閱參考資源。</p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/developing_restful_android_applications_001.png" alt="developing_restful_android_applications_001.png" /></p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/developing_restful_android_applications_002.png" alt="developing_restful_android_applications_002.png" /></p>

<h5>處理檔案跟資料庫間的關聯</h5>

<p>在應用上，db的資料，常常會跟某些特定的某些檔案做關聯，傳統的做法，可能是把檔案位置記在table的某個欄位，或用特殊的命名規則來讓table的record跟檔案名稱可以對應的起來。
Google的提供了另一種方式，主要做法如下：</p>

<ul>
<li>為檔案建立一個專屬的table，裡面包含 “_id”,”_data”兩個欄位</li>
<li>建立存取檔案專用的content
uri，該uri可以指定該table的”_id”，便可取得檔案的相關資訊”_data”</li>
<li>利用ContentResolver.openInputStream直接開啟檔案</li>
</ul>


<p>這樣做的好處是，ContentProvider的client端(使用ContentProvider
API的程式)不用管實體檔案存那，就算檔案從手機移到SD
card或網路上，都不會影響到client的用法。ContentProvider的client面對的都是相同的Content
URI.</p>

<p><code>
User Table                                                  User Picture Table
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
| _id | name | password | picture                       |  | _id | _data                                    |
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
|   1 | Kent | xxx      | content://foo.bar.Picture/101 |  | 101 | app_data/data/kent_picture.png           | (user的大頭照在手機記憶體)
|   2 | John | ooo      | content://foo.bar.Picture/102 |  | 102 | http://www.domain.com/john.png           | (user的大頭照在網路上)
|   3 | Bob  | ***      | content://foo.bar.Picture/103 |  | 103 | sd_card/data/profile_picture_of_bob.jpg  | (user的大頭照在sd card上)
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
</code></p>

<h4>說明</h4>

<p>左邊User Table記錄的是user的基本資料，右邊的User Picture
Table是記錄user的大頭照存放位置。user
table裡並不直接存放大頭照檔案的位置，取而代之的是把大頭的位置放在User
Picture Table，然後透過user table裡的picture欄位存的content uri,
來取得User Picture
Table中的相對row(_id=101),真正存放檔案的欄位一定要叫<strong>_data</strong>，當android收到<code>ContentResolver.openInputStream</code>的需求時，android會將<strong>_data</strong>欄位以streaming的方式開啟。</p>

<p>如果直接將檔案實際路徑(ex:app_data/data/kent_picture.png)放到user的picture的欄位中，而不是放content
uri，這樣，其他程式則會因沒有權限而無法開啟</p>

<h2>Resource</h2>

<ul>
<li><a href="http://www.google.com/events/io/2010/sessions/developing-RESTful-android-apps.html" title="http://www.google.com/events/io/2010/sessions/developing-RESTful-android-apps.html">google I/O 2010大會上介紹的處理RESTful Android
Applications</a>
<a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE&amp;feature=player_embedded" title="http://www.youtube.com/watch?v=xHXn3Kg2IQE&amp;feature=player_embedded">說明影片</a>
<a href="http://dl.google.com/googleio/2010/android-developing-RESTful-android-apps.pdf" title="http://dl.google.com/googleio/2010/android-developing-RESTful-android-apps.pdf">投影片</a></li>
<li><a href="http://programming-android.labs.oreilly.com/ch13.html" title="http://programming-android.labs.oreilly.com/ch13.html">Programming
Android</a>

<ul>
<li>oreilly線上書籍Programming Android關於android開發RESTful
client的注意事項</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
