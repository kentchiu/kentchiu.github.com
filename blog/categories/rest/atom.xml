<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rest | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-23T12:18:31+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Rest檔案上傳及下載]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc/"/>
    <updated>2013-03-10T14:27:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/03/10/file-upload-and-download-in-spring-rest-mvc</id>
    <content type="html"><![CDATA[<p>File upload</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/foobar/upload", method = RequestMethod.POST)
public @ResponseBody
String upload(@RequestParam("file") MultipartFile file, @RequestParam("fileId") String fileId) {
    logger.info("save import file {} to {}", file.getOriginalFilename(), fileId);

    File resultHome = getWorkingDir();
    File temp = new File(resultHome, fileId);
    try {
        IOUtils.copy(file.getInputStream(), new FileOutputStream(temp));
        return "{success: true}";
    } catch (FileNotFoundException e) {
        logger.error("upload file fail", e);
    } catch (IOException e) {
        logger.error("upload file fail", e);
    }
    return "{success: false}";
}
</code></pre>

<p>```</p>

<p>File Download</p>

<p>```</p>

<pre><code>@RequestMapping(value = "/forbar/export", method = RequestMethod.GET)
public HttpEntity&lt;byte[]&gt; excelExcel() throws IOException {
    File file = new File("myexcel.xls");
    byte[] body = FileUtils.readFileToByteArray(file);
    HttpHeaders header = new HttpHeaders();
    header.setContentType(new MediaType("application", "xls"));
    header.set("Content-Disposition", "attachment; filename=" + "foobar.xls");
    header.setContentLength(body.length);
    return new HttpEntity&lt;byte[]&gt;(body, header);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發RESTful應用程式]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/developing_restful_android_applications/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/developing_restful_android_applications</id>
    <content type="html"><![CDATA[<p>andoird程式中，常常會有以下類型的動作方式：</p>

<ol>
<li>到網路抓取資料</li>
<li>儲存到手機</li>
<li>檢查並更新手機上的資料</li>
</ol>


<p>像Rss Reader就是很典型的範例，使用者需要在網路有效時對遠端的rss
server同部rss資料，並可以在沒有網路時在local進行離線閱讀。
這類型的程式有幾個困難需要處理</p>

<ol>
<li>不能在activity進行網路抓資料的動作，因為極可能會block住ui，user無法進行其他操作</li>
<li>抓取資料後，需要在local進行cache(通常是存在SQLite資料庫)</li>
<li>需對資料庫跟遠端的rss進行同步，如果有新的rss，應該進行通知</li>
<li>又不能太過頻繁的進行同步</li>
<li>同步後，使用者在畫面上可以馬上讀取到</li>
</ol>


<p>解決這些問題，不是在一個activity中全部做完即可，而是需要許多個組件相互配合，才不會讓user有不好的使用經驗，為了解決這些問題，google建議了三個處理這個問題的patterns。詳情請參閱參考資源。</p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/developing_restful_android_applications_001.png" alt="developing_restful_android_applications_001.png" /></p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/developing_restful_android_applications_002.png" alt="developing_restful_android_applications_002.png" /></p>

<h5>處理檔案跟資料庫間的關聯</h5>

<p>在應用上，db的資料，常常會跟某些特定的某些檔案做關聯，傳統的做法，可能是把檔案位置記在table的某個欄位，或用特殊的命名規則來讓table的record跟檔案名稱可以對應的起來。
Google的提供了另一種方式，主要做法如下：</p>

<ul>
<li>為檔案建立一個專屬的table，裡面包含 “_id”,”_data”兩個欄位</li>
<li>建立存取檔案專用的content
uri，該uri可以指定該table的”_id”，便可取得檔案的相關資訊”_data”</li>
<li>利用ContentResolver.openInputStream直接開啟檔案</li>
</ul>


<p>這樣做的好處是，ContentProvider的client端(使用ContentProvider
API的程式)不用管實體檔案存那，就算檔案從手機移到SD
card或網路上，都不會影響到client的用法。ContentProvider的client面對的都是相同的Content
URI.</p>

<p><code>
User Table                                                  User Picture Table
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
| _id | name | password | picture                       |  | _id | _data                                    |
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
|   1 | Kent | xxx      | content://foo.bar.Picture/101 |  | 101 | app_data/data/kent_picture.png           | (user的大頭照在手機記憶體)
|   2 | John | ooo      | content://foo.bar.Picture/102 |  | 102 | http://www.domain.com/john.png           | (user的大頭照在網路上)
|   3 | Bob  | ***      | content://foo.bar.Picture/103 |  | 103 | sd_card/data/profile_picture_of_bob.jpg  | (user的大頭照在sd card上)
*-----*------*----------*-------------------------------*  *-----*------------------------------------------*
</code></p>

<h4>說明</h4>

<p>左邊User Table記錄的是user的基本資料，右邊的User Picture
Table是記錄user的大頭照存放位置。user
table裡並不直接存放大頭照檔案的位置，取而代之的是把大頭的位置放在User
Picture Table，然後透過user table裡的picture欄位存的content uri,
來取得User Picture
Table中的相對row(_id=101),真正存放檔案的欄位一定要叫<strong>_data</strong>，當android收到<code>ContentResolver.openInputStream</code>的需求時，android會將<strong>_data</strong>欄位以streaming的方式開啟。</p>

<p>如果直接將檔案實際路徑(ex:app_data/data/kent_picture.png)放到user的picture的欄位中，而不是放content
uri，這樣，其他程式則會因沒有權限而無法開啟</p>

<h2>Resource</h2>

<ul>
<li><a href="http://www.google.com/events/io/2010/sessions/developing-RESTful-android-apps.html" title="http://www.google.com/events/io/2010/sessions/developing-RESTful-android-apps.html">google I/O 2010大會上介紹的處理RESTful Android
Applications</a>
<a href="http://www.youtube.com/watch?v=xHXn3Kg2IQE&amp;feature=player_embedded" title="http://www.youtube.com/watch?v=xHXn3Kg2IQE&amp;feature=player_embedded">說明影片</a>
<a href="http://dl.google.com/googleio/2010/android-developing-RESTful-android-apps.pdf" title="http://dl.google.com/googleio/2010/android-developing-RESTful-android-apps.pdf">投影片</a></li>
<li><a href="http://programming-android.labs.oreilly.com/ch13.html" title="http://programming-android.labs.oreilly.com/ch13.html">Programming
Android</a>

<ul>
<li>oreilly線上書籍Programming Android關於android開發RESTful
client的注意事項</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
