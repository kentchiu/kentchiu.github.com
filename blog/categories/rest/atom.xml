<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rest | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-01-01T17:07:48+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Access imgur with API]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/31/access-imgur-with-api/"/>
    <updated>2013-08-31T01:20:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/31/access-imgur-with-api</id>
    <content type="html"><![CDATA[<ol>
<li>先註冊 <a href="http://imgur.com/">imgur</a> 的帳號</li>
<li>申請API使用權限
<img src="http://blog.kent-chiu.com/images/2013-08-31/2013-08-31-access-imgur-with-api-001.png" alt="2013-08-31-access-imgur-with-api-001.png" /></li>
<li>註冊成後功，imgur會寄信到email裡，裡面會有 client_id 跟 client_secret</li>
<li><p>試車 <code>https://api.imgur.com/3/gallery.json</code> 是取得</p>

<pre><code>curl https://api.imgur.com/3/gallery.json -i -H "Authorization: Client-ID 69a8cxxxxxxxxxx" 

HTTP/1.1 200 OK
Server: nginx
Date: Fri, 30 Aug 2013 17:59:29 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
…..
</code></pre>

<p>如果看到    http status code 200，就表示成功了</p>

<blockquote><p>69a8cxxxxxxxxxx -> 換成你自已的 client_id</p></blockquote></li>
</ol>


<h4>取得相簿</h4>

<pre><code>curl -i -H "Authorization: Client-ID 69a8cxxxxxxxxxx"  https://api.imgur.com/3/gallery/album/lDRB2/json
    https://api.imgur.com/3/gallery/album/lDRB2/json

{
    "data": {
        "id": "lDRB2",
        "title": "Imgur Office",
        "description": null,
        "datetime": 1357856292,
        "cover": "24nLu",
        "account_url": "Alan",
        "privacy": "public",
        "layout": "blog",
        "views": 13780,
        "link": "http://alanbox.imgur.com/a/lDRB2",
        "ups": 1602,
        "downs": 14,
        "score": 1917,
        "is_album": true,
        "vote": null,
        "images_count": 11,
        "images": [
            {
                "id": "24nLu",
                "title": null,
                "description": null,
                "datetime": 1357856352,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 855658,
                "views": 135772,
                "bandwidth": 116174397976,
                "link": "http://i.imgur.com/24nLu.jpg"
            },
            {
                "id": "Ziz25",
                "title": null,
                "description": null,
                "datetime": 1357856394,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 919391,
                "views": 135493,
                "bandwidth": 124571044763,
                "link": "http://i.imgur.com/Ziz25.jpg"
            },
            {
                "id": "9tzW6",
                "title": null,
                "description": null,
                "datetime": 1357856385,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 655028,
                "views": 135063,
                "bandwidth": 88470046764,
                "link": "http://i.imgur.com/9tzW6.jpg"
            },
            {
                "id": "dFg5u",
                "title": null,
                "description": null,
                "datetime": 1357856378,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 812738,
                "views": 134704,
                "bandwidth": 109479059552,
                "link": "http://i.imgur.com/dFg5u.jpg"
            },
            {
                "id": "oknLx",
                "title": null,
                "description": null,
                "datetime": 1357856338,
                "type": "image/jpeg",
                "animated": false,
                "width": 1749,
                "height": 2332,
                "size": 717324,
                "views": 32938,
                "bandwidth": 23627217912,
                "link": "http://i.imgur.com/oknLx.jpg"
            },
            {
                "id": "OL6tC",
                "title": null,
                "description": null,
                "datetime": 1357856321,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 1443262,
                "views": 32346,
                "bandwidth": 46683752652,
                "link": "http://i.imgur.com/OL6tC.jpg"
            },
            {
                "id": "cJ9cm",
                "title": null,
                "description": null,
                "datetime": 1357856330,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 544702,
                "views": 31829,
                "bandwidth": 17337319958,
                "link": "http://i.imgur.com/cJ9cm.jpg"
            },
            {
                "id": "7BtPN",
                "title": null,
                "description": null,
                "datetime": 1357856369,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 844863,
                "views": 31257,
                "bandwidth": 26407882791,
                "link": "http://i.imgur.com/7BtPN.jpg"
            },
            {
                "id": "42ib8",
                "title": null,
                "description": null,
                "datetime": 1357856424,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 905073,
                "views": 30945,
                "bandwidth": 28007483985,
                "link": "http://i.imgur.com/42ib8.jpg"
            },
            {
                "id": "BbwIx",
                "title": null,
                "description": null,
                "datetime": 1357856360,
                "type": "image/jpeg",
                "animated": false,
                "width": 1749,
                "height": 2332,
                "size": 662413,
                "views": 30107,
                "bandwidth": 19943268191,
                "link": "http://i.imgur.com/BbwIx.jpg"
            },
            {
                "id": "x7b91",
                "title": null,
                "description": null,
                "datetime": 1357856406,
                "type": "image/jpeg",
                "animated": false,
                "width": 1944,
                "height": 2592,
                "size": 618567,
                "views": 29259,
                "bandwidth": 18098651853,
                "link": "http://i.imgur.com/x7b91.jpg"
            }
        ]
    },
    "success": true,
    "status": 200
}               
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用curl指令測試REST服務]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command/"/>
    <updated>2013-08-14T11:26:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/CURL">cURL</a> 是很方便的Rest客戶端，可以很方便的完成許多Rest API測試的需求，甚至，如果是需要先登入或認證的rest api，也可以進行測試，利用<em>curl</em>指令，可以送出HTTP GET, POST, PUT, DELETE, 也可以改變 HTTP header來滿足使用REST API需要的特定條件。</p>

<p><a href="http://curl.haxx.se/docs/manpage.html">curl的參數很多</a>，這邊僅列出目前測試REST時常用到的:</p>

<pre><code>-X/--request [GET|POST|PUT|DELETE|…]  使用指定的http method發出 http request
-H/--header                           設定request裡的header
-i/--include                          顯示response的header
-d/--data                             設定 http parameters 
-v/--verbose                          輸出比較多的訊息
-u/--user                             使用者帳號、密碼
-b/--cookie                           cookie  
</code></pre>

<blockquote><p>linux command line 的參數常，同一個功能常會有兩個功能完全相同參數，一個是比較短的參數，前面通常是用<code>-</code>(一個<code>-</code>)導引符號，另一個比較長的參數，通常會用<code>--</code>(兩個<code>-</code>)導引符號</p>

<p>在curl 使用說明</p>

<pre><code>  -X, --request COMMAND  Specify request command to use
      --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
      --retry NUM   Retry request NUM times if transient problems occur
      --retry-delay SECONDS When retrying, wait this many seconds between each
      --retry-max-time SECONDS  Retry only within this period&gt;
</code></pre>

<p>參數<code>-X</code>跟<code>--request</code>兩個功能是一樣的，所以使用時
<code>ex:curl -X POST http://www.example.com/</code> 跟 <code>curl --request POST http://www.example.com/</code> 是相等的功能</p></blockquote>

<h4>GET/POST/PUT/DELETE使用方式</h4>

<p>-X 後面加 http method，</p>

<pre><code>curl -X GET "http://www.rest.com/api/users"
curl -X POST "http://www.rest.com/api/users"
curl -X PUT "http://www.rest.com/api/users"
curl -X DELETE "http://www.rest.com/api/users"
</code></pre>

<p>url要加引號也可以，不加引號也可以，如果有非純英文字或數字外的字元，不加引號可能會有問題，如果是網碼過的url，也要加上引號</p>

<h4>HEADER</h4>

<p>在http header加入的訊息</p>

<pre><code>curl -v -i -H "Content-Type: application/json" http://www.example.com/users
</code></pre>

<h4>HTTP Parameter</h4>

<p>http參數可以直接加在url的query string，也可以用<code>-d</code>帶入參數間用<code>&amp;</code>串接</p>

<pre><code>curl -X POST -d "param1=value1&amp;param2=value2"
curl -X POST -d "param1=a 0space"     
# "a space" url encode後空白字元會編碼成'%20'為"a%20space"，編碼後的參數可以直接使用
curl -X POST -d "param1=a%20space"     
</code></pre>

<h4>post json 格式得資料</h4>

<p>如同時需要傳送request parameter跟json，request parameter可以加在url後面，json資料則放入<code>-d</code>的參數，然後利用單引號將json資料含起來(如果json內容是用單引號，-d的參數則改用雙引號包覆)，header要加入"Content-Type:application/json"跟"Accept:application/json"</p>

<pre><code>curl http://www.example.com?modifier=kent -X PUT -i -H "Content-Type:application/json" -H "Accept:application/json" -d '{"boolean" : false, "foo" : "bar"}'
# 不加"Accept:application/json"也可以
curl http://www.example.com?modifier=kent -X PUT -i -H "Content-Type:application/json" -d '{"boolean" : false, "foo" : "bar"}'
</code></pre>

<h4>需先認證或登入才能使用的service #####</h4>

<p>許多服務，需先進行登入或認證後，才能存取其API服務，依服務要求的條件，的curl可以透過cookie，session或加入在header加入session key，api key或認證的token來達到認證的效果。</p>

<p>session 例子:</p>

<p>後端如果是用session記錄使用者登入資訊，後端會傳一個 session id給前端，前端需要在每次跟後端的requests的header中置入此session id，後端便會以此session id識別前端是屬於那個session，以達到session的效果</p>

<pre><code>curl --request GET 'http://www.rest.com/api/users' --header 'sessionid:1234567890987654321'
</code></pre>

<p>cookie 例子</p>

<p>如果是使用cookie，在認證後，後端會回一個cookie回來，把該cookie成檔案，當要存取需要任務的url時，再用<code>-b cookie_file</code> 的方式在request中植入cookie即可正常使用</p>

<pre><code># 將cookie存檔
curl -i -X POST -d username=kent -d password=kent123 -c  ~/cookie.txt  http://www.rest.com/auth
# 載入cookie到request中 
curl -i --header "Accept:application/json" -X GET -b ~/cookie.txt http://www.rest.com/users/1
</code></pre>

<h4>檔案上傳</h4>

<pre><code>curl -i -X POST -F 'file=@/Users/kent/my_file.txt' -F 'name=a_file_name'
</code></pre>

<p>這個是透過 HTTP multipart POST 上傳資料， <code>-F</code> 是使用http query parameter的方式，指定檔案位置的參數要加上<code>@</code></p>

<h2>相關資源    </h2>

<ul>
<li><a href="http://linux.about.com/od/commands/l/blcmdl1_curl.htm">http://linux.about.com/od/commands/l/blcmdl1_curl.htm</a> - curl 手冊</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restful Web Security]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/07/29/restful-web-security/"/>
    <updated>2013-07-29T10:36:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/07/29/restful-web-security</id>
    <content type="html"><![CDATA[<p>Restful Web Service 常用的保全方式有：</p>

<ol>
<li>session and cookies</li>
<li>HTTP 標準認證/摘要驗證(digest authentication)</li>
<li>API key</li>
</ol>


<p>各有各的優缺點:
採用 session 記錄 user 的認證的方式，有違 rest stateless 的特性, cookies 只有 http 能用，而且測試上沒header來的方便。而 http 認證，是透過跳出的一認證的視窗的方式，也不是很適合在沒有browser下做操作，所以比較好的方式是採用 API key的方式來處理認證及保全(security)的問題。</p>

<p>API key是指，由server產生一個包含 username password跟相關資料的 token，然後在<em>每個</em> request的 parameter 或 header 中置入這個 token 讓 server 判斷 request 是否合法。</p>

<blockquote><p>token 放在 query string(request parameter)的方式
這種方式的優點是方便，直覺，容易測試，但缺點是每個url裡都會多出一堆資訊在url，而且會有安全跟cache的問題
建議 token 放header會比較好</p></blockquote>

<p>要做權限管控，必須先了解需要管控的資源 (target resources) 有那些, 可要管控的等級，管控等級通常取決於登入時的角色，管控的等級大概如下:</p>

<ol>
<li>Application Level : 是否存取資源, ex: login user 才能存取或 anonymous 就可存取 (authentication &amp; authorization)</li>
<li>Module Level      : 是否以進入某個功能模組,底下可能會有許多子功能模組</li>
<li>Function Level    : 是否能使用對某個表單或單一功能, ex: 使用者管理</li>
<li>Instance Level    : 特定資料列的存取權限, ex: 系統中有10個使用者，但只有對其中 3 個有存取權限</li>
<li>Field Level       : 只針對特定欄位, ex: 使用者資料表中的敏感欄位(ex: 薪資) 只有特定人員可以存取</li>
</ol>


<p>1 ~ 3 是屬於功能性的權限管控</p>

<p>4 ~ 5 是屬於資料的權限管控</p>

<p>選定了要採用要在每個 header 置入 token 的方式後，再來就是設計要放入什麼樣的 token 在 header 當作辨識的依據()，以及採用什麼方式保護及驗証 toekn 的安全性及有效性。</p>

<p>keyed-HMAC</p>

<h2>Resources</h2>

<ul>
<li><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html</a></li>
<li><a href="http://devcenter.kinvey.com/rest/guides/security">http://devcenter.kinvey.com/rest/guides/security</a></li>
<li><a href="http://www.infoq.com/cn/news/2010/01/rest-api-authentication-schemes">http://www.infoq.com/cn/news/2010/01/rest-api-authentication-schemes</a></li>
<li><p><a href="http://www.baeldung.com/security-spring">http://www.baeldung.com/security-spring</a></p>

<h4>deprecate</h4></li>
<li><p><a href="http://appsandsecurity.blogspot.tw/2011/04/rest-and-stateless-session-ids.html">http://appsandsecurity.blogspot.tw/2011/04/rest-and-stateless-session-ids.html</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL encoding]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/25/url-encoding/"/>
    <updated>2013-06-25T11:01:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/25/url-encoding</id>
    <content type="html"><![CDATA[<p><code>https://bob:bobby@www.lunatech.com:8080/file;p=1?q=2#third</code></p>

<ul>
<li>Scheme           : https</li>
<li>User             : bob</li>
<li>Password         :bobby</li>
<li>Host address     : www.lunatech.com</li>
<li>Port             : 8080</li>
<li>Path             : /file</li>
<li>Path parameters  : p=1</li>
<li>Query parameters : q=2</li>
<li>Fragment         : third</li>
</ul>


<h6>Path parameters</h6>

<p>Path parameters 又叫 Matrix Parameters, 每個 <em>path segment</em> 可以有自已的 Matrix Parameters，這在 Restful style 的設計上有時會很有用。</p>

<h6>Fragment</h6>

<p>Fragment 是用來指出整份 URL resrouce 的某一特定部份，在網頁設計上是用來做定位用的錨點 (anchor)</p>

<h4>保留字處理</h4>

<p>path 跟 query string 對保留字的處理方式不一樣，所以，在做編解碼時，要分開處理</p>

<p>ex:
空白字元在 path 會被編成 %20 , '+' 會被編成 '_' ,但在 query string 空白字元會被編成 '+' or '%20', '+' 會被編成 '%2B'</p>

<p>所以，如果有一個<code>blue+light blue</code>同時放在 path 跟 query string，那結果會是這樣</p>

<pre><code>http://example.com/blue+light%20blue?blue%2Blight+blue
</code></pre>

<h4>編碼、中文與 Unicode</h4>

<p>RFC 1738 並沒有規定要用什麼樣的編碼，所以，一般會在 HTTP header 指定 encoding 或採用 HTML page encoding</p>

<h2>Resource</h2>

<ul>
<li><a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding</a> - What every web developer must know about URL encoding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API Design]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design/"/>
    <updated>2013-06-04T09:58:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design</id>
    <content type="html"><![CDATA[<h2>Method</h2>

<p>POST : 操作是 nont-idempotent(非幕等)</p>

<p>GET, PUT, DELETE  : 操作是 idempotent(幕等)</p>

<p>idempotent 是指執行的結果不依賴於執行的次數，ex: <code>count=1+2</code> 是 idempotent，因為不管執行幾次，都不會影響到結果，但 <code>count++</code> 就是 nont-idempotent，因為執行的次數會影響結果。通常，GET是idempotent，POST是non-idemptent這沒什麼爭議，但PUT的操作是幕等，就常常令人感到疑惑，
目前看到最好的解釋是，PUT是用來建立或取代資源(PUT不是只用於update，也可以create)
ex: <code>PUT www.api.com/blogs/blog-123</code> 這個操作不管執行幾次，應該都是用來建立或更新 id 為<em>blog-123</em> 的blog
相對於<code>POST www.api.com/blogs</code>，則是每次執行都會產生一篇新的blog。</p>

<p>另外DELETE操作是idempotent是指，不論執行幾次，都可以執行刪除的動作，所以就算資源不存在，也不應丟出異常，以避免前端double submit時，第二個submit造成失敗</p>

<h2>GET</h2>

<p>GET method用來取得一筆或多的資源，如果是多筆資源，還可以加入分頁，過濾等資訊，也可在header傳入分頁的links，ex:'first', 'last', 'next' and 'prev'</p>

<ul>
<li>GET     http://www.example.com/orders                           取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345                     取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/orders/12345/items               取得訂單編號為 12345 的訂單下的所有訂單項目</li>
<li>GET     http://www.example.com/orders/12345/oitems/678          取得訂單編號為 12345 的訂單下的訂單項目 678</li>
<li>GET     http://www.example.com/orders?customer=kent             取得客戶 kent 的所有訂單</li>
</ul>


<h5>status code</h5>

<ul>
<li>200 (OK)            順利取得資源</li>
<li>400 (BAD REQUEST)   無法順利取得資訊，通常是參數有問題或某個查詢條件失效</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>POST</h3>

<p>POST method用來建立新資源，建立完成資源後，通常是回應 201(CREATED) 的狀態碼，而且建立的新資源的 uri link 會放在 HEAD (不是response body)</p>

<pre><code>POST http://www.example.com/order
</code></pre>

<p>response</p>

<pre><code>200 OK
Content-Type: application/json
Location: http://www.example.com/order/123  
</code></pre>

<blockquote><p>POST, PUT, PATCH 出去的資料應該儘量採用json，而不是Request Parameter(form submit)的格式
而且header必須加上 <code>application/json</code> 否則就要丟出 HTTP 405 Unsupported Media Type的error</p></blockquote>

<h5>status code</h5>

<ul>
<li>201 (CREATED)       成功建立新資源</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>PUT</h3>

<p>POST method 用來更新資源，</p>

<p>如果 resource 的 id，是由前端決定，而不是後端，那麼此時 PUT 也可以拿用做建立新資源的動作</p>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個status code，response裡會有異動後的內容</li>
<li>201 (CREATED)       成功建立新資源</li>
<li>204 (No Content)    更新成功，如果使用這個status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>DELETE</h3>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個 status code，response裡會有異動後的內容</li>
<li>204 (No Content)    更新成功，如果使用這個 status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在，連續呼叫兩次相同的 delete，會傳回 404</li>
</ul>


<h4>命名規則</h4>

<p>資源命名應為<strong>複數名詞</strong>，不論是 GET, POST, PUT, DELETE 應該都要用<strong>複數名詞</strong>來命名，如果是要取得單筆資訊，
則是在<strong>複數名詞</strong>的資源後接上該資源的indentity</p>

<p>如果是複合字，應該用<code>-</code>隔開，而不是用 camel style : ex: 採用 <code>hello-world</code> 而非 <code>helloWorld</code></p>

<ul>
<li>GET     http://www.example.com/orders             取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345       取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/users?name=kent    取得使用者 kent 的資訊</li>
<li>PUT     http://www.example.com/users/kent         更新使用者 kent</li>
<li>POST    http://www.example.com/users/kent         新增使用者 kent</li>
<li>DELETE  http://www.example.com/users/kent         刪除使用者 kent</li>
</ul>


<p>所以，一般來說，只有兩種 url 的定義方式</p>

<pre><code>GET | PUT | DELETE  http://www.example.com/orders/{id}
POST                http://www.example.com/orders
</code></pre>

<blockquote><p>資源 id 當識別會比用name來的好，因為名稱可能會異動，如果要用名稱，應該是類似查詢參數的用法 /users?name=kent
另外，用id也可以避免名稱衝突ex: orders/new 如果這邊是採用名稱，就不易辨識這個new是指新的order，還是有張order名稱為<em>new</em></p></blockquote>

<h4>輔助用字</h4>

<ul>
<li>search 搜尋，如果有時就是做搜尋當resource最直覺，就用吧，以名詞命規的規格，還是可以有例外的</li>
<li>filter 過濾用</li>
<li>page   分頁用</li>
<li>sort   排序用，可以用<code>-</code>表示昇冪, ex: sort=-age 由大到小排序，sort=age 由小到大排序</li>
<li>fields 用來指定後端只傳合那些欄位  ex: fields=id,name,address</li>
<li>embed  用來指定後端傳合的部份是不是包含 detail，有些資料是master/detail的關係，用embed可以決定要不要傳回 detail</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a> - HTTP 狀態碼</li>
<li><a href="http://www.restapitutorial.com/lessons/httpmethods.html">http://www.restapitutorial.com/lessons/httpmethods.html</a>  - RESTful Tutorial</li>
<li><a href="http://blog.2partsmagic.com/restful-uri-design/">http://blog.2partsmagic.com/restful-uri-design/</a> - rest 命名規格</li>
<li><a href="http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs">http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs</a> - 如何避免用動詞命名
件</li>
<li><a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel">http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel</a> - 設計Restful API 相當不錯的參考資料    ，內容很全面，方方面面都有提到</li>
<li>一些流行的 Rest API

<ol>
<li> <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html">http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html</a> - Amazon 的 REST API文件</li>
<li> <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list">https://dev.twitter.com/docs/api/1.1/get/lists/list</a> - twitter 的 REST API文件</li>
<li> <a href="https://developers.facebook.com/docs/reference/api/">https://developers.facebook.com/docs/reference/api/</a> - FaceBook 的 REST API文件</li>
<li> <a href="https://developer.linkedin.com/apis">https://developer.linkedin.com/apis</a> - linkedin 的 REST API文件</li>
<li> <a href="https://developer.paypal.com/webapps/developer/docs/api/">https://developer.paypal.com/webapps/developer/docs/api/</a> - paypal  的 REST API文</li>
</ol>
</li>
<li><a href="http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a> - auth token的設計</li>
</ul>

]]></content>
  </entry>
  
</feed>
