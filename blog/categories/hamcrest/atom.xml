<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hamcrest | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/hamcrest/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-01-29T18:10:22+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hamcrest 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/hamcrest_101/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/hamcrest_101</id>
    <content type="html"><![CDATA[<h4>Matcher</h4>

<p>實作這個<a href="http://grepcode.com/file/repo1.maven.org/maven2/org.hamcrest/hamcrest-api/1.0/org/hamcrest/Matcher.java?av=f" title="http://grepcode.com/file/repo1.maven.org/maven2/org.hamcrest/hamcrest-api/1.0/org/hamcrest/Matcher.java?av=f">Matcher</a>以接受各式各樣格式的參數進行比對。
一般Unit Test的extension
framework都會實作自己的Matcher，並且提供Matcher的factory
methods或factory class。</p>

<h4>Description</h4>

<p>透過<a href="http://grepcode.com/file/repo1.maven.org/maven2/org.hamcrest/hamcrest-api/1.0/org/hamcrest/Description.java#Description" title="http://grepcode.com/file/repo1.maven.org/maven2/org.hamcrest/hamcrest-api/1.0/org/hamcrest/Description.java#Description">Description</a>class讓test
results更具可讀性。</p>

<p>在eclipse的static import favorite設定一下幾個factory class即可</p>

<p>```</p>

<pre><code>org.hamcrest.Matchers.*
</code></pre>

<p>```</p>

<p>有些method不能直接使用，要給予明確的型別資訊，像這樣</p>

<p>```</p>

<pre><code>assertThat(data, Matchers.&lt;MyClass&gt;iterableWithSize(1));
</code></pre>

<p>```</p>

<h3>Junit &amp; Hamcrest</h3>

<p>Junit目前(4.8.x版)對Hamcrest有相容性的依賴，無法使用Hamcrest
1.1以上的版本，但可以透過引用<code>unit-dep</code>然後把hamcrest-core的dependency結移除</p>

<p>```</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit-dep&lt;/artifactId&gt;
    &lt;version&gt;4.8.2&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
            &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
</code></pre>

<p>```</p>

<p>移除後，用下面的設定即可使用1.1以上的hamcrest</p>

<p>```</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit-dep&lt;/artifactId&gt;
    &lt;version&gt;4.8.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
    &lt;artifactId&gt;hamcrest-library&lt;/artifactId&gt;
    &lt;version&gt;1.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>```</p>

<blockquote><p>junit 4.11後已經從程式碼移除對hamcrest的依賴了，可以直接用 <code>&lt;artifactId&gt;junit&lt;/artifactId&gt;</code> 而不需用  <code>&lt;artifactId&gt;junit-dep&lt;/artifactId&gt;</code></p></blockquote>

<h3>Matchers</h3>

<p>以下列出幾個比較特別的Matcher</p>

<ol>
<li>describedAs()</li>
<li>either()</li>
<li>both()</li>
<li>emptyIterable()</li>
<li>emptyArray()</li>
<li>eventFrom()</li>
<li>hasEntry()</li>
<li>hasItem()</li>
<li>hasItemInArray()</li>
<li>hasItems()</li>
<li>hasProperty</li>
<li>hasXPath()</li>
<li>hasSize()</li>
<li>hasToString()</li>
<li>isIn()</li>
<li>isOneOf()</li>
<li>nullValue()</li>
<li>samePropertyValuesAs()</li>
<li>typeCompatibleWith()</li>
</ol>


<p>日期處理？</p>

<h3>Hamcrest &amp; Android</h3>

<p>Hamcreate(1.3-R.C2)有兩個包裝方式，一個是
all-in-one的jar，一個是lib跟core分開的jars，不論那一種格式，丟到android的開發環境，都會在compile成dalvik版本時發生以下的錯誤：</p>

<p>hamcreat-all.jar的錯誤是JFlexLexer不能被compile成dalvik版的</p>

<p><code>
UNEXPECTED TOP-LEVEL EXCEPTION:
com.android.dx.cf.code.SimException: local variable type mismatch: attempt to set or access a value of type java.lang.Object using a local variable of type int. This is symptomatic of .class transformation tools that ignore local variable information.
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.BaseMachine.throwLocalMismatch(BaseMachine.java:550)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.Simulator$SimVisitor.visitLocal(Simulator.java:570)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.BytecodeArray.parseInstruction(BytecodeArray.java:481)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.Simulator.simulate(Simulator.java:99)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.Ropper.processBlock(Ropper.java:684)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.Ropper.doit(Ropper.java:639)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.code.Ropper.convert(Ropper.java:252)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.dex.cf.CfTranslator.processMethods(CfTranslator.java:252)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.dex.cf.CfTranslator.translate0(CfTranslator.java:131)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.dex.cf.CfTranslator.translate(CfTranslator.java:85)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.processClass(Main.java:369)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.processFileBytes(Main.java:346)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.access$400(Main.java:59)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main$1.processFileBytes(Main.java:294)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.direct.ClassPathOpener.processArchive(ClassPathOpener.java:244)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.direct.ClassPathOpener.processOne(ClassPathOpener.java:130)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.cf.direct.ClassPathOpener.process(ClassPathOpener.java:108)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.processOne(Main.java:313)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.processAllFiles(Main.java:233)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.dx.command.dexer.Main.run(Main.java:185)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at java.lang.reflect.Method.invoke(Method.java:597)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.ide.eclipse.adt.internal.build.DexWrapper.run(DexWrapper.java:179)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.ide.eclipse.adt.internal.build.BuildHelper.executeDx(BuildHelper.java:585)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at com.android.ide.eclipse.adt.internal.build.builders.PostCompilerBuilder.build(PostCompilerBuilder.java:490)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:629)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:172)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:203)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:255)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:258)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:311)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:343)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:242)
[2011-04-12 10:16:57 - Android-libmpg_Test] Dx  at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
...at bytecode offset 0000001b
locals[0000]: Lorg/hamcrest/generator/qdox/parser/impl/JFlexLexer;
locals[0001]: I
locals[0002]: [C
locals[0003]: [C
locals[0004]: [I
locals[0005]: [I
locals[0006]: &lt;invalid&gt;
locals[0007]: &lt;invalid&gt;
locals[0008]: &lt;invalid&gt;
locals[0009]: &lt;invalid&gt;
locals[000a]: &lt;invalid&gt;
locals[000b]: &lt;invalid&gt;
locals[000c]: &lt;invalid&gt;
locals[000d]: &lt;invalid&gt;
locals[000e]: &lt;invalid&gt;
locals[000f]: &lt;invalid&gt;
locals[0010]: &lt;invalid&gt;
stack[top0]: [B
...while working on block 001b
...while working on method yylex:()I
...while processing yylex ()I
...while processing org/hamcrest/generator/qdox/parser/impl/JFlexLexer.class
</code></p>

<p>而 hamcrest-core-1.3.RC2.jar + hamcrest-library-1.3.RC2.jar 版的則是</p>

<p><code>
The error you get in Android ADK is:-
Error generating final archive: duplicate entry: LICENSE.txt
</code></p>

<p>最簡單的方式就是core +
lib這版的中其一個LICENSE.txt刪掉即可，如果jar裡沒有LICENSE.txt的會有版權問題，可以再把兩個jar壓縮成一個jar，保留一個LICENSE.txt即可。
處理完後，不會像官版的hamcreat-all.jar有JFlexLexer錯誤的錯誤，那個JFlexLexer好像是<a href="http://code.google.com/p/hamcrest/wiki/Tutorial#Sugar_generation" title="http://code.google.com/p/hamcrest/wiki/Tutorial#Sugar_generation">Matcher的包裝工具</a>用到的class，可有可無。</p>

<p>有個功能跟hamcrest很像，但api比較直覺的assertion framework - <a href="http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module" title="http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module">FEST
assert</a></p>

<h1>Resources</h1>

<ul>
<li><a href="http://code.google.com/p/hamcrest/" title="http://code.google.com/p/hamcrest/">hamcrest
home</a></li>
<li><a href="http://code.google.com/p/hamcrest-text-patterns/" title="http://code.google.com/p/hamcrest-text-patterns/">http://code.google.com/p/hamcrest-text-patterns/</a></li>
<li><a href="http://joe.truemesh.com/blog/000511.html" title="http://joe.truemesh.com/blog/000511.html">Flexible JUnit assertions with assertThat() by
Hamcrest</a></li>
<li><a href="http://code.google.com/p/hamcrest/wiki/Tutorial" title="http://code.google.com/p/hamcrest/wiki/Tutorial">official
tutorial</a></li>
<li><a href="http://www.jeviathon.com/2010/11/latest-and-greatest-junit-features.html" title="http://www.jeviathon.com/2010/11/latest-and-greatest-junit-features.html">The latest and greatest JUnit features... expand your
toolset</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
