<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: roboguice | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/roboguice/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-01-01T17:03:21+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RoboGuice 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/roboguice_101/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/roboguice_101</id>
    <content type="html"><![CDATA[<p>以下的內容僅適用於RoboGuice 2.X</p>

<p>RoboGuice是在android使用google
guice最簡單的方式，而且，它還額外提供<code>@InjectView</code>,<code>@InjectResource</code>可以將元件或資料直接注入RoboActivity中.</p>

<h5>設定Activity使用RoboActivity</h5>

<p>原本的HelloAndroidActivity是繼承Activity，為了讓Activity可以被自動injected，HelloAndroidActivity需改繼承自RoboActivity</p>

<p>```</p>

<pre><code>public class HelloAndroidActivity extends RoboActivity {
 
    private static String TAG = "myapp";
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }
}
</code></pre>

<p>```</p>

<h5>建立view元件(button)</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    &gt;
&lt;TextView  
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content" 
    android:text="@string/hello"
    /&gt;
&lt;!-- 新增一個button的view元件，並將id設定為MyButton --&gt;    
&lt;Button android:id="@+id/MyButton" android:text="Button" android:layout_width="wrap_content" android:layout_height="wrap_content"&gt;&lt;/Button&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>```</p>

<h5>將view元件(button)注入Activity中</h5>

<p>```</p>

<pre><code>public class HelloAndroidActivity extends RoboActivity {
 
    @InjectView(R.id.MyButton)
    Button button;
 
    private static String TAG = "myapp";
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i(TAG, "onCreate");
        setContentView(R.layout.main);
        button.setText("Injected button");
    }
}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>@InjectView(R.id.MyButton)
Button button;
</code></pre>

<p>```</p>

<p>宣告一個button並將常常xml裡的MyButton注入這個button
instance.上面的動作，等效於傳統的<code>findViewById()</code> method</p>

<p>```</p>

<pre><code>Button button;
@Override
public void onCreate(Bundle savedInstanceState) {
 button = (Button) findViewById(R.id.MyButton); 
}
</code></pre>

<p>```</p>

<p>這樣設定後，執行android application就可以看到MyButton被注入</p>

<h3>InjectExtra</h3>

<p>```
public class MyActivity extends RoboActivity {</p>

<pre><code>@InjectExtra("foo")
private int myData; // 效果等同於 myData = getIntent.getIntExtra("foo", 0)
</code></pre>

<p> </p>

<pre><code>@InjectExtra(value="bar", optional=true)
private String myData2; // optional如果=true，那intent中不見得要含包bar，但如果為false，intent沒有包含bar，則會出exception (預設值為false)
</code></pre>

<p>}
}
```</p>

<h2>Resource</h2>

<ul>
<li><a href="http://code.google.com/p/roboguice/" title="http://code.google.com/p/roboguice/">roboguice官網</a></li>
<li><a href="http://code.google.com/p/roboguice/wiki/ProvidedInjections" title="http://code.google.com/p/roboguice/wiki/ProvidedInjections">ProvidedInjections</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
