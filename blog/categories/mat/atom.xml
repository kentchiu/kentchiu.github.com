<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mat | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/mat/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-23T12:25:56+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM 記憶體調校]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/05/05/jvm_profile/"/>
    <updated>2012-05-05T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/05/05/jvm_profile</id>
    <content type="html"><![CDATA[<h4>JVM記憶體相關參數</h4>

<ul>
<li>Xmx                        : 記憶體使用上限</li>
<li>Xms                        : 記憶體使用下限(啟始值)</li>
<li>Xss                        : stack</li>
<li>server                     :</li>
<li>client                     :</li>
<li>XX:PermSize                : Perm for Permanent:編譯後的class，或固定的資料結構會佔用這一個值</li>
<li>XX:MaxGCPauseMillis        : GC暫停的毫秒數，這個只是"建議"GC而已，GC會儘量滿足這個建議值</li>
<li>XX:+ScavengeBeforeFullGC   :</li>
<li>XX:-UseParallelOldGC       :</li>
<li>XX:NewRatio                : sets the size of the old generation to three times the size of the new generation</li>
</ul>


<p><img src="http://blog.kent-chiu.com/images/2012-05-05/jvm_profile_01.jpg" alt="jvm_profile_01.jpg" /></p>

<p>圖片來源 :<a href="http://redstack.wordpress.com/">Red Stack's Blog</a></p>

<p>GC就是在空間不足時，將不活躍的物件從記憶體中移除，如果在GC時存活下的物件，就可能很上晉昇(Young
→ Old → Permanent)</p>

<ol>
<li>Permanent Generation:Old Generation進行GC(major GC or full
GC)後，如空間不夠，就會將Old
Generation活躍的物件(未被GC的)移到這區。建立越多的物件，此區域就要越大</li>
<li>Old Generation: 當Young Generation進行gc (minor
GC)後，空間仍舊不夠放新建立的物件時，會將Young Generation移到Old
Generation</li>
<li>New(Young) Generation():

<ol>
<li>to: Survivor space1(S1)
gc時,會將eden區未被gc的物件COPY到S1或S2區</li>
<li>from: Survivor space2(S2)
gc時,會將eden區未被gc的物件COPY到S1或S2區</li>
<li>eden: (伊甸) 看名字就知道是新生命(New
Object)誕生的地方,每new一個Object時會佔用這個區域，eden滿了，會引發gc
(minor GC)</li>
</ol>
</li>
</ol>


<p>Heap= Old Generation + New Generation</p>

<p>可以透過JDK內附的virtualVm來觀察jvm memory的使用情形</p>

<p><img src="http://blog.kent-chiu.com/images/2012-05-05/jvm_profile_02.png" alt="jvm_profile_02.png" /></p>

<h3>常用工具</h3>

<ol>
<li>jinfo</li>
<li>jmap</li>
<li>jstack</li>
<li>jstat</li>
<li>java.lang.management (API level)</li>
</ol>


<h2>Resources</h2>

<ul>
<li><a href="http://redstack.wordpress.com/2011/01/06/visualising-garbage-collection-in-the-jvm/" title="http://redstack.wordpress.com/2011/01/06/visualising-garbage-collection-in-the-jvm/">簡單而清楚的JVM
Memory教學</a></li>
<li><a href="http://www.infoq.com/cn/articles/cf-java-garbage-references" title="http://www.infoq.com/cn/articles/cf-java-garbage-references">infoQ中國站關於gc的文章(簡體中文)</a></li>
<li><a href="http://java.sun.com/docs/hotspot/gc/" title="http://java.sun.com/docs/hotspot/gc/">http://java.sun.com/docs/hotspot/gc/</a></li>
<li><a href="http://javarevisited.blogspot.com/2011/11/hotspot-jvm-options-java-examples.html" title="http://javarevisited.blogspot.com/2011/11/hotspot-jvm-options-java-examples.html">10 jvm options java developers should
know</a></li>
<li><a href="http://eclipse.org/mat/" title="http://eclipse.org/mat/">Eclipse MAT</a> -
這個比virtualVM更好用</li>
<li><a href="http://kohlerm.blogspot.com/2009/07/eclipse-memory-analyzer-10-useful.html" title="http://kohlerm.blogspot.com/2009/07/eclipse-memory-analyzer-10-useful.html">Eclipse
MAT使用的文章</a></li>
<li><a href="http://www.cubrid.org/blog/dev-platform/understanding-java-garbage-collection/" title="http://www.cubrid.org/blog/dev-platform/understanding-java-garbage-collection/">GC</a>

<ul>
<li>說明GC的機制及時機，有5種gc策略的說明</li>
</ul>
</li>
<li><a href="http://www.cubrid.org/blog/dev-platform/how-to-monitor-java-garbage-collection/" title="http://www.cubrid.org/blog/dev-platform/how-to-monitor-java-garbage-collection/">如何監控GC的教學</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
