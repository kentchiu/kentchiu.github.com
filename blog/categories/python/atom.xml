<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-06-27T09:37:56+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python type hint in IDEA]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea/"/>
    <updated>2013-12-28T12:09:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea</id>
    <content type="html"><![CDATA[<p>在現代的IDE中，程式碼自動完成(code assist or code complete)幾乎是必備的基本功能，這個功能在靜態功能型別的語言中，IDE通常可以很完全的運作；但是在動態型別的語言中，就常常沒辦法推斷出正確的型別了。
因為有的IDE從另外從程式碼外的其它地方(通常是註解)加入協助IDE做類型推斷(type infer)的動作。</p>

<p>IDEA的python plugin(或 pycharm)也是使用註解的做type hint來協助IDEA做類型推斷。如果是使用python3開發，那麼還可以用<a href="http://www.python.org/dev/peps/pep-3107/">PEP-3107</a>。
<em>PEP-3107</em>在語言的級別上加入了參數跟傳回值的型別，這樣IDE就有辦法做類型的推斷。</p>

<pre><code># 未採用PEP-3107的method宣告方式
def a_method(foo, bar) :
    return foobar;

# 採用PEP-3107的method宣告方式
def a_method(foo : TypeFoo, bar: TypeBar) -&gt; TypeFooBar
</code></pre>

<p>TypeFoo是參數foo的型別，TypeBar是參數bar的型別，而TypeFooBar則是 return value foobar的型別</p>

<p>但是以下幾種狀況是<em>PEP-3107</em>無法處理的:</p>

<ul>
<li>locale variable，如果 locale variable不是某個method的傳回值，那就沒有型別</li>
<li>field ，field也沒有型別</li>
<li>third party的lib，third party的lib寫法可能不是採用<em>PEP-3107</em>方式，所以ide也無法提供code complete</li>
</ul>


<p>計對這些狀況，可以用一開始提到的方式，套用特定的註解來協助IDE做類型推斷。</p>

<pre><code>r = praw.Reddit(user_agent='User-Agent: rbot/1.0 by draculacwg')
''':type: six.Subreddit ''' 
subreddit = r.get_subreddit(subreddits)
submissions = subreddit.get_new()
</code></pre>

<p>原來的<code>subreddit.get_new()</code>，原本沒有code complete，加入<code>''':type: six.Subreddit '''</code> 後，就會有code complete了</p>

<h4>IDEA 建議的type hinting 語法</h4>

<ul>
<li>Foo # Class Foo visible in the current scope</li>
<li>x.y.Bar # Class Bar from x.y module</li>
<li>Foo | Bar # Foo or Bar</li>
<li>(Foo, Bar) # Tuple of Foo and Bar</li>
<li>list[Foo] # List of Foo elements</li>
<li>dict[Foo, Bar] # Dict from Foo to Bar</li>
<li>T # Generic type (T-Z are reserved for generics)</li>
<li>T &lt;= Foo # Generic type with upper bound Foo</li>
<li>Foo[T] # Foo parameterized with T</li>
<li>(Foo, Bar) -> Baz # Function of Foo and Bar that returns Baz</li>
<li>list[dict[str, datetime]] # List of dicts from str to datetime (nested arguments)</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html">http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html</a> - pycharm 或 IDEA python plugin中 type hint的方式</li>
<li><a href="http://www.python.org/dev/peps/pep-0257/">http://www.python.org/dev/peps/pep-0257/</a> - PEP 257  : Docstring Conventions</li>
<li><a href="http://www.python.org/dev/peps/pep-3107/">http://www.python.org/dev/peps/pep-3107/</a> - PEP 3107 : python 3 中可用的類型註解</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/07/07/python-101/"/>
    <updated>2013-07-07T12:10:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/07/07/python-101</id>
    <content type="html"><![CDATA[<p>本文是初學 Python 遇到的一些問題留下的筆記:</p>

<p>一開始進入 Python 的世界，除了程式語言本身外還有許多基本的工具要先了解:</p>

<ul>
<li>Python 2 V.S Python 3 : python 語言的版本</li>
<li>easy_install V.S PIP : 套件安裝工具</li>
<li>virtualenv            : 虛擬工作環境</li>
</ul>


<h4>Python 2 V.S Python 3</h4>

<p>剛進行 Python 的世界，一開始就要面臨的抉擇，就是要用 Python 2 或 Python 3，因為是初學者，沒有任何包袱，當然是選 Python 3。 (也有人建議一律用2.7的語法撰寫，這樣可以同時相容於2跟3)</p>

<blockquote><p>Mac Os 10.8 (mountain lion)預裝的是 Python 2.7.2，要自行昇級成 Python 3.x (目前 2013/07/07 3.3.2是 release 版)
可以透過在 Mac OS 的terminal 下執行 <code>python -V</code> 取得版號</p></blockquote>

<h4>Easy_install V.S PIP</h4>

<p>一般的 lib 會提供 <code>python setup.py install</code></p>

<p>easy_install 跟 <a href="http://www.pip-installer.org/">pip</a> 兩者都是套件安裝工具， easy_install 沒有反安裝套件的功能，而 pip 有反安裝套件的功能，所以建議是裝pip</p>

<p>Mac Os 10.8 (mountain lion) 只有預裝 easy_install，要使用 pip，可以透過 easy_install 來安裝 pip
安裝 pip 的指令如下 <code>$ easy_install pip</code>，如果無法安裝的話，可以直接抓 source 下來裝
下載的url為 :</p>

<p>必須先安裝<a href="http://pythonhosted.org/setuptools/">setuptools</a></p>

<pre><code>$ curl -O https://bitbucket.org/pypa/setuptools/raw/0.8/ez_setup.py
$ python ez_setup.py --user 
</code></pre>

<p>才能再裝 pip</p>

<pre><code>$ curl -O https://pypi.python.org/packages/source/p/pip/pip-1.3.tar.gz
$ tar xzf pip-1.3.tar.gz
$ cd pip-1.3
$ sudo python setup.py install
</code></pre>

<p>裝完後檢查一下執行一下 <code>pip</code> 指令，如果不能執行，可能是Path沒設好,Path變數是在 <code>~/.bash_profile</code> 如果沒這個檔，可以自已新增一個</p>

<pre><code>export PATH=/System/Library/Frameworks/Python.framework/Versions/3.3/bin:/Users/kent/Library/Python/3.3/bin:$PATH
</code></pre>

<p>pip 的使用方式</p>

<pre><code>pip list   列出目前安裝的lib
pip search 搜尋lib
pip install 安裝lib   
</code></pre>

<p>ex:</p>

<pre><code>sudo pip install beautifulsoup4   # 安裝 beautifulsoup lib (一個 html parser)   
</code></pre>

<h4>Testing</h4>

<p>python的 test framework有好幾套，可以自行選擇適合的</p>

<ul>
<li>unittest 內建的，不用另外再抓lib</li>
<li>nosetest 可獨立執行某個 test method 或一整個 test suite 的功能</li>
<li>doctest  測試 python doc 的邏輯</li>
</ul>


<h4>初學者必備技能</h4>

<ul>
<li><p>python Interpreter (直譯器)
直譯式語言的優點就是會有直譯器可以用，在直譯器執行程式，可以立即得到執行的結果，在不了解API的用法時，我通常會在執譯器上先做測試，或者直接用 unittest 寫<em>Learning Test</em>。
平常沒事也可以掛著查 API doc</p></li>
<li><p>help([object])<br/>
列出說明，會說明該 object 有那些 methods 及使用方式</p></li>
<li>type(variable)
取得 object 的型別，撰寫弱型別語言最大的痛苦就是不知道變數是什麼型別，這 type 至少可以在runtime取得變數的型別</li>
<li>dir() 列出 object 內所有的 methods</li>
<li>pprint() 列出物件結構</li>
</ul>


<h2>Python Language</h2>

<h4>連算子</h4>

<ul>
<li>沒有增量 <code>++</code>，減量 <code>--</code> 運算子</li>
<li>+=，-= 這是合法的運算子</li>
<li>除法用<code>/</code> , 整數除法用 <code>//</code></li>
<li>一個<code>*</code>是乘，兩個<code>*</code>是幂(次方)英文為<em>power</em> <code>2 * 3 =6</code> , <code>2 ** 3 = 8</code></li>
</ul>


<h4>字串</h4>

<ul>
<li>字串可用單引號或雙引號，單引號較常用</li>
<li>字串前面加 <code>r</code> 表示為 raw string, ex: raw = r'this is a \t\n raw string'</li>
<li>字串前面加 <code>u</code> 表示為 unicode string, ex: ustring = u'A unicode \u018e string \xf1'</li>
</ul>


<h4>條件式結構</h4>

<pre><code> if speed &gt;= 80:
    print 'License and registration please'
    if mood == 'terrible' or speed &gt;= 100:
      print 'You have the right to remain silent.'
    elif mood == 'bad' or speed &gt;= 90:
      print "I'm going to have to write you a ticket."
      write_ticket()
    else:
      print "Let's try to keep it under 80 ok?"
</code></pre>

<p>較簡潔的語法</p>

<pre><code>if speed &gt;= 80: print 'You are so busted'
else: print 'Have a nice day'         
</code></pre>

<ul>
<li>python不是用 {}，也不是用begin/end，而是用縮排跟冒號<code>:</code>來做為區塊結構的範圍</li>
<li>不是用 <code>else if</code> 而是 <code>elif</code></li>
</ul>


<h4>List, Tuple, Dictionary</h4>

<pre><code>a = [ 1, 3.4, 'hello' ] # A list
b = ( 10, 20, 30 )      # A tuple   c = { 'a': 3, 'b': 42 } # A dictionary
</code></pre>

<p>list 可視為 array，語法如下</p>

<p>list = ['larry', 'curly', 'moe']
list = [1, 2, 3.4, 'hello', 'word'] # 可以放不同類型的內容</p>

<p>list 還有一個很特別的一點是可以直接在 list 裡執行 expression，叫 List Comprehensions,
語法為 [expr for var in list ]</p>

<p>範例:</p>

<pre><code>nums = [1, 2, 3, 4]
squares = [ n * n for n in nums ]   ## [1, 4, 9, 16]
</code></pre>

<p>tuple 很像 list，但tuple是不可變的，語法如下 <code>tuple = (1, 2, 'hi')</code></p>

<pre><code>a = ()      # 0-tuple (empty tuple) b = (item,) # 1-tuple (note the trailing comma) c = item,   # 1-tuple (note the trailing comma)tuple裡的值，可以容易再被獨立指派成變數，ex:
full_name = ('kent','chiu')
first_name, last_name = full_name # 把full_name的兩個值指派給 first_name, last_name
print(first_name)                 # kent
print(last_name)                  # chiu
</code></pre>

<h4>TBD</h4>

<ul>
<li>yield</li>
<li>decorator (@staticmethod)</li>
<li>list Ellipsis</li>
<li>class method (<code>__xxx__</code>)</li>
</ul>


<h2>學習資源</h2>

<ul>
<li><a href="https://developers.google.com/edu/python/">https://developers.google.com/edu/python/</a>  - Google Python Course</li>
<li><a href="http://getpython3.com/diveintopython3">http://getpython3.com/diveintopython3</a> - Dive Into Python 3 免費電子書</li>
<li><a href="http://chimera.labs.oreilly.com/books/1234000000754/index.html">http://chimera.labs.oreilly.com/books/1234000000754/index.html</a> - Test-Driven Web Development with Python</li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000393/index.html">http://chimera.labs.oreilly.com/books/1230000000393/index.html</a> - orally python cookbook (<em>問題-解法</em>導向線上電子書)</li>
<li><a href="http://docs.python.org/2/library/">http://docs.python.org/2/library/</a> - python 標準函式庫文件</li>
</ul>

]]></content>
  </entry>
  
</feed>
