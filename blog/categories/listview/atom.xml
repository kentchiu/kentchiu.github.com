<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: listview | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/listview/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-12-25T15:56:51+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ListView Style]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/listview_style/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/listview_style</id>
    <content type="html"><![CDATA[<p>以下用幾個簡單的步驟來美化ListView</p>

<h5>原始</h5>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/listview_style_002.png" alt="listview_style_002.png" /></p>

<h5>結果</h5>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/listview_style_003.png" alt="listview_style_003.png" /></p>

<h5>底圖</h5>

<p>如果沒什麼美工底子，可以到<a href="http://www.bgpatterns.com/" title="http://www.bgpatterns.com/">這個</a>網站產生一個簡易的底圖(下載後檔名改成app_bg.png)</p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/listview_style_001.png" alt="listview_style_001.png" /></p>

<h5>drawable/app_background.xm</h5>

<p>因為底圖不會剛好跟螢幕大小一樣，所以要透過bitmap讓底圖重覆</p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;bitmap xmlns:android="http://schemas.android.com/apk/res/android"
    android:src="@drawable/app_bg"
    android:tileMode="repeat" /&gt;
</code></pre>

<p>```</p>

<h5>values/styles.xml</h5>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;style name="app_theme" parent="android:Theme"&gt;
        &lt;item name="android:windowBackground"&gt;@drawable/app_background&lt;/item&gt;
        &lt;item name="android:listViewStyle"&gt;@style/TransparentListView&lt;/item&gt;
        &lt;item name="android:expandableListViewStyle"&gt;@style/TransparentExpandableListView&lt;/item&gt;
    &lt;/style&gt;
    &lt;style name="TransparentListView" parent="@android:style/Widget.ListView"&gt;
        &lt;item name="android:cacheColorHint"&gt;@android:color/transparent&lt;/item&gt;
    &lt;/style&gt;
    &lt;style name="TransparentExpandableListView" parent="@android:style/Widget.ExpandableListView"&gt;
        &lt;item name="android:cacheColorHint"&gt;@android:color/transparent&lt;/item&gt;
    &lt;/style&gt;
&lt;/resources&gt;
</code></pre>

<p>```</p>

<h5>AndroidManifest.xml</h5>

<p>```</p>

<pre><code>&lt;application android:theme="@style/app_theme"&gt;
</code></pre>

<p>```</p>

<h3>在eclipse預覽</h3>

<p>如果一切都很順利的話，可以用eclipse的layout
editor打開任一個activity，然後，右邊的theme可以看到剛剛新增的<code>app_theme</code>
可以看到底圖重覆的在activity的背景</p>

<p><img src="http://blog.kent-chiu.com/images/2012-03-20/listview_style_004.png" alt="listview_style_004.png" /></p>

<p>如果在eclipse看不到預覽，可以執著執行程式，看看emulator或device有沒有效果，或者試著重開eclipse可能就可以看到preview了</p>

<h1>Resource</h1>

<ol>
<li><a href="http://stackoverflow.com/questions/2706913/how-to-make-android-apps-background-image-repeat" title="http://stackoverflow.com/questions/2706913/how-to-make-android-apps-background-image-repeat">本文主要參考這邊</a></li>
<li><a href="http://androidblogger.blogspot.com/2009/01/how-to-have-tiled-background-cont.html" title="http://androidblogger.blogspot.com/2009/01/how-to-have-tiled-background-cont.html">http://androidblogger.blogspot.com/2009/01/how-to-have-tiled-background-cont.html</a>

<ul>
<li>如何設定底圖</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ListView]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/03/20/listview/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/03/20/listview</id>
    <content type="html"><![CDATA[<p>ListView是android裡一個很常用的元件，但他的使用上並不是那麼直接，而且有許多事項要去注意。</p>

<p>ListView元件被設計時，考慮到ListView主要是要來呈現許多類似的內容列表，但因為要運在手機上，所以
就算是有大量的內容，也不能影響到操作的效能。</p>

<p>基於以上原因，在使用ListView時的API時，有一些潛規則及patterns要遵守，當然，你也可以去hack這個行為，但
通常這樣做的後果，就是比較差的效能，以及可能會破壞一些本來可以跟ListView可以互動良好的機制。</p>

<p>建議在使用ListView前，先閱讀一下<a href="#resource" title="android:listview ↵">Resource</a>中Google
IO大會的相關資訊，可以避免掉很常見的陷阱</p>

<h4>Item Properties</h4>

<ul>
<li>enabled/disabled → make item selectabled/unselectabled</li>
<li><p>choice mode</p>

<ol>
<li>Single choice mode → getCheckedItemPositions()</li>
<li>Multiple choice mode → getCheckedItemPositions() or
getCheckedItemIds()</li>
</ol>
</li>
<li><p>focusabled</p>

<ol>
<li>true : select whole row</li>
<li>false : select component inside view</li>
</ol>
</li>
</ul>


<p>ListView的list
item預設的情況下，如果被clicked(selected)整個item會變highlight，但是如果list
item上有其他的元件，像是button，
就不會觸發到click事件(highlight的效果不見了)，如果要讓list
item變成clickable，那只需要將會載取fouce的元件(此到中的button)的<strong>focusable</strong>屬性設定成false,EX:<code>android:focusable=“false”</code>
這樣便可以恢復ListItem預設的click功能</p>

<h4>Headers And Footers</h4>

<ul>
<li>ListView.addHeaderView() called before setAdapter()</li>
<li>ListView.addFooterView() called before setAdapter()</li>
</ul>


<h4>List Selectors</h4>

<ul>
<li>Highlight selected item</li>
<li>Not Shown in touch mode (no selection in touch mode)</li>
<li>Shown behind list items → android:drawSelectOnTop=“true”</li>
</ul>


<h4>Transcript Mode</h4>

<p>當content changes的行為。</p>

<ol>
<li>disabled</li>
<li>normal</li>
<li>alwaysScoll</li>
</ol>


<p>TBD</p>

<h4>Stack Frame</h4>

<p>ListItem是由下而上成長</p>

<h1>View Recycler</h1>

<p>ListView是用來處理大量類似的資料，但是，如果資料量一次是一萬筆、十萬筆、甚至百萬筆時，勢必會造成記憶不足的錯誤，那麼，andoird如何有效的減少記憶體的使用呢？
所有GUI對像ListView這樣需要處理大量資料的元件，大多數的解決方式都是只針對顯示在畫面上的資料建立視覺化的元件，其他的部份不建立，這種方式常被稱View
Window (View Part)</p>

<p>```
比方說，畫面上一次最多只能顯示出5個list item，那麼android只需要建立5個相對的view，顯示item 1~5
 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0<br/>
|---------|</p>

<p>當使用者向上捲動時2個單位時，畫面也是只有5個相對的view，顯示item 3~7的內容
 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0</p>

<pre><code>|---------|
</code></pre>

<p>```</p>

<p>這樣的方式可以解決記憶體問題，但是如果當畫面從顯示
1~5，捲動到3~7時，1跟2是消失在畫面，而6跟7是出現在畫面的下面，如果只是單純的把1個2的view做destory()，6跟7做view的create()
，那會造成需要大量的建立/消滅物件的動作，這樣會消耗不少cpu資源，所以，android採用<strong>回收</strong>的機制來避免大量物件建立。</p>

<p>ListView的ListItem有一個特色，就是每個item
view大多長得差不多，只是顯示的內容不大一樣，所以，android用一個Recycler來重複使用畫面上的物件。</p>

<p>如果每個一item都是類似的layout，那麼回收再使用相對簡單，但layout不見得每個item都一樣，就要利用ViewType的輔助功能。</p>

<p>典型的BaseAdapter.getView()的實作。</p>

<p>```</p>

<pre><code>public class MyAdapter extends BaseAdapter {
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.item1, null);
            holder = new ViewHolder();
            holder.textView = (TextView)convertView.findViewById(R.id.text);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder)convertView.getTag();
        }
        holder.textView.setText(mData.get(position));
        return convertView;    
    }
}
</code></pre>

<p>```</p>

<p>但如果要用在不同layout的listview，那adapter要實作ViewType相關的methods。</p>

<ol>
<li>getViewTypeCount() 改寫這個method，決定總共會幾種類型的layout</li>
<li>getItemViewType(position) - 改寫這個method，每個layout的id</li>
<li>改寫getView，利用getViewTypeCount()，getItemViewType(position)決定view的外觀(layout)</li>
</ol>


<p>```</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder = null;
    int type = getItemViewType(position);
    System.out.println("getView " + position + " " + convertView + " type = " + type);
    if (convertView == null) {
        holder = new ViewHolder();
        switch (layoutType) {
            case TYPE_1:
                convertView = mInflater.inflate(layout1, null);
                break;
            case TYPE_2:
                convertView = mInflater.inflate(layout2, null);
                break;
        }
        convertView.setTag(holder);
    } else {
        holder = (ViewHolder)convertView.getTag();
    }
    holder.textView.setText(mData.get(position));
    return convertView;
}
</code></pre>

<p>```</p>

<p>不要這樣用<code>android:layout_height=“wrap_content”</code>，因為</p>

<ol>
<li>ListView每一個children的高度的一致的</li>
<li>Android Framework實際上只會量測前三個children</li>
</ol>


<p>如果資料量不大，就不要用ListView，ListView算是android
widget中比較複雜的元件，資料量少時，可以用LinerLayout加上動態產生view來模擬</p>

<h2>Do Not</h2>

<p>請不要試著這樣做，這樣做只是拿石頭砸自已的腳，並不會達到你想要的那個效果</p>

<ul>
<li>Local view cache</li>
<li>Accessing views from the adapter</li>
<li>Change convertView’s structure</li>
<li>Assumptions about getView calls</li>
</ul>


<p>基本上這些都是跟ViewItems回收機制有關，很多行為都讓你驚訝，怎麼跟想像的不一樣。</p>

<h2>Resource</h2>

<ul>
<li><a href="http://ysl-paradise.blogspot.com/2011/04/listview-i.html" title="http://ysl-paradise.blogspot.com/2011/04/listview-i.html">使用 ListView 元件時該注意的技巧 - I</a>
<a href="http://ysl-paradise.blogspot.com/2011/05/listview-ii.html" title="http://ysl-paradise.blogspot.com/2011/05/listview-ii.html">使用 ListView 元件時該注意的技巧 - II</a></li>
<li><a href="http://ysl-paradise.blogspot.com/" title="http://ysl-paradise.blogspot.com/">ysl的程式天堂</a>對ListView使用上的一些技巧的介紹</li>
<li><a href="http://android.amberfog.com/?p=296" title="http://android.amberfog.com/?p=296">http://android.amberfog.com/?p=296</a> - 解說Recycler的文章</li>
<li><a href="http://blog.jteam.nl/2009/09/17/exploring-the-world-of-android-part-2/" title="http://blog.jteam.nl/2009/09/17/exploring-the-world-of-android-part-2/">http://blog.jteam.nl/2009/09/17/exploring-the-world-of-android-part-2/</a> - 異步載入image到listview的教學</li>
<li>Google IO大會中關於listview的介紹(強烈建議至少看過一次)

<ol>
<li>Turbo-charge your UI: How to Make your Android UI Fast and
Efficient<a href="http://dl.google.com/io/2009/pres/Th_0230_TurboChargeYourUI-HowtomakeyourAndroidUIfastandefficient.pdf" title="http://dl.google.com/io/2009/pres/Th_0230_TurboChargeYourUI-HowtomakeyourAndroidUIfastandefficient.pdf">投影片</a>,<a href="http://www.youtube.com/watch?v=N6YdwzAvwOA&amp;feature=player_embedded" title="http://www.youtube.com/watch?v=N6YdwzAvwOA&amp;feature=player_embedded">影片</a> - adapter效能優化方式</li>
<li>The world of ListView
<a href="http://dl.google.com/googleio/2010/android-world-of-listview-android.pdf" title="http://dl.google.com/googleio/2010/android-world-of-listview-android.pdf">投影片</a>,<a href="http://www.youtube.com/watch?v=wDBM6wVEO70&amp;feature=player_embedded" title="http://www.youtube.com/watch?v=wDBM6wVEO70&amp;feature=player_embedded">影片</a> - ListView使用的注意事項(一堆要注意的陷阱)</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
