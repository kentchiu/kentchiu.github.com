<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: extjs | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/extjs/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-05-23T10:21:45+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EXT JS 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2012/11/15/extjs_101/"/>
    <updated>2012-11-15T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2012/11/15/extjs_101</id>
    <content type="html"><![CDATA[<p>本文章內容在說明<a href="http://www.sencha.com/" title="http://www.sencha.com/">EXT JS
4</a>的基本知識。”EXT JS
4”(以下簡稱ext)是<a href="http://www.sencha.com/" title="http://www.sencha.com/">Sencha</a>公司出的一套javascript
lib，有兩種授權模式，但基本上”就是要錢”。</p>

<p>從架構面來看ext可以分成兩部份，ext core跟ext UI componment，ext
core的部份是跟ui比較沒有關係的核心模型，像資料模型<a href="#model" title="extjs:extjs_101 ↵">Model</a>、後端的溝通處理用的<a href="#proxy" title="extjs:extjs_101 ↵">Proxy</a>、以及<a href="#plugin" title="extjs:extjs_101 ↵">Plugin</a>跟<a href="#extension" title="extjs:extjs_101 ↵">Extension</a>
。而ext UI
componment就是一堆UI元件。建議在看完簡單的文件，玩玩ext的hello
word程式後，可以先從內功(ext
core)下手，等內功任督二脈打通了後，外功(UI元件)再個個擊破就很快了。</p>

<h2>Data Package</h2>

<p>整個Data Package的主要觀念如下圖:</p>

<p><img src="http://blog.kent-chiu.com/images/2012-11-15/extjs_101_001.png" alt="extjs_101_001.png" /></p>

<h3>Model</h3>

<p>Model就是資料模型，像User的model，就是具有username, password,
email,….這些屬性(圖中的Field)的資料模型，
模型的驗証邏輯(圖中的Validation)及與其他模組關聯(Association)。</p>

<h5>Validation</h5>

<p>可以是單位欄位性質得欄位型態，內容，長度…驗証，也可以是同一個model裡欄位與欄位間關係的驗証，甚至少
Business Logic的驗証。</p>

<p>過於複雜的驗証，最後再後端處理後，再送回前端</p>

<h3>Proxy</h3>

<p>Proxy負看將資料載入model或儲存model的資料。可分為Client Proxy及Server
Proxy</p>

<h5>Client Proxy</h5>

<ol>
<li><p>WebStorageProxy</p>

<ol>
<li>LocalStorageProxy</li>
<li>SessionStorageProxy</li>
</ol>
</li>
<li><p>MemoryProxy</p></li>
</ol>


<h5>Server Proxy</h5>

<ol>
<li><p>AjaxProxy - 透過AJAX跟後端溝通(常用)</p>

<ol>
<li>RestProxy - 透過REST跟後端REST service進行溝通(利用HTTP protocol
的uri代表資源位置，GET, POST, PUT, DELETE
methods來對資源進行Read, Save, Update, Delete的動作)</li>
</ol>
</li>
<li><p>ScriptTagProxy - 透遛JSONP(JSON with
Padding)的方式與其他domain的server溝通</p></li>
<li>DirectProxy -</li>
</ol>


<p>JSONP(JSON with
Padding):browser的限制不能存取其他網域(domain)的資料，而JSONP是利用JSON
+ callback function來跨越這個限制</p>

<h5>Reader</h5>

<p>Reader負責來解析資料格式，目前有</p>

<ol>
<li><p>JsonReader (預設)</p>

<ol>
<li>ArrayReader</li>
</ol>
</li>
<li><p>XmlReader</p></li>
</ol>


<h5>Writer</h5>

<p>Writer比Reader複雜一些，通常是被Server
Proxy使用，Writer裡面有一個叫Operation，Operation會決定url的格式內容及參數。
透過改成Operation.action 為'create', 'read', 'update' or
'destroy'可以決定要對Server Proxy送出什麼樣的url</p>

<h3>Store</h3>

<p>如果將Model視為處理一筆資料的物件，那麼我們可以說，Store多筆資料(Model)的物件，Store跟Model一樣可以透過Proxy讀取或儲存資料。
而Store因為資料內容是多筆的，所以，還可以對這些資料進行排序(sorting)，過濾(filtering)，郡組(Grouping)或查詢(querying)的動作.</p>

<h2>如何看懂API</h2>

<p>為了學習如果使用API進行開發，以下設計了一個簡單的例子來說明如果使用FireBug
+ ExtJS的API說明文件來進行練習</p>

<p>一般來說，我們會透過ajax
proxy跟後端要資料，一開始，我們可以用一個簡單的純文字檔，讓proxy直接跟檔案要資料，而不是跟server
side要</p>

<p>```</p>

<pre><code>[{"id":1,"name":"kent","email":null},{"id":2,"name":"juiwen","email":null},{"id":3,"name":"Roger","email":null}]
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;html&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;head&gt;
&lt;script type="text/javascript" src="%EXT_HOME%/ext-core-debug.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="%EXT_HOME%/ext-all-debug.js"&gt;&lt;/script&gt;
 
Ext.require([
             'Ext.data.*',
         ]);
Ext.onReady(function(){
 
 
    Ext.regModel('User', {
        fields: ['id', 'name', 'email'],
        proxy: {
            type: 'ajax', // load using HTTP
            url: 'model.json' // 載入下面的json檔案
        }
    });
    var user = Ext.ModelMgr.getModel('User');
    // 宣告剛成後，user只是一個Ext.data.Model型別的物件
    // 查Ext.data.Model的API doc可以知道，有一個load method可以用來載入資料
    // 載入json file第一筆{id=1, name='kent'}記錄進user
    user.load(1, {
        scope: this,
        failure: function(record, operation) {
            // 載入失敗時，這個method會被呼叫
        },
        success: function(record, operation) {
            // 載入成功時，這個method會被呼叫
            conlog.log(record); // record本時為json file的第一筆資料，但是Ext.data.Model
        }
    });
    console.log(user); // 注意:這樣得到的user是會空的，因為，取得資料的method 'load'是非同步的，所以，load還沒取回資料前，就會執行load之後的動作了
 
 
    var userStore = new Ext.data.Store({
        model: 'User',
        autoLoad: true,
    });
 
    userStore.on('load', function(self, records, success) {
        // Ext.data.Store.data是Ext.util.MixedCollection型別，MixedCollection中有each method可以取得集合內的每一個內容，每一個內容均為Ext.data.Model
        userStore.data.each(function(item, index, length){
            // item此時為json file的"某"一筆資料，被包裝成Ext.data.Model型別,Ext.data.Model有一個data的屬性可以取得物件
            console.log(item.data.name)
        });
    });
&lt;/script&gt;
 
&lt;title&gt;Model Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
EXT JS Model Test
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<h4>透過plugin + API Doc</h4>

<p>EXT是利用動態語言JavaScript寫的，由於動態語言的特性是在Runtime的才能知道物件真正的內容為何，如果要光靠API做物件型別的推斷，會很辛苦。
再加上EXT JS
4版後，採用Mixins的技術，會讓物件型別的推斷更加麻煩，所以，建議在API不熟前，可以多利用Debugger工具，在runtime去查出物件的真正型別
，這樣對初學者，會比較容易克服ext的進入門檻。</p>

<h5>API inspect in action</h5>

<p>這裡利用FireBug + <a href="http://www.illuminations-for-developers.com/" title="http://www.illuminations-for-developers.com/">extjs
plugin</a>來觀查extjs元件內容並說明如何搭配API文件來將程式改成符合我們需求的設定。</p>

<p>FireBug必須利用script
debugger的功能，設定中斷點後，執行script會停在中斷點上，便可在執行時可以得知物件型別，對照API一起看，就會很清楚了</p>

<p><img src="http://blog.kent-chiu.com/images/2012-11-15/extjs_101_002.png" alt="extjs_101_002.png" /></p>

<h3>Ext.Template</h3>

<p>範本功能是透過建立一個固定的範本，然後可以將範本裡面特定的內容給取代掉。</p>

<p><code>
var t = new Ext.Template("&lt;div&gt;Hello {0}.&lt;/div&gt;");
t.append('some-element', ['foo']);
</code></p>

<p>```
var t = new Ext.Template([</p>

<pre><code>'&lt;div name="{id}"&gt;',
    '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
'&lt;/div&gt;',
</code></pre>

<p>]);
t.compile();
t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
```</p>

<h3>Ext.AbstractComponent</h3>

<p>如下圖，Ext.AbstractComponent是許多元件的共同祖先，提供了許多元件共同的基本行為，像</p>

<p>其有幾個特別需要提及的</p>

<ol>
<li>getEl()</li>
<li>getPlugin()</li>
<li>getXTypes()</li>
</ol>


<h3>事件處理</h3>

<p>Ext.util.Observable是所有事件處理的根基。</p>

<p><code>
var el = Ext.get('myDiv');
el.on('click', clickHandle(){});
</code></p>

<h3>TBD</h3>

<ul>
<li>Ext.Function.bind 將前一次的function的傳回值當作參數傳入下一次的呼叫
(有functional programming的味道)</li>
<li>Ext.Function.pass
建立一個新的function，用來取代舊function但改變scope</li>
<li>Ext.Function.defer 延遲一段時間後，進行function call</li>
</ul>


<h2>Resource</h2>

<ul>
<li>十個應避免的extjs設計 - <a href="http://www.sencha.com/blog/top-10-ext-js-development-practices-to-avoid/">http://www.sencha.com/blog/top-10-ext-js-development-practices-to-avoid/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EXT JS Resources]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/extjs_resource/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/extjs_resource</id>
    <content type="html"><![CDATA[<p>EXT JS
4是<a href="http://www.sencha.com/" title="http://www.sencha.com/">Sencha</a>公司出的一套javascript
lib，提供豐富的網頁元件，可以方便的建構出網頁應用程式</p>

<ul>
<li><a href="http://wiki.kent-chiu.com/doku.php?id=extjs:extjs_101" title="extjs:extjs_101">EXT JS
101</a>

<ul>
<li>心得筆記</li>
</ul>
</li>
<li><a href="http://www.sencha.com/" title="http://www.sencha.com/">http://www.sencha.com/</a>

<ul>
<li>官網</li>
</ul>
</li>
<li><p><a href="http://www.sencha.com/conference/videos/" title="http://www.sencha.com/conference/videos/">官網的視頻教學</a></p>

<ol>
<li>Introducing Ext JS 4
<a href="http://vimeo.com/17733892" title="http://vimeo.com/17733892">視頻</a>
<a href="http://www.slideshare.net/edspencer/intro-to-ext-4" title="http://www.slideshare.net/edspencer/intro-to-ext-4">投影片</a>

<ul>
<li>建議觀看</li>
</ul>
</li>
<li>Ext JS 4 Architecture
<a href="http://vimeo.com/17733892" title="http://vimeo.com/17733892">視頻</a>
<a href="http://www.slideshare.net/edspencer/ext-js-4-architecture" title="http://www.slideshare.net/edspencer/ext-js-4-architecture">投影片</a>

<ul>
<li>強烈建議觀看</li>
</ul>
</li>
</ol>
</li>
<li><p><a href="http://www.sencha.com/products/extjs/examples/" title="http://www.sencha.com/products/extjs/examples/">http://www.sencha.com/products/extjs/examples/</a>
-ext js 4.0 examples</p></li>
<li><a href="http://docs.sencha.com/ext-js/4-0/api/" title="http://docs.sencha.com/ext-js/4-0/api/">http://docs.sencha.com/ext-js/4-0/api/</a>

<ul>
<li>API</li>
</ul>
</li>
<li><a href="http://dev.sencha.com/deploy/ext-4.0-beta3/docs/guide/application_architecture.html" title="http://dev.sencha.com/deploy/ext-4.0-beta3/docs/guide/application_architecture.html">MVC</a></li>
<li><a href="http://www.sencha.com/products/extjs/examples/" title="http://www.sencha.com/products/extjs/examples/">http://www.sencha.com/products/extjs/examples/</a>

<ul>
<li>3.x的examples</li>
</ul>
</li>
<li><a href="http://dev.sencha.com/deploy/dev/docs/index.html" title="http://dev.sencha.com/deploy/dev/docs/index.html">http://dev.sencha.com/deploy/dev/docs/index.html</a>

<ul>
<li>3.x的API</li>
</ul>
</li>
<li><a href="http://extjs.org.cn/" title="http://extjs.org.cn/">http://extjs.org.cn/</a>

<ul>
<li>中國的extjs網站(非官網，但一些官網文章的翻譯)</li>
</ul>
</li>
<li><a href="http://www.illuminations-for-developers.com/" title="http://www.illuminations-for-developers.com/">Illuminations</a>

<ul>
<li>firebug上extjs的plugin</li>
</ul>
</li>
<li><img src="http://blog.kent-chiu.com/images/2011-10-17/extjs_101_003.png" alt="extjs_101_003.png" />

<ul>
<li>ExtJs 3.0類別圖 (class diagram) author: rhio.kim@gmail.com</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
