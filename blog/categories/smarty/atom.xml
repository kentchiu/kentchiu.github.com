<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: smarty | Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/blog/categories/smarty/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2013-07-16T23:33:07+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[這篇文章說明每個模版的功能]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/template_index/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/template_index</id>
    <content type="html"><![CDATA[<p>基本上，每個template的layout也不用特意去強記，因為，每一個theme里的每一個template(lib,dwt,
wherever…)，總之就是themes目錄下的所有檔案都不一樣。
所以，應該比較用心去了解的反而是將資料往smarty (templates)
pushing的那些php檔。能夠了解每個php送出的資訊，大概也就知道template的能秀出那麼東西了。</p>

<p>dwt應該是<strong>D</strong>ream<strong>W</strong>eaver
<strong>T</strong>emplate的縮寫，而lbi也是dreamweaver裡的一種格式。它可以透過一些特殊的tags達到server
side的include效果。 在dwt檔裡有許多地方都有以下兩組tags</p>

<p>```</p>

<!-- #BeginLibraryItem "/library/xxx.lbi" -->


<!-- #EndLibraryItem -->


<p>```</p>

<p>```</p>

<!-- TemplateBeginEditable name="xxx" -->


<!-- TemplateEndEditable -->


<p>
```</p>

<p>第一組tag的功能是include
lbi檔，如果tag有內容，內容應該會與被included的檔案一模一樣，這是因為<strong>某些</strong>editor(dreamweaver)自動include進來的
，但是如果<strong>直接去編輯tag內容(inner
text)是沒用的，頁面並不會相對改變</strong>，惟有直接修改lbi檔的內容，頁面才會改變。</p>

<p>第二組tag不太清楚實際的作用是什麼^<a href="#fn__1">1)</a>^可以直接拿掉，但tag內容要保留。</p>

<p>以一個簡單的例子來說明這種效果</p>

<p>```</p>

<pre><code>&lt;b&gt;Hello World!&lt;/b&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;!-- #BeginLibraryItem "/library/my.lbi" --&gt;
&lt;b&gt;Hello World!&lt;/b&gt;
&lt;!-- #EndLibraryItem --&gt;
&lt;!-- TemplateBeginEditable name="foo" --&gt;
&lt;b&gt;Kent&lt;/b&gt;
&lt;!-- TemplateEndEditable --&gt;  
</code></pre>

<p>```</p>

<p>上面的lib會被included到my.dwt內，所以輸出會像這樣：</p>

<p>```</p>

<pre><code>Hello World!Kent
</code></pre>

<p>```</p>

<p>再來，說明一下另一個效果</p>

<p>```</p>

<pre><code>&lt;!-- #BeginLibraryItem "/library/my.lbi" --&gt;
&lt;b&gt;--- Hello World! ---&lt;/b&gt;
&lt;!-- #EndLibraryItem --&gt;
&lt;!-- TemplateBeginEditable name="foo" --&gt;
&lt;b&gt;Kent&lt;/b&gt;
&lt;!-- TemplateEndEditable --&gt;  
</code></pre>

<p>```</p>

<p>my.dwt裡第2行&lt;b>Hello
World!&lt;/b>這個並不會被render，就算去修改它，也沒有用，將第二行改成
<strong>&lt;b>— Hello World! —&lt;/b></strong>，結果輸出跟之前一樣</p>

<p>```</p>

<pre><code>Hello World!Kent
</code></pre>

<p>```</p>

<p>但如果是去修改lbi檔的內容</p>

<p>```</p>

<pre><code>&lt;b&gt; *** Hello World! *** &lt;/b&gt;
</code></pre>

<p>```</p>

<p>輸出就會改變成跟lbi的內容一樣了</p>

<p>```</p>

<pre><code>*** Hello World! *** Kent
</code></pre>

<p>```</p>

<p>這說明了<strong>修改BeginLibraryItem /
#EndLibraryItem間的內容是沒用的</strong>，一定要去修改lbi的檔。
換句話說，其實可以對dwt檔做以下的簡化</p>

<ol>
<li>可以移除&lt;!– TemplateBeginEditable name=“xxx” –>&lt;!–
TemplateEndEditable –> 這一對tag，但tag的內文要保留</li>
<li>可以移除&lt;!– #BeginLibraryItem ”/library/xxx.lbi” –>&lt;!–
#EndLibraryItem –> tag的內文，但tag本身要保留</li>
</ol>


<p>所以，簡化後的dwt檔會像這樣</p>

<p>```</p>

<pre><code>&lt;!-- #BeginLibraryItem "/library/my.lbi" --&gt;
&lt;b&gt;Kent&lt;/b&gt;
</code></pre>

<p>```</p>

<p>有些官方的template本身就是簡化過的(預設的template沒有簡化)，所以可以拿簡化過的template來測試，會比較乾淨</p>

<p>ECShop裡面模版可以透過web畫面進行調整，調整後的layout是紀錄在db，然後把調整的page(ex:index.dwt)內容給置換掉</p>

<h2>dwt 模版</h2>

<p>備註：範本檔共22個(格式：.dwt)。</p>

<p>提醒：</p>

<ol>
<li>更改範本檔裡面庫檔的內容是無效的，頁面刷新時，程式自動重新載入庫檔內容到範本檔裡(以庫檔內容為准)。</li>
<li>範本內所有id值為 ECS_ 開頭的都必須保留(和ajax相關)。</li>
<li>非庫檔內容不可放置到可編輯區域內，否則設置範本時，非庫檔內容將被覆蓋刪除。</li>
</ol>


<p>  名稱                    說明</p>

<hr />

<p>  brand.dwt               商品品牌頁
  article.dwt             文章內容頁
  article_cat.dwt        文章列表頁
  catalog.dwt             所有分類頁
  category.dwt            商品列表頁
  compare.dwt             商品比較頁
  flow.dwt                購物車和購物流程頁
  gallery.dwt             商品相冊頁
  goods.dwt               商品詳情頁
  group_buy_goods.dwt   團購商品詳情頁
  group_buy_list.dwt    團購商品列表頁
  index.dwt               首頁
  message.dwt             資訊提示頁
  pick_out.dwt           選購中心頁
  receive.dwt             收貨確認資訊頁
  respond.dwt             線上支付結果提示資訊頁
  search.dwt              商品搜尋網頁
  snatch.dwt              奪寶奇兵頁
  tag_cloud.dwt          標籤雲頁
  user_clips.dwt         用戶中心頁 （包含：歡迎頁，我的留言，我的標籤，收藏商品，缺貨登記列表，添加缺貨登記。）
  user_passport.dwt      用戶安全頁（包含：會員登錄，會員註冊，找回密碼。）
  user_transaction.dwt   用戶中心頁 （包含：個人資料，我的紅包，添加紅包，我的訂單，訂單詳情，合併訂單，訂單狀態，商品清單，費用總計，收貨人資訊，支付方式，其他資訊，會員餘額。）</p>

<h2>Library</h2>

<p>備註：庫檔共40個 (格式 .lbi)
提醒：檔案名儘量保存默認，否則在後臺管理將無法管理庫檔或不可預見錯誤。</p>

<p>  name                       description</p>

<hr />

<p>  ad_position.lbi           廣告位
  bought_goods.lbi          購買過此商品的人購買過哪些商品
  brand_goods.lbi           品牌的商品
  brands.lbi                 品牌專區
  cart.lbi                   購物車
  cat_articles.lbi          文章列表
  cat_goods.lbi             分類下的商品
  category_tree.lbi         商品分類樹
  comments.lbi               用戶評論列表 （ajax載入comments_list.lbi。）
  comments_list.lbi         使用者評論內容
  consignee.lbi              收貨地址表單
  goods_article.lbi         相關文章
  goods_attrlinked.lbi      屬性關聯的商品
  goods_fittings.lbi        相關配件
  goods_gallery.lbi         商品相冊
  goods_list.lbi            商品列表
  goods_related.lbi         相關商品
  goods_tags.lbi            商品標記
  group_buy.lbi             首頁團購商品
  help.lbi                   網店幫助
  history.lbi                商品流覽歷史
  invoice_query.lbi         發貨單查詢
  member.lbi                 會員登錄 (ajax載入member_info.lbi。)
  member_info.lbi           會員登錄表單和登錄成功以後使用者帳戶資訊
  new_articles.lbi          最新文章
  order_total.lbi           訂單費用總計
  page_footer.lbi           頁面腳部
  page_header.lbi           頁面頂部
  pages.lbi                  列表分頁
  recommend_best.lbi        精品推薦
  recommend_hot.lbi         熱賣商品
  recommend_new.lbi         新品推薦
  recommend_promotion.lbi   促銷商品
  search_form.lbi           搜索表單
  snatch.lbi                 奪寶奇兵出價表單 (必須被id=“ECS_SNATCH”包含實現ajax刷新。)
  snatch_price.lbi          奪寶奇兵最新出價列表 (必須被id=“ECS_PRICE_LIST”包含實現ajax刷新。)
  top10.lbi                  銷售排行
  ur_here.lbi               當前位置
  user_menu.lbi             使用者中心功能表
  vote.lbi                   線上調查</p>

<h3>brand.dwt (商品品牌頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_article.dwt.gif" alt="template_index_article.dwt.gif" /></p>

<h3>brand.dw (商品品牌頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_brand.dwt.gif" alt="template_index_brand.dwt.gif" /></p>

<h3>article.dw (文章內容頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_article.dwt.gif" alt="template_index_article.dwt.gif" /></p>

<h3>article_cat.dwt (文章列表頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_article_cat.dwt.gif" alt="template_index_article_cat.dwt.gif" /></p>

<h3>catalog.dw (所有分類頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_catalog.dwt.gif" alt="template_index_catalog.dwt.gif" /></p>

<h3>category.dwt (商品列表頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_category.dwt.gif" alt="template_index_category.dwt.gif" /></p>

<h3>compare.dw (商品比較頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_compare.dwt.gif" alt="template_index_compare.dwt.gif" /></p>

<h3>flow.dwt (購物車和購物流程頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_flow.dwt.gif" alt="template_index_flow.dwt.gif" /></p>

<h3>gallery.dw (商品相冊頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_gallery.dwt.gif" alt="template_index_gallery.dwt.gif" /></p>

<h3>goods.dw (商品詳情頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_goods.dwt.gif" alt="template_index_goods.dwt.gif" /></p>

<h3>group_buy_goods.dwt (團購商品詳情頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_group_buy_goods.dwt.gif" alt="template_index_group_buy_goods.dwt.gif" /></p>

<h3>group_buy_list.dwt (團購商品列表頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_group_buy_list.dwt.gif" alt="template_index_group_buy_list.dwt.gif" /></p>

<h3>index.dw (首頁)</h3>

<p>兩張圖的layout沒有完全一致，參考看看就好</p>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_index.dwt.gif" alt="template_index_index.dwt.gif" /></p>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_index.png" alt="template_index_index.png" /></p>

<h3>message.dw ( 資訊提示頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_message.dwt.gif" alt="template_index_message.dwt.gif" /></p>

<h3>pick_out.dwt (選購中心頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_pick_out.dwt.gif" alt="template_index_pick_out.dwt.gif" /></p>

<h3>receive.dw (收貨確認資訊頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_receive.dwt.gif" alt="template_index_receive.dwt.gif" /></p>

<h3>respond.dw (線上支付結果提示資訊頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_respond.dwt.gif" alt="template_index_respond.dwt.gif" /></p>

<h3>search.dwt (商品搜尋網頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_search.dwt.gif" alt="template_index_search.dwt.gif" /></p>

<h3>snatch.dwt (奪寶奇兵頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_snatch.dwt.gif" alt="template_index_snatch.dwt.gif" /></p>

<h3>tag_cloud.dwt (標籤雲頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_tag_cloud.dwt.gif" alt="template_index_tag_cloud.dwt.gif" /></p>

<h3>user_clips.dwt (用戶中心頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_user_clips.dwt.gif" alt="template_index_user_clips.dwt.gif" /></p>

<h3>user_passport.dwt (用戶安全頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_user_passport.dwt.gif" alt="template_index_user_passport.dwt.gif" /></p>

<h3>user_transaction.dwt (用戶中心頁)</h3>

<p><img src="http://blog.kent-chiu.com/images/2011-10-17/template_index_user_transaction.dwt.gif" alt="template_index_user_transaction.dwt.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ec的範本機制感覺和smarty的類似，算是一個簡易的smarty把]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/template/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/template</id>
    <content type="html"><![CDATA[<p>ec的範本機制感覺和smarty的類似，算是一個簡易的smarty把</p>

<p>每個程式頁面都有如下類似的語句</p>

<p><code>
$cache_id = sprintf('%X', crc32($_SESSION['user_rank'] . '-' . $_CFG['lang']))   
</code></p>

<p>緩存id，現在是通過使用者等級和語言緩存不同頁面（通過這裡應該可以做網店多語種的實現）</p>

<p>```
if (!$smarty->is_cached('index.dwt', $cache_id))
 
{          判斷頁面是否已經緩存，如果沒有則做變數賦值和範本裡面動態內容提取
 </p>

<pre><code>       assign_template();  
</code></pre>

<p> </p>

<pre><code>       $smarty-&gt;assign(變數名,  變數值);
</code></pre>

<p> </p>

<pre><code>        。。。
</code></pre>

<p> 
}
 
$smarty->display('index.dwt', $cache_id);    顯示生成的頁面
 
 
 
頁面的範本機制都是通過cls_template.php檔實現，下面通過display函數開始進入分析，裡面只有關鍵地方的解釋，其他的可以自己去看代碼
 </p>

<pre><code>function display($filename, $cache_id = '')
</code></pre>

<p> </p>

<pre><code>{
</code></pre>

<p> </p>

<pre><code>    。。。
</code></pre>

<p> </p>

<pre><code>    $out = $this-&gt;fetch($filename, $cache_id);    //這裡是處理範本的關鍵函數
</code></pre>

<p> </p>

<pre><code>    if (strpos($out, $this-&gt;_echash) !== false)     //頁面動態內容的顯示，如投票，購物車之類的，看了下面的就知道了
</code></pre>

<p> </p>

<pre><code>    {
</code></pre>

<p> </p>

<pre><code>        $k = explode($this-&gt;_echash, $out);
</code></pre>

<p> </p>

<pre><code>        foreach ($k AS $key =&gt; $val)
</code></pre>

<p> </p>

<pre><code>        {
</code></pre>

<p> </p>

<pre><code>            if (($key % 2) == 1)
</code></pre>

<p> </p>

<pre><code>            {
</code></pre>

<p> </p>

<pre><code>                $k[$key] = $this-&gt;insert_mod($val);   //取到動態內容並賦值
</code></pre>

<p> </p>

<pre><code>            }
</code></pre>

<p> </p>

<pre><code>        }
</code></pre>

<p> </p>

<pre><code>        $out = implode('', $k);
</code></pre>

<p> </p>

<pre><code>    }
</code></pre>

<p> </p>

<pre><code>    。。。
</code></pre>

<p> </p>

<pre><code>}
</code></pre>

<p> 
 
 
 
 </p>

<pre><code>function fetch($filename, $cache_id = '')
</code></pre>

<p> </p>

<pre><code>{
</code></pre>

<p> </p>

<pre><code>   。。。
</code></pre>

<p> </p>

<pre><code>    if (strncmp($filename,'str:', 4) == 0)  此處處理字串範本，如郵件範本
</code></pre>

<p> </p>

<pre><code>    {
</code></pre>

<p> </p>

<pre><code>        。。。
</code></pre>

<p> </p>

<pre><code>    }
</code></pre>

<p> </p>

<pre><code>    else
</code></pre>

<p> </p>

<pre><code>    {
</code></pre>

<p> </p>

<pre><code>       。。。
</code></pre>

<p> </p>

<pre><code>        if ($this-&gt;direct_output)      
</code></pre>

<p> </p>

<pre><code>        {
</code></pre>

<p> </p>

<pre><code>           。。。
</code></pre>

<p> </p>

<pre><code>        }
</code></pre>

<p> </p>

<pre><code>        else
</code></pre>

<p> </p>

<pre><code>        {
</code></pre>

<p> </p>

<pre><code>            if ($cache_id &amp;&amp; $this-&gt;caching)     //如果已經緩存就直接取緩存資料
</code></pre>

<p> </p>

<pre><code>            {
</code></pre>

<p> </p>

<pre><code>                $out = $this-&gt;template_out;
</code></pre>

<p> </p>

<pre><code>            }
</code></pre>

<p> </p>

<pre><code>            else
</code></pre>

<p> </p>

<pre><code>            {
</code></pre>

<p> </p>

<pre><code>                   $out = $this-&gt;make_compiled($filename);     //編譯範本函數，關鍵函數
</code></pre>

<p> </p>

<pre><code>                if ($cache_id)        //如果緩存id不為空則寫快取檔案
</code></pre>

<p> </p>

<pre><code>                {
</code></pre>

<p> </p>

<pre><code>                           。。。一些緩存資料，如緩存有效期之類的
</code></pre>

<p> </p>

<pre><code>                }
</code></pre>

<p> </p>

<pre><code>            }
</code></pre>

<p> </p>

<pre><code>        }
</code></pre>

<p> </p>

<pre><code>    }
</code></pre>

<p> </p>

<pre><code>  。。。
</code></pre>

<p> </p>

<pre><code>}
</code></pre>

<p> 
 
 
 
 
 
 </p>

<pre><code>function make_compiled($filename)
</code></pre>

<p> </p>

<pre><code>{
</code></pre>

<p> </p>

<pre><code>  。。。。這裡省略一部分都是判斷檔是否有效，是否過期，是否強制編譯之類的
</code></pre>

<p> </p>

<pre><code>    if ($this-&gt;force_compile || $filestat['mtime'] &gt; $expires)
</code></pre>

<p> </p>

<pre><code>    {
</code></pre>

<p> </p>

<pre><code>        $this-&gt;_current_file = $filename;
</code></pre>

<p> </p>

<pre><code>        $source = $this-&gt;fetch_str(file_get_contents($filename));             //關鍵地方，讀取範本檔，處理範本字串
</code></pre>

<p> </p>

<pre><code>        if (file_put_contents($name, $source, LOCK_EX) === false)      //寫入編譯以後的檔
</code></pre>

<p> </p>

<pre><code>        {
</code></pre>

<p> </p>

<pre><code>            trigger_error('can\'t write:' . $name);
</code></pre>

<p> </p>

<pre><code>        }
</code></pre>

<p> </p>

<pre><code>        $source = $this-&gt;_eval($source);
</code></pre>

<p> </p>

<pre><code>    }
</code></pre>

<p> </p>

<pre><code>    return $source;
</code></pre>

<p> </p>

<pre><code>}
</code></pre>

<p> 
 
 
 
 
 
 </p>

<pre><code>function fetch_str($source)
</code></pre>

<p> </p>

<pre><code>{
</code></pre>

<p> </p>

<pre><code>    if (!defined('ECS_ADMIN'))
</code></pre>

<p> </p>

<pre><code>    {
</code></pre>

<p> </p>

<pre><code>        $source = $this-&gt;smarty_prefilter_preCompile($source);      //預處理函數，此函數代碼檔中有詳細解釋就不囉嗦了
</code></pre>

<p> </p>

<pre><code>    }
</code></pre>

<p> </p>

<pre><code>    return preg_replace("/{([^\}\{\n]*)}/e", "\$this-&gt;select('\\1');", $source);    //匹配處理{}每個標籤
</code></pre>

<p> </p>

<pre><code>}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smarty 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2011/10/17/smarty_101/"/>
    <updated>2011-10-17T00:00:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2011/10/17/smarty_101</id>
    <content type="html"><![CDATA[<p>the smarty is a template engine of php. there are some features of
smarty listed blow:</p>

<ul>
<li>split any UI control in smarty, php only provides the data source</li>
<li>if ‹ and > can't parsed as well, we can use \$left_delimiter and
\$right_delimiter instend.</li>
<li>function name is case-<strong>in</strong>sensitive but variable is case-sensitive</li>
</ul>


<h2>Smarty Note</h2>

<h3>Using array veriable in smarty</h3>

<p><code>
&lt;?php
$user = array("firstname" =&gt; "Kent", "lastname" =&gt; "Chiu", "email" =&gt; "kent.chiu@mail.com");
$tpl-&gt;assign("user", $user);
?&gt;
</code></p>

<p><code>
{$user.firstname}
{$user.lastname}
{$user.email}
</code></p>

<h3>Using object veriable in smarty</h3>

<p><code>
$obj = new UserObject();
$tpl-&gt;assign("obj", $obj);
</code></p>

<p><code>
{$obj-&gt;firstname}
{$obj-&gt;lastname}
{$obj-&gt;method()}
</code></p>

<h3>Function in Smarty</h3>

<p><code>
{$var|function}
{$var|function:"argument(option)"}
</code></p>

<h3>attributes</h3>

<ul>
<li>static values don't have to be enclosed in quotes</li>
<li>it is recommended for literal strings</li>
<li>variables should not be in quotes.</li>
<li>boolean value can be specified as true, on, and yes, or false, off,
and no</li>
</ul>


<p><code>
{include file="header.tpl"}
 
{include file=$includeFile}
 
{include file=#includeFile#}
 
{html_select_date display_days=yes}
 
&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;
</code></p>

<h2>variables</h2>

<p>Smarty has several different types of variables. The type of the
variable depends on what symbol it is prefixed with (or enclosed
within).</p>

<h3>variables assigned from php</h3>

<ul>
<li>using the sign'\$'</li>
<li>Associative arrays by '.' (period) symbol</li>
<li>Array indexes by '[]' symbol</li>
<li>Objects by '→'</li>
</ul>


<h4>Associative arrays by '.' (period) symbol</h4>

<p>```</p>

<pre><code>$smarty = new Smarty;
$smarty-&gt;assign('Contacts',
 array('fax' =&gt; '555-222-9876',
 'email' =&gt; 'zaphod@slartibartfast.com',
 'phone' =&gt; array('home' =&gt; '555-444-3333',
 'cell' =&gt; '555-111-1234')));
$smarty-&gt;display('index.tpl');
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{$Contacts.fax}&lt;br&gt;
{$Contacts.email}&lt;br&gt;
{* you can print arrays of arrays as well *}
{$Contacts.phone.home}&lt;br&gt;
{$Contacts.phone.cell}&lt;br&gt;
</code></pre>

<p>```</p>

<h4>Array indexes by '[]' symbol</h4>

<p>```</p>

<pre><code>$smarty = new Smarty;
$smarty-&gt;assign('Contacts', 
                 array('555-222-9876',  'zaphod@slartibartfast.com',  
                       array('555-444-3333', '555-111-1234')));
$smarty-&gt;display('index.tpl');
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{$Contacts[0]}&lt;br&gt;
{$Contacts[1]}&lt;br&gt;
{* you can print arrays of arrays as well *}
{$Contacts[2][0]}&lt;br&gt;
{$Contacts[2][1]}&lt;br&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>555-222-9876&lt;br&gt;
zaphod@slartibartfast.com&lt;br&gt;
555-444-3333&lt;br&gt;
555-111-1234&lt;br&gt;
</code></pre>

<p>```</p>

<h4>Objects by '->'</h4>

<p>```</p>

<pre><code>name: {$person-&gt;name}&lt;br&gt;
email: {$person-&gt;email}&lt;br&gt;
</code></pre>

<p>```</p>

<h3>variables loaded from config files</h3>

<p>there are two syntaxes for accessing variables assigned from config
files.</p>

<ol>
<li>enclosed with double '#'(sharp mark) , ex: #config#</li>
<li>with smarty variable , ex \$smarty.config</li>
</ol>


<p>```</p>

<pre><code>pageTitle = "This is mine"
bodyBgColor = "#eeeeee"
tableBorderSize = "3"
tableBgColor = "#bbbbbb"
rowBgColor = "#cccccc"
</code></pre>

<p>```</p>

<h4>enclose by \</h4>

<p>```</p>

<pre><code>config_load file="foo.conf"}
&lt;html&gt;
&lt;title&gt;{#pageTitle#}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
&lt;tr bgcolor="{#rowBgColor#}"&gt;
    &lt;td&gt;First&lt;/td&gt;
    &lt;td&gt;Last&lt;/td&gt;
    &lt;td&gt;Address&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<h4>with smarty variable</h4>

<p>```</p>

<pre><code>{config_load file="foo.conf"}
&lt;html&gt;
&lt;title&gt;{$smarty.config.pageTitle}&lt;/title&gt;
&lt;body bgcolor="{$smarty.config.bodyBgColor}"&gt;
&lt;table border="{$smarty.config.tableBorderSize}" bgcolor="{$smarty.config.tableBgColor}"&gt;
&lt;tr bgcolor="{$smarty.config.rowBgColor}"&gt;
    &lt;td&gt;First&lt;/td&gt;
    &lt;td&gt;Last&lt;/td&gt;
    &lt;td&gt;Address&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<h2>{\$smarty} reserved variable</h2>

<ol>
<li>Request variables(get,post,server,session, … etc)</li>
<li>{\$smarty.now}</li>
<li>{\$smarty.const}</li>
<li>{\$smarty.capture}</li>
<li>{\$smarty.config}</li>
<li>{\$smarty.section}, {\$smarty.foreach}</li>
<li>{\$smarty.template}</li>
</ol>


<h3>Request variables</h3>

<p>```</p>

<pre><code>{* display value of page from URL (GET) http://www.domain.com/index.php?page=foo *}
{$smarty.get.page}
 
{* display the variable "page" from a form (POST) *}
{$smarty.post.page}
 
{* display the value of the cookie "username" *}
{$smarty.cookies.username}
 
{* display the server variable "SERVER_NAME" *}
{$smarty.server.SERVER_NAME}
 
{* display the system environment variable "PATH" *}
{$smarty.env.PATH}
 
{* display the php session variable "id" *}
{$smarty.session.id}
 
{* display the variable "username" from merged get/post/cookies/server/env *}
{$smarty.request.username}
</code></pre>

<p>```</p>

<h3>{\$smarty.now}</h3>

<p>```</p>

<pre><code>{* use the date_format modifier to show current date and time *}
{$smarty.now|date_format:"%Y-%m-%d %H:%M:%S"}
</code></pre>

<p>```</p>

<h3>{\$smarty.const}</h3>

<p>```</p>

<pre><code>{$smarty.const._MY_CONST_VAL}
</code></pre>

<p>```</p>

<h3>{\$smarty.capture}</h3>

<p>The output captured via {capture}..{/capture} construct can be accessed
using {\$smarty} variable reference to the
<a href="#capture" title="php:smarty:smarty_101 ↵">capture</a> function for more detail.</p>

<h3>{\$smarty.config}</h3>

<p>```</p>

<pre><code>{$smarty} variable can be used to refer to loaded config variables. 
</code></pre>

<p>```</p>

<p>reference to the <a href="#config_load" title="php:smarty:smarty_101 ↵">config_load</a>
for more detail.</p>

<h3>{\$smarty.section}, {\$smarty.foreach}</h3>

<p>{\$smarty} variable can be used to refer to 'section' and 'foreach' loop
properties. See docs for
<a href="#section_sectionelse" title="php:smarty:smarty_101 ↵">section</a> and
<a href="#foreach_foreachelse" title="php:smarty:smarty_101 ↵">foreach</a>.</p>

<h3>{\$smarty.template}</h3>

<p>current template name</p>

<p>```</p>

<pre><code>{$smarty.template};
{* output myTemplate.tpl *}
</code></pre>

<p>```</p>

<h2>Variable Modifiers</h2>

<ul>
<li><p>applied to</p>

<ol>
<li>variables</li>
<li>custom functions</li>
<li>strings</li>
<li>all php-functions (has two little pitfalls)</li>
</ol>
</li>
<li><p>applied a modifier by |(pipe)</p></li>
<li>additional parameters by :(colon)</li>
<li>apply to array have to using '@' or it will apply to all elements of
array.</li>
</ul>


<p>```</p>

<pre><code>{* apply modifier to a variable *}
{$title|upper}
 
{* modifier with parameters *}
{$title|truncate:40:'...'}
 
{* apply modifier to a function parameter *}
{html_table loop=$myvar|upper}
 
{* with parameters *}
{html_table loop=$myvar|truncate:40:'...'}
 
{* apply modifier to literal string *}
{'foobar'|upper}
 
{* using date_format to format the current date *}
{$smarty.now|date_format:"%Y/%m/%d"}
 
{* apply modifier to a custom function *}
{mailto|upper address='smarty@example.com'}
 
{* using  php's str_repeat *}
{'='|str_repeat:80}
 
{* php's count *}
{$myArray|@count}
 
{* php's shuffle on servers's ip *}
{$smarty.server.SERVER_ADDR|shuffle}
 
(* this will uppercase and truncate the whole array *}
&lt;select name="name_id"&gt;
{html_options output=$myArray|upper|truncate:20}
&lt;/select&gt;
</code></pre>

<p>```</p>

<h3>date_format</h3>

<p>```</p>

<pre><code>&lt;?php
 
$config['date'] = '%I:%M %p';
$config['time'] = '%H:%M:%S';
$smarty-&gt;assign('config', $config);
$smarty-&gt;assign('yesterday', strtotime('-1 day'));
 
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{$smarty.now|date_format}
{$smarty.now|date_format:"%A, %B %e, %Y"}
{$smarty.now|date_format:"%H:%M:%S"}
{$yesterday|date_format}
{$yesterday|date_format:"%A, %B %e, %Y"}
{$yesterday|date_format:"%H:%M:%S"}
&lt;/ocde&gt;
 
&lt;code |h output&gt;
Jan 1, 2022
01/01/22
02:33 pm
Dec 31, 2021
Monday, December 1, 2021
14:33:00
</code></pre>

<p>```</p>

<h4>the formatting control char</h4>

<ul>
<li>%a - abbreviated weekday name according to the current locale</li>
<li>%A - full weekday name according to the current locale</li>
<li>%b - abbreviated month name according to the current locale</li>
<li>%B - full month name according to the current locale</li>
<li>%c - preferred date and time representation for the current locale</li>
<li>%C - century number (the year divided by 100 and truncated to an
integer, range 00 to 99)</li>
<li>%d - day of the month as a decimal number (range 01 to 31)</li>
<li>%D - same as %m/%d/%y</li>
<li>%e - day of the month as a decimal number, a single digit is
preceded by a space (range 1 to 31)</li>
<li>%g - Week-based year within century [00,99]</li>
<li>%G - Week-based year, including the century [0000,9999]</li>
<li>%h - same as %b</li>
<li>%H - hour as a decimal number using a 24-hour clock (range 00 to 23)</li>
<li>%I - hour as a decimal number using a 12-hour clock (range 01 to 12)</li>
<li>%j - day of the year as a decimal number (range 001 to 366)</li>
<li>%k - Hour (24-hour clock) single digits are preceded by a blank.
(range 0 to 23)</li>
<li>%l - hour as a decimal number using a 12-hour clock, single digits
preceeded by a space (range 1 to 12)</li>
<li>%m - month as a decimal number (range 01 to 12)</li>
<li>%M - minute as a decimal number</li>
<li>%n - newline character</li>
<li>%p - either `am' or `pm' according to the given time value, or the
corresponding strings for the current locale</li>
<li>%r - time in a.m. and p.m. notation</li>
<li>%R - time in 24 hour notation</li>
<li>%S - second as a decimal number</li>
<li>%t - tab character</li>
<li>%T - current time, equal to %H:%M:%S</li>
<li>%u - weekday as a decimal number [1,7], with 1 representing Monday</li>
<li>%U - week number of the current year as a decimal number, starting
with the first Sunday as the first day of the first week</li>
<li>%V - The ISO 8601:1988 week number of the current year as a decimal
number, range 01 to 53, where week 1 is the first week that has at
least 4 days in the current year, and with Monday as the first day
of the week.</li>
<li>%w - day of the week as a decimal, Sunday being 0</li>
<li>%W - week number of the current year as a decimal number, starting
with the first Monday as the first day of the first week</li>
<li>%x - preferred date representation for the current locale without
the time</li>
<li>%X - preferred time representation for the current locale without
the date</li>
<li>%y - year as a decimal number without a century (range 00 to 99)</li>
<li>%Y - year as a decimal number including the century</li>
<li>%Z - time zone or name or abbreviation</li>
<li>%% - a literal `%' character</li>
</ul>


<h2>Built-in Functions</h2>

<ul>
<li>{capture}</li>
<li>{config_load}</li>
<li>{foreach},{foreachelse}</li>
<li>{if},{elseif},{else}</li>
<li>{include}</li>
<li>{include_php}</li>
<li>{insert}</li>
<li>{ldelim},{rdelim}</li>
<li>{literal}</li>
<li>{php}</li>
<li>{section},{sectionelse}</li>
<li>{strip}</li>
</ul>


<h3>{capture}</h3>

<p>```</p>

<pre><code>{* we don't want to print a div tag unless content is displayed *}
{capture name=banner}
  {include file='get_banner.tpl'}
{/capture}
 
{if $smarty.capture.banner ne ''}
&lt;div id="banner"&gt;{$smarty.capture.banner}&lt;/div&gt;
{/if}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{capture name=some_content assign=popText}
The server is {$smarty.server.SERVER_NAME|upper} at {$smarty.server.SERVER_ADDR}&lt;br&gt;
Your ip is {$smarty.server.REMOTE_ADDR}.
{/capture}
&lt;a href="#" {popup caption='Server Info' text=$popText}&gt;help&lt;/a&gt;
</code></pre>

<p>```</p>

<h3>{config_load}</h3>

<p>```</p>

<pre><code>#this is config file comment
 
# global variables
pageTitle = "Main Menu"
bodyBgColor = #000000
tableBgColor = #000000
rowBgColor = #00ff00
 
#customer variables section
[Customer]
pageTitle = "Customer Info"
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{config_load file="example.conf"}
 
&lt;html&gt;
&lt;title&gt;{#pageTitle#|default:"No title"}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
   &lt;tr bgcolor="{#rowBgColor#}"&gt;
      &lt;td&gt;First&lt;/td&gt;
      &lt;td&gt;Last&lt;/td&gt;
      &lt;td&gt;Address&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{config_load file='example.conf' section='Customer'}
 
&lt;html&gt;
&lt;title&gt;{#pageTitle#}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
   &lt;tr bgcolor="{#rowBgColor#}"&gt;
      &lt;td&gt;First&lt;/td&gt;
      &lt;td&gt;Last&lt;/td&gt;
      &lt;td&gt;Address&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<h3>{foreach},{foreachelse}</h3>

<p>{foreach} properties are</p>

<ol>
<li>index</li>
<li>iteration</li>
<li>first</li>
<li>last</li>
<li>show</li>
<li>total</li>
</ol>


<h4>Demonstrates the item attributes</h4>

<p>```</p>

<pre><code>&lt;?php
$arr = array(1000, 1001, 1002);
$smarty-&gt;assign('myArray', $arr);
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;ul&gt;
{foreach from=$myArray item=foo}
    &lt;li&gt;{$foo}&lt;/li&gt;
{/foreach}
&lt;/ul&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;ul&gt;
    &lt;li&gt;1000&lt;/li&gt;
    &lt;li&gt;1001&lt;/li&gt;
    &lt;li&gt;1002&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>```</p>

<h4>Demonstrates the item and key attributes</h4>

<p>```</p>

<pre><code>&lt;?php
$arr = array(9 =&gt; 'Tennis', 3 =&gt; 'Swimming', 8 =&gt; 'Coding');
$smarty-&gt;assign('myArray', $arr);
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;ul&gt;
{foreach from=$myArray key=k item=v}
   &lt;li&gt;{$k}: {$v}&lt;/li&gt;
{/foreach}
&lt;/ul&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;ul&gt;
    &lt;li&gt;9: Tennis&lt;/li&gt;
    &lt;li&gt;3: Swimming&lt;/li&gt;
    &lt;li&gt;8: Coding&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>```</p>

<h4>Database example with {foreachelse}</h4>

<p>```</p>

<pre><code>&lt;?php
  $search_condition = "where name like '$foo%' ";
  $sql = 'select contact_id, name, nick from contacts '.$search_condition.' order by name';
  $smarty-&gt;assign('results', $db-&gt;getAssoc($sql) );
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{foreach key=cid item=con from=$results}
    &lt;a href="contact.php?contact_id={$cid}"&gt;{$con.name} - {$con.nick}&lt;/a&gt;&lt;br /&gt;
{foreachelse}
    No items were found in the search
{/foreach}
</code></pre>

<p>```</p>

<h3>{if},{elseif},{else}</h3>

<p>  Qualifier          Alternates   Syntax Example           Meaning                        PHP Equivalent</p>

<hr />

<p>  ==                 eq           \$a eq \$b               equals                         ==
  !=                 ne, neq      \$a neq \$b              not equals                     !=
  >                 gt           \$a gt \$b               greater than                   >
  &lt;                 lt           \$a lt \$b               less than                      &lt;
  >=                gte, ge      \$a ge \$b               greater than or equal          >=
  ⇐                  lte, le      \$a le \$b               less than or equal             ⇐
  ===                             \$a === 0                check for identity             ===
  !                  not          not \$a                  negation (unary)               !
  %                  mod          \$a mod \$b              modulous                       %
  is [not] div by                 \$a is not div by 4      divisible by                   \$a % \$b == 0
  is [not] even                   \$a is not even          [not] an even number (unary)   \$a % 2 == 0
  is [not] even by                \$a is not even by \$b   grouping level [not] even      (\$a / \$b) % 2 == 0
  is [not] odd                    \$a is not odd           [not] an odd number (unary)    \$a % 2 != 0
  is [not] odd by                 \$a is not odd by \$b    [not] an odd grouping          (\$a / \$b) % 2 != 0</p>

<p>```</p>

<pre><code>{if $name eq 'Fred'}
    Welcome Sir.
{elseif $name eq 'Wilma'}
    Welcome Ma'am.
{else}
    Welcome, whatever you are.
{/if}
</code></pre>

<p>```</p>

<h3>{include}</h3>

<p>```</p>

<pre><code>{include file="header.tpl" title="Main Menu" table_bgcolor="#c0c0c0" links=$link_array}
 
{* body of template goes here *}
 
{include file="footer.tpl" logo="http://my.domain.com/logo.gif"}
</code></pre>

<p>```</p>

<h3>{include_php}</h3>

<p>{include_php} is pretty much deprecated from Smarty, you can accomplish
the same functionality via a custom template function.</p>

<h3>{insert}</h3>

<p>{insert} tags work much like {include} tags, except that {insert} tags
are NOT cached when template caching is enabled. They will be executed
on every invocation of the template.</p>

<p>this function is usful for some content we don't want to cache, like AD
banner or something else.</p>

<h3>{ldelim},{rdelim}</h3>

<p>Used to output '{' and '}'</p>

<h3>{literal}</h3>

<p>any context with in the {literal}{/literal} will not interpreted.</p>

<p>```</p>

<pre><code>{literal}
&lt;script language=javascript&gt;
&lt;!--
function isblank(field) {
  if (field.value == '') { 
    return false; 
  } else {
    document.loginform.submit();
    return true;
  }
}
// --&gt;
&lt;/script&gt;
{/literal}
</code></pre>

<p>```</p>

<h3>{php}</h3>

<p>The {php} tags allow PHP code to be embedded directly into the template.
They will not be escaped, regardless of the \$php_handling setting.
This is for advanced users only, not normally needed and <strong>not
recommended</strong>.</p>

<p>```
{<em> this template includes a {php} block that assign's the variable $varX </em>}
{php}
   global $foo, $bar;
   if($foo == $bar){</p>

<pre><code> echo 'This will be sent to browser';
</code></pre>

<p>   }
  // assign a variable to Smarty
  $this->assign('varX','Toffee');
{/php}
{<em> output the variable </em>}
<strong>{$varX}</strong> is my fav ice cream :-)
```</p>

<h3>{section},{sectionelse}</h3>

<p>A {section} is for looping over arrays of data, unlike {foreach} which
is used to loop over a single associative array. Every {section} tag
must be paired with a closing {/section} tag.</p>

<p>{section} properties are</p>

<ol>
<li>index</li>
<li>index_prev</li>
<li>index_next</li>
<li>iteration</li>
<li>first</li>
<li>last</li>
<li>rownum</li>
<li>loop</li>
<li>show</li>
<li>total.</li>
</ol>


<h4>Nested {section}</h4>

<p>```</p>

<pre><code>&lt;?php
 
$id = array(1001,1002,1003);
$smarty-&gt;assign('custid',$id);
 
$fullnames = array('John Smith','Jack Jones','Jane Munson');
$smarty-&gt;assign('name',$fullnames);
 
$addr = array('253 N 45th', '417 Mulberry ln', '5605 apple st');
$smarty-&gt;assign('address',$addr);
 
$types = array(
           array( 'home phone', 'cell phone', 'e-mail'),
           array( 'home phone', 'web'),
           array( 'cell phone')
         );
$smarty-&gt;assign('contact_type', $types);
 
$info = array(
           array('555-555-5555', '666-555-5555', 'john@myexample.com'),
           array( '123-456-4', 'www.example.com'),
           array( '0457878')
        );
$smarty-&gt;assign('contact_info', $info);
 
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{section name=customer loop=$custid}
&lt;hr&gt;
  id: {$custid[customer]}&lt;br /&gt;
  name: {$name[customer]}&lt;br /&gt;
  address: {$address[customer]}&lt;br /&gt;
  {section name=contact loop=$contact_type[customer]}
    {$contact_type[customer][contact]}: {$contact_info[customer][contact]}&lt;br /&gt;
  {/section}
{/section}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;hr&gt;
  id: 1000&lt;br /&gt;
  name: John Smith&lt;br /&gt;
  address: 253 N 45th&lt;br /&gt;
    home phone: 555-555-5555&lt;br /&gt;
    cell phone: 666-555-5555&lt;br /&gt;
    e-mail: john@myexample.com&lt;br /&gt;
&lt;hr&gt;
  id: 1001&lt;br /&gt;
  name: Jack Jones&lt;br /&gt;
  address: 417 Mulberry ln&lt;br /&gt;
    home phone: 123-456-4&lt;br /&gt;
    web: www.example.com&lt;br /&gt;
&lt;hr&gt;
  id: 1002&lt;br /&gt;
  name: Jane Munson&lt;br /&gt;
  address: 5605 apple st&lt;br /&gt;
    cell phone: 0457878&lt;br /&gt;
</code></pre>

<p>```</p>

<h4>Database sample with {sectionelse}</h4>

<p>```</p>

<pre><code>&lt;?php
$sql = 'select id, name, home, cell, email from contacts '
      ."where name like '$foo%' ";
$smarty-&gt;assign('contacts', $db-&gt;getAll($sql));
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;Name&gt;&lt;/th&gt;&lt;th&gt;Home&lt;/th&gt;&lt;th&gt;Cell&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;
{section name=co loop=$contacts}
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="view.php?id={$contacts[co].id}"&gt;view&lt;a&gt;&lt;/td&gt;
    &lt;td&gt;{$contacts[co].name}&lt;/td&gt;
    &lt;td&gt;{$contacts[co].home}&lt;/td&gt;
    &lt;td&gt;{$contacts[co].cell}&lt;/td&gt;
    &lt;td&gt;{$contacts[co].email}&lt;/td&gt;
  &lt;tr&gt;
{sectionelse}
  &lt;tr&gt;&lt;td colspan="5"&gt;No items found&lt;/td&gt;&lt;/tr&gt;
{/section}
&lt;/table&gt;
</code></pre>

<p>```</p>

<h4>.index, .index_prev, .index_next</h4>

<p>```</p>

<pre><code>&lt;?php
$data = array(1001,1002,1003,1004,1005);
$smarty-&gt;assign('rows',$data);
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{* $rows[row.index] and $rows[row] are identical in meaning *}
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;index&lt;/th&gt;&lt;th&gt;id&lt;/th&gt;
    &lt;th&gt;index_prev&lt;/th&gt;&lt;th&gt;prev_id&lt;/th&gt;
    &lt;th&gt;index_next&lt;/th&gt;&lt;th&gt;next_id&lt;/th&gt;
  &lt;/tr&gt;
{section name=row loop=$rows}
  &lt;tr&gt;
    &lt;td&gt;{$smarty.section.row.index}&lt;/td&gt;&lt;td&gt;{$rows[row]}&lt;/td&gt;
    &lt;td&gt;{$smarty.section.row.index_prev}&lt;/td&gt;&lt;td&gt;{$rows[row.index_prev]}&lt;/td&gt;
    &lt;td&gt;{$smarty.section.row.index_next}&lt;/td&gt;&lt;td&gt;{$rows[row.index_next]}&lt;/td&gt;
  &lt;/tr&gt;
{/section}
&lt;/table&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>index  id    index_prev prev_id index_next next_id
0      1001  -1                 1          1002
1      1002  0          1001    2          1003
2      1003  1          1002    3          1004
3      1004  2          1003    4          1005
4      1005  3          1004    5
</code></pre>

<p>```</p>

<h4>.show</h4>

<p>show is used as a parameter to section and is a boolean value. If FALSE,
the section will not be displayed. If there is a {sectionelse} present,
that will be alternately displayed.</p>

<p>```</p>

<pre><code>{section name=customer loop=$customers show=$show_customer_info}
  {$smarty.section.customer.rownum} id: {$customers[customer]}&lt;br /&gt;
{/section}
 
{if $smarty.section.customer.show}
  the section was shown.
{else}
  the section was not shown.
{/if}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>1 id: 1000&lt;br /&gt;
2 id: 1001&lt;br /&gt;
3 id: 1002&lt;br /&gt;
 
the section was shown.
</code></pre>

<p>```</p>

<h3>{strip}</h3>

<p>Many times web designers run into the issue where white space and
carriage returns affect the output of the rendered HTML (browser
“features”), so you must run all your tags together in the template to
get the desired results. This usually ends up in unreadable or
unmanageable templates. Anything within {strip}{/strip} tags are
stripped of the extra spaces or carriage returns at the beginnings and
ends of the lines before they are displayed. This way you can keep your
templates readable, and not worry about extra white space causing
problems.</p>

<p>```
{<em> the following will be all run into one line upon output </em>}
{strip}</p>

<table border='0'>
 <tr>
  <td>
   <a href="{$url}">
    <font color="red">This is a test</font>
   </a>
  </td>
 </tr>
</table>


<p>{/strip}
```</p>

<p>```</p>

<pre><code>&lt;table border='0'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href="http://. snipped...&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</code></pre>

<p>```</p>

<p>if any white space or 'CR' charachter affect web layout, we could use
{srip} to avoid it</p>

<h2>Custom Functions</h2>

<p>Smarty comes with several custom functions that you can use in the
templates.</p>

<ul>
<li>{assign}</li>
<li>{counter}</li>
<li>{cycle}</li>
<li>{debug}</li>
<li>{eval}</li>
<li>{fetch}</li>
<li>{html_checkboxes}</li>
<li>{html_image}</li>
<li>{html_options}</li>
<li>{html_radios}</li>
<li>{html_select_date}</li>
<li>{html_select_time}</li>
<li>{html_table}</li>
<li>{mailto}</li>
<li>{math}</li>
<li>{popup}</li>
<li>{popup_init}</li>
<li>{textformat}</li>
</ul>


<h3>{assign}</h3>

<p>```</p>

<pre><code>{assign var='name' value='Bob'}
The value of $name is {$name}.
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>The value of $name is Bob.
</code></pre>

<p>```</p>

<p>examples 2:</p>

<p>```</p>

<pre><code>{assign var=running_total value=`$running_total+$some_array[row].some_value`}
</code></pre>

<p>```</p>

<h3>{counter}</h3>

<p>{counter} will remember the count on each iteration.</p>

<p>```</p>

<pre><code>{* initialize the count *}
{counter start=0 skip=2}&lt;br /&gt;
{counter}&lt;br /&gt;
{counter}&lt;br /&gt;
{counter}&lt;br /&gt;
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>0&lt;br /&gt;
2&lt;br /&gt;
4&lt;br /&gt;
6&lt;br /&gt;
</code></pre>

<p>```</p>

<h3>{cycle}</h3>

<p>{cycle} is used to alternate a set of values. This makes it easy to for
example, alternate between two or more colors in a table, or cycle
through an array of values.</p>

<ul>
<li>the advance attribute is used to repeat a value. When set to FALSE,
the next call to {cycle} will print the same value.</li>
</ul>


<p>```</p>

<pre><code>{section name=rows loop=$data}
&lt;tr bgcolor="{cycle values="#eeeeee,#d0d0d0"}"&gt;
   &lt;td&gt;{$data[rows]}&lt;/td&gt;
&lt;/tr&gt;
{/section}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;tr bgcolor="#eeeeee"&gt;
   &lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr bgcolor="#d0d0d0"&gt;
   &lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr bgcolor="#eeeeee"&gt;
   &lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>```</p>

<h3>{debug}</h3>

<p>{debug} dumps the debug console to the page. This works regardless of
the debug settings in the php script.</p>

<h3>{eval}</h3>

<p>```</p>

<pre><code>emphstart = &lt;strong&gt;
emphend = &lt;/strong&gt;
title = Welcome to {$company}'s home page!
ErrorCity = You must supply a {#emphstart#}city{#emphend#}.
ErrorState = You must supply a {#emphstart#}state{#emphend#}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{config_load file='setup.conf'}
 
{eval var=$foo}
{eval var=#title#}
{eval var=#ErrorCity#}
{eval var=#ErrorState# assign='state_error'}
{$state_error}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>This is the contents of foo.
Welcome to Foobar Pub &amp; Grill's home page!
You must supply a &lt;strong&gt;city&lt;/strong&gt;.
You must supply a &lt;strong&gt;state&lt;/strong&gt;.
</code></pre>

<p>```</p>

<h3>{fetch}</h3>

<p>{fetch} is used to retrieve files from the local file system, http, or
ftp and display the contents.</p>

<p>```</p>

<pre><code>{* include some javascript in your template *}
{fetch file='/export/httpd/www.example.com/docs/navbar.js'}
 
{* embed some weather text in your template from another web site *}
{fetch file='http://www.myweather.com/68502/'}
 
{* fetch a news headline file via ftp *}
{fetch file='ftp://user:password@ftp.example.com/path/to/currentheadlines.txt'}
{* as above but with variables *}
{fetch file="ftp://`$user`:`$password`@`$server`/`$path`"}
 
{* assign the fetched contents to a template variable *}
{fetch file='http://www.myweather.com/68502/' assign='weather'}
{if $weather ne ''}
  &lt;div id="weather"&gt;{$weather}&lt;/div&gt;
{/if}
</code></pre>

<p>```</p>

<h3>{html_checkboxes}</h3>

<p>```</p>

<pre><code>&lt;?php
 
$smarty-&gt;assign('cust_ids', array(1000,1001,1002,1003));
$smarty-&gt;assign('cust_names', array(
                                'Joe Schmoe',
                                'Jack Smith',
                                'Jane Johnson',
                                'Charlie Brown')
                              );
$smarty-&gt;assign('customer_id', 1001);
 
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{html_checkboxes name='id' values=$cust_ids output=$cust_names 
   selected=$customer_id  separator='&lt;br /&gt;'}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;label&gt;&lt;input type="checkbox" name="id[]" value="1000" /&gt;Joe Schmoe&lt;/label&gt;&lt;br /&gt;
&lt;label&gt;&lt;input type="checkbox" name="id[]" value="1001" checked="checked" /&gt;Jack Smith&lt;/label&gt;
&lt;br /&gt;
&lt;label&gt;&lt;input type="checkbox" name="id[]" value="1002" /&gt;Jane Johnson&lt;/label&gt;&lt;br /&gt;
&lt;label&gt;&lt;input type="checkbox" name="id[]" value="1003" /&gt;Charlie Brown&lt;/label&gt;&lt;br /&gt;
</code></pre>

<p>```</p>

<h3>{html_image}</h3>

<p>```</p>

<pre><code>{html_image file='pumpkin.jpg'}
{html_image file='/path/from/docroot/pumpkin.jpg'}
{html_image file='../path/relative/to/currdir/pumpkin.jpg'}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;img src="pumpkin.jpg" alt="" width="44" height="68" /&gt;
&lt;img src="http://blog.kent-chiu.com/path/from/docroot/pumpkin.jpg" alt="" width="44" height="68" /&gt;
&lt;img src="../path/relative/to/currdir/pumpkin.jpg" alt="" width="44" height="68" /&gt;
</code></pre>

<p>```</p>

<p>Technical Note: {html_image} requires a hit to the disk to read the
image and calculate the height and width. If you don't use template
caching, it is generally better to avoid {html_image} and leave image
tags static for optimal performance.</p>

<h3>{html_options}</h3>

<p>```</p>

<pre><code>&lt;?php
$smarty-&gt;assign('myOptions', array(
                                1800 =&gt; 'Joe Schmoe',
                                9904 =&gt; 'Jack Smith',
                                2003 =&gt; 'Charlie Brown')
                                );
$smarty-&gt;assign('mySelect', 9904);
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{html_options name=foo options=$myOptions selected=$mySelect}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;select name="foo"&gt;
&lt;option label="Joe Schmoe" value="1800"&gt;Joe Schmoe&lt;/option&gt;
&lt;option label="Jack Smith" value="9904" selected="selected"&gt;Jack Smith&lt;/option&gt;
&lt;option label="Charlie Brown" value="2003"&gt;Charlie Brown&lt;/option&gt;
&lt;/select&gt;
</code></pre>

<p>```</p>

<h3>{html_radios}</h3>

<p>```</p>

<pre><code>&lt;?php
 
$smarty-&gt;assign('cust_ids', array(1000,1001,1002,1003));
$smarty-&gt;assign('cust_names', array(
                              'Joe Schmoe',
                              'Jack Smith',
                              'Jane Johnson',
                              'Charlie Brown')
                              );
$smarty-&gt;assign('customer_id', 1001);
 
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{html_radios name='id' values=$cust_ids output=$cust_names
       selected=$customer_id separator='&lt;br /&gt;'}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;label for="id_1000"&gt;
&lt;input type="radio" name="id" value="1000" id="id_1000" /&gt;Joe Schmoe&lt;/label&gt;&lt;br /&gt;
&lt;label for="id_1001"&gt;&lt;input type="radio" name="id" value="1001" id="id_1001" checked="checked" /&gt;Jack Smith&lt;/label&gt;&lt;br /&gt;
&lt;label for="id_1002"&gt;&lt;input type="radio" name="id" value="1002" id="id_1002" /&gt;Jane Johnson&lt;/label&gt;&lt;br /&gt;
&lt;label for="id_1003"&gt;&lt;input type="radio" name="id" value="1003" id="id_1003" /&gt;Charlie Brown&lt;/label&gt;&lt;br /&gt;
</code></pre>

<p>```</p>

<h3>{html_select_date}</h3>

<p>```</p>

<pre><code>{html_select_date}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;select name="Date_Month"&gt;
&lt;option value="1"&gt;January&lt;/option&gt;
&lt;option value="2"&gt;February&lt;/option&gt;
&lt;option value="3"&gt;March&lt;/option&gt;
  ..... snipped .....
&lt;option value="10"&gt;October&lt;/option&gt;
&lt;option value="11"&gt;November&lt;/option&gt;
&lt;option value="12" selected="selected"&gt;December&lt;/option&gt;
&lt;/select&gt;
&lt;select name="Date_Day"&gt;
&lt;option value="1"&gt;01&lt;/option&gt;
&lt;option value="2"&gt;02&lt;/option&gt;
&lt;option value="3"&gt;03&lt;/option&gt;
  ..... snipped .....
&lt;option value="11"&gt;11&lt;/option&gt;
&lt;option value="12"&gt;12&lt;/option&gt;
&lt;option value="13" selected="selected"&gt;13&lt;/option&gt;
&lt;option value="14"&gt;14&lt;/option&gt;
&lt;option value="15"&gt;15&lt;/option&gt;
  ..... snipped .....
&lt;option value="29"&gt;29&lt;/option&gt;
&lt;option value="30"&gt;30&lt;/option&gt;
&lt;option value="31"&gt;31&lt;/option&gt;
&lt;/select&gt;
&lt;select name="Date_Year"&gt;
&lt;option value="2006" selected="selected"&gt;2006&lt;/option&gt;
&lt;/select&gt;
</code></pre>

<p>```</p>

<h3>{html_select_time}</h3>

<p>```</p>

<pre><code>{html_select_time use_24_hours=true}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;select name="Time_Hour"&gt;
&lt;option value="00"&gt;00&lt;/option&gt;
&lt;option value="01"&gt;01&lt;/option&gt;
... snipped ....
&lt;option value="08"&gt;08&lt;/option&gt;
&lt;option value="09" selected&gt;09&lt;/option&gt;
&lt;option value="10"&gt;10&lt;/option&gt;
... snipped ....
&lt;option value="22"&gt;22&lt;/option&gt;
&lt;option value="23"&gt;23&lt;/option&gt;
&lt;/select&gt;
&lt;select name="Time_Minute"&gt;
&lt;option value="00"&gt;00&lt;/option&gt;
&lt;option value="01"&gt;01&lt;/option&gt;
... snipped ....
&lt;option value="19"&gt;19&lt;/option&gt;
&lt;option value="20" selected&gt;20&lt;/option&gt;
&lt;option value="21"&gt;21&lt;/option&gt;
... snipped ....
&lt;option value="58"&gt;58&lt;/option&gt;
&lt;option value="59"&gt;59&lt;/option&gt;
&lt;/select&gt;
&lt;select name="Time_Second"&gt;
&lt;option value="00"&gt;00&lt;/option&gt;
&lt;option value="01"&gt;01&lt;/option&gt;
... snipped ....
&lt;option value="22"&gt;22&lt;/option&gt;
&lt;option value="23" selected&gt;23&lt;/option&gt;
&lt;option value="24"&gt;24&lt;/option&gt;
... snipped ....
&lt;option value="58"&gt;58&lt;/option&gt;
&lt;option value="59"&gt;59&lt;/option&gt;
&lt;/select&gt;
&lt;select name="Time_Meridian"&gt;
&lt;option value="am" selected&gt;AM&lt;/option&gt;
&lt;option value="pm"&gt;PM&lt;/option&gt;
&lt;/select&gt;
</code></pre>

<p>```</p>

<h3>{html_table}</h3>

<p>```</p>

<pre><code>&lt;?php
$smarty-&gt;assign( 'data', array(1,2,3,4,5,6,7,8,9) );
$smarty-&gt;assign( 'tr', array('bgcolor="#eeeeee"','bgcolor="#dddddd"') );
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{**** Example One ****}
{html_table loop=$data}
 
{**** Example Two ****}
{html_table loop=$data cols=4 table_attr='border="0"'}
 
{**** Example Three ****}
{html_table loop=$data cols="first,second,third,fourth" tr_attr=$tr}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>&lt;!-- example One output --&gt;
&lt;table border="1"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 
 
 
&lt;!-- example Two output --&gt;
&lt;table border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 
&lt;!-- example Three output --&gt;
&lt;table border="1"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;first&lt;/th&gt;&lt;th&gt;second&lt;/th&gt;&lt;th&gt;third&lt;/th&gt;&lt;th&gt;fourth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr bgcolor="#eeeeee"&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr bgcolor="#dddddd"&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
&lt;tr bgcolor="#eeeeee"&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<p>```</p>

<h3>{mailto}</h3>

<p>```</p>

<pre><code>{mailto address="me@example.com"}
&lt;a href="mailto:me@example.com" &gt;me@example.com&lt;/a&gt;
 
{mailto address="me@example.com" text="send me some mail"}
&lt;a href="mailto:me@example.com" &gt;send me some mail&lt;/a&gt;
 
{mailto address="me@example.com" encode="javascript"}
&lt;script type="text/javascript" language="javascript"&gt;
   eval(unescape('%64%6f% ... snipped ...%61%3e%27%29%3b'))
&lt;/script&gt;
 
{mailto address="me@example.com" encode="hex"}
&lt;a href="mailto:%6d%65.. snipped..3%6f%6d"&gt;&amp;#x6d;&amp;..snipped...#x6f;&amp;#x6d;&lt;/a&gt;
 
{mailto address="me@example.com" subject="Hello to you!"}
&lt;a href="mailto:me@example.com?subject=Hello%20to%20you%21" &gt;me@example.com&lt;/a&gt;
 
{mailto address="me@example.com" cc="you@example.com,they@example.com"}
&lt;a href="mailto:me@example.com?cc=you@example.com%2Cthey@example.com" &gt;me@example.com&lt;/a&gt;
 
{mailto address="me@example.com" extra='class="email"'}
&lt;a href="mailto:me@example.com" class="email"&gt;me@example.com&lt;/a&gt;
 
{mailto address="me@example.com" encode="javascript_charcode"}
&lt;script type="text/javascript" language="javascript"&gt;
    &lt;!--
    {document.write(String.fromCharCode(60,97, ... snipped ....60,47,97,62))}
    //--&gt;
&lt;/script&gt;
</code></pre>

<p>```</p>

<h3>{math}</h3>

<p>```</p>

<pre><code>{* ====== example a =====   *}
{* $height=4, $width=5 *}
{math equation="x + y" x=$height y=$width}
 
{* output is 9 *}
 
{* ====== example b =====   *}
{* $row_height = 10, $row_width = 20, #col_div# = 2, assigned in template *}
 
{math equation="height * width / division"
  height=$row_height
  width=$row_width
  division=#col_div#}
 
{* output is 100 *}
 
{* ====== example c =====   *}
{* you can use parenthesis *}
{math equation="(( x + y ) / z )" x=2 y=10 z=2}
 
{* output is 6 *}
 
{* ====== example d =====   *}
{* you can supply a format parameter in sprintf format *}
 
{math equation="x + y" x=4.4444 y=5.0000 format="%.2f"}
{* output is 9.44 *}
</code></pre>

<p>```</p>

<h3>{popup}</h3>

<p>```</p>

<pre><code>{* popup_init must be called once at the top of the page *}
{popup_init src='http://blog.kent-chiu.com/javascripts/overlib.js'}
 
{* create a link with a popup window when you move your mouse over *}
&lt;a href="mypage.html" {popup text='This link takes you to my page!'}&gt;mypage&lt;/a&gt;
 
{* you can use html, links, etc in your popup text *}
&lt;a href="mypage.html" {popup sticky=true caption='mypage contents'
text="&lt;ul&gt;&lt;li&gt;links&lt;/li&gt;&lt;li&gt;pages&lt;/li&gt;&lt;li&gt;images&lt;/li&gt;&lt;/ul&gt;"
snapx=10 snapy=10 trigger='onClick'}&gt;mypage&lt;/a&gt;
 
{* a popup  over a table cell *}
&lt;tr&gt;&lt;td {popup caption='Part details' text=$part_long_description}&gt;{$part_number}&lt;/td&gt;&lt;/tr&gt;
</code></pre>

<p>```</p>

<h3>{popup_init}</h3>

<p>{popup} is an integration of overLib, a library used for popup windows.
These are used for context sensitive information, such as help windows
or tooltips.</p>

<p>```</p>

<pre><code>&lt;head&gt;
{* popup_init must be called once at the top of the page *}
{popup_init src='javascripts/overlib/overlib.js'}
 
{* fully qualified url example *}
{popup_init src='http://myserver.org/my_js_libs/overlib/overlib.js'}
&lt;/head&gt;
 
// the first example will output
&lt;head&gt;
&lt;div id="overDiv" style="position:absolute; visibility:hidden; z-index:1000;"&gt;&lt;/div&gt;
&lt;script type="text/javascript" language="JavaScript" src="javascripts/overlib/overlib.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>

<p>```</p>

<h3>{textformat}</h3>

<p>```</p>

<pre><code>{textformat wrap=40 indent=4}
 
   This is foo.
   This is foo.
   This is foo.
   This is foo.
   This is foo.
   This is foo.
 
   This is bar.
 
   bar foo bar foo     foo.
   bar foo bar foo     foo.
   bar foo bar foo     foo.
   bar foo bar foo     foo.
   bar foo bar foo     foo.
   bar foo bar foo     foo.
   bar foo bar foo     foo.
 
{/textformat}
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>This is foo. This is foo. This
   is foo. This is foo. This is foo.
   This is foo.
 
   This is bar.
 
   bar foo bar foo foo. bar foo bar
   foo foo. bar foo bar foo foo. bar
   foo bar foo foo. bar foo bar foo
   foo. bar foo bar foo foo. bar foo
   bar foo foo.
</code></pre>

<p>```</p>

<h2>debug in smarty</h2>

<p>Expect to use <a href="#debug" title="php:smarty:smarty_101 ↵">{debug}</a>, an other way
is enabled smarty debugger will pop a windows and display all useful
information within it (a.k.a <a href="http://www.smarty.net/manual/en/chapter.debugging.console.php" title="http://www.smarty.net/manual/en/chapter.debugging.console.php">debuging
console</a>).</p>

<p>```</p>

<pre><code>$smarty-&gt;debugging = true;
$smarty-&gt;debug_tpl = SMARTY_DIR . "debug.tpl";
</code></pre>

<p>```</p>

<p>you can also combine the
<a href="http://www.php-debug.com/www/index.php" title="http://www.php-debug.com/www/index.php">PHP_Debug</a>
with smarty debugger page, check
<a href="http://www.phpinsider.com/smarty-forum/viewtopic.php?t=11125" title="http://www.phpinsider.com/smarty-forum/viewtopic.php?t=11125">here</a>
to get more details.</p>

<h2>Constants</h2>

<ul>
<li>SMARTY_DIR - full system path</li>
<li>SMARTY_CORE_DIR - full system path to the location of the Smarty
core files</li>
</ul>


<h2>Smarty Class Variables</h2>

<ul>
<li>\$template_dir</li>
<li>\$compile_dir</li>
<li>\$config_dir</li>
<li>\$plugins_dir</li>
<li>\$debugging</li>
<li>\$debug_tpl</li>
<li>\$debugging_ctrl</li>
<li>\$autoload_filters</li>
<li>\$compile_check</li>
<li>\$force_compile</li>
<li>\$caching</li>
<li>\$cache_dir</li>
<li>\$cache_lifetime</li>
<li>\$cache_handler_func</li>
<li>\$cache_modified_check</li>
<li>\$config_overwrite</li>
<li>\$config_booleanize</li>
<li>\$config_read_hidden</li>
<li>\$config_fix_newlines</li>
<li>\$default_template_handler_func</li>
<li>\$php_handling</li>
<li>\$security</li>
<li>\$secure_dir</li>
<li>\$security_settings</li>
<li>\$trusted_dir-</li>
<li>\$left_delimiter</li>
<li>\$right_delimiter</li>
<li>\$compiler_class</li>
<li>\$request_vars_order</li>
<li>\$request_use_auto_globals</li>
<li>\$error_reporting</li>
<li>\$compile_id</li>
<li>\$use_sub_dirs</li>
<li>\$default_modifiers</li>
<li>\$default_resource_type</li>
</ul>


<h2>Smarty Class Methods</h2>

<ul>
<li>append() – append an element to an assigned array</li>
<li>append_by_ref() – append values by reference</li>
<li>assign() – assign values to the templates</li>
<li>assign_by_ref() – assign values by reference</li>
<li>clear_all_assign() – clears the values of all assigned variables</li>
<li>clear_all_cache() – clears the entire template cache</li>
<li>clear_assign() – clears the value of an assigned variable</li>
<li>clear_cache() – clears the cache for a specific template</li>
<li>clear_compiled_tpl() – clears the compiled version of the
specified template resource</li>
<li>clear_config() – clears assigned config variables</li>
<li>config_load() – loads config file data and assigns it to the
template</li>
<li>display() – displays the template</li>
<li>fetch() – returns the template output</li>
<li>get_config_vars() – returns the given loaded config variable value</li>
<li>get_registered_object() – returns a reference to a registered
object</li>
<li>get_template_vars() – returns assigned variable value(s)</li>
<li>is_cached() – returns true if there is a valid cache for this
template</li>
<li>load_filter() – load a filter plugin</li>
<li>register_block() – dynamically register block functions plugins</li>
<li>register_compiler_function() – dynamically register a compiler
function plugin</li>
<li>register_function() – dynamically register template function
plugins</li>
<li>register_modifier() – dynamically register modifier plugin</li>
<li>register_object() – register an object for use in the templates</li>
<li>register_outputfilter() – dynamically register outputfilters</li>
<li>register_postfilter() – dynamically register postfilters</li>
<li>register_prefilter() – dynamically register prefilters</li>
<li>register_resource() – dynamically register resources</li>
<li>trigger_error() – output an error message</li>
<li>template_exists() – checks whether the specified template exists</li>
<li>unregister_block() – dynamically unregister block function plugins</li>
<li>unregister_compiler_function() – dynamically unregister a compiler
function</li>
<li>unregister_function – dynamically unregister template function
plugin</li>
<li>unregister_modifier() – dynamically unregister modifier plugin</li>
<li>unregister_object() – dynamically unregister an object</li>
<li>unregister_outputfilter() – dynamically unregister an output filter</li>
<li>unregister_postfilter() – dynamically unregister a postfilter</li>
<li>unregister_prefilter() – dynamically unregister a prefilter</li>
<li>unregister_resource() – dynamically unregister a resource plugin</li>
</ul>


<h2>Caching</h2>

<p>```</p>

<pre><code>&lt;?php
require('Smarty.class.php');
$smarty = new Smarty;
 
$smarty-&gt;caching = 1;
 
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<h3>is_cached()</h3>

<p>The is_cached() function can be used to test if a template has a valid
cache or not. If you have a cached template that requires something like
a database fetch, you can use this to skip that process.</p>

<p>WYou can keep parts of a page dynamic with the {insert} template
function. Let's say the whole page can be cached except for a banner
that is displayed down the side of the page. By using the {insert}
function for the banner, you can keep this element dynamic within the
cached content.</p>

<p>```</p>

<pre><code>&lt;?php
require('Smarty.class.php');
$smarty = new Smarty;
 
$smarty-&gt;caching = 1;
 
if(!$smarty-&gt;is_cached('index.tpl')) {
    // No cache available, do variable assignments here.
    $contents = get_database_contents();
    $smarty-&gt;assign($contents);
}
 
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<h2>push objects to page</h2>

<ol>
<li>register objects to the template. (<strong>RECOMMANDED</strong>)</li>
<li>assign() or assign_by_ref() function.</li>
</ol>


<p>```</p>

<pre><code>&lt;?php
// the object
 
class My_Object {
    function meth1($params, &amp;$smarty_obj) {
        return 'this is my meth1';
    }
}
 
$myobj = new My_Object;
 
// registering the object (will be by reference)
$smarty-&gt;register_object('foobar',$myobj);
 
// if we want to restrict access to certain methods or properties, list them
$smarty-&gt;register_object('foobar',$myobj,array('meth1','meth2','prop1'));
 
// if you want to use the traditional object parameter format, pass a boolean of false
$smarty-&gt;register_object('foobar',$myobj,null,false);
 
// We can also assign objects. assign_by_ref when possible.
$smarty-&gt;assign_by_ref('myobj', $myobj);
 
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>{* access our registered object *}
{foobar-&gt;meth1 p1='foo' p2=$bar}
 
{* you can also assign the output *}
{foobar-&gt;meth1 p1='foo' p2=$bar assign='output'}
the output was {$output}
 
{* access our assigned object *}
{$myobj-&gt;meth1('foo',$bar)}
</code></pre>

<p>```</p>

<h2>Filters</h2>

<ol>
<li>prefilters - activated before templates complied</li>
<li>postfilters - activated after templates complied</li>
<li>output filters - invoked by display() or fetch()</li>
</ol>


<h3>prefilters</h3>

<p>Can be used for filter out some information that should not output to
browser, ex: comment</p>

<p>```</p>

<pre><code>&lt;?php
// put this in your application
function remove_dw_comments($tpl_source, &amp;$smarty)
{
    return preg_replace("/&lt;!--#.*--&gt;/U",'',$tpl_source);
}
 
// register the prefilter
$smarty-&gt;register_prefilter('remove_dw_comments');
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<h3>postfilters</h3>

<p>it is useful if want to add some content to all templates.</p>

<p>```</p>

<pre><code>&lt;?php
// put this in your application
function add_header_comment($tpl_source, &amp;$smarty)
{
    return "&lt;?php echo \"&lt;!-- Created by Smarty! --&gt;\n\"; ?&gt;\n".$tpl_source;
}
 
// register the postfilter
$smarty-&gt;register_postfilter('add_header_comment');
$smarty-&gt;display('index.tpl');
?&gt; 
</code></pre>

<p>```</p>

<p>the postfilter above will make the compiled Smarty template index.tpl
look like:</p>

<p>```</p>

<pre><code>&lt;!-- Created by Smarty! --&gt;
{* rest of template content... *}
</code></pre>

<p>```</p>

<h3>output filters</h3>

<p><strong>TBD</strong></p>
]]></content>
  </entry>
  
</feed>
