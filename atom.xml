<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kent's Blog]]></title>
  <link href="http://blog.kent-chiu.com/atom.xml" rel="self"/>
  <link href="http://blog.kent-chiu.com/"/>
  <updated>2014-09-18T16:50:57+08:00</updated>
  <id>http://blog.kent-chiu.com/</id>
  <author>
    <name><![CDATA[Kent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Liquibase 筆記]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/08/30/liquibase-101/"/>
    <updated>2014-08-30T12:44:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/08/30/liquibase-101</id>
    <content type="html"><![CDATA[<!-- MarkdownTOC depth=0 -->


<ul>
<li>執行Liquibase指令的方式

<ul>
<li>maven goals:</li>
</ul>
</li>
<li>同步到xml到db

<ul>
<li>建立user table</li>
<li>加入額外的欄位</li>
<li>insert data</li>
<li>版控說明</li>
<li>完整的 db.changelog-master.xml</li>
</ul>
</li>
<li>從資料庫產生changelog.xml

<ul>
<li>只產生data</li>
<li>同時產生schema + data</li>
</ul>
</li>
<li>完整的pom.xml</li>
<li>個人心得</li>
<li>resource</li>
</ul>


<!-- /MarkdownTOC -->


<p><a href="http://www.liquibase.org/">Liquibase</a>是資料庫版本管理工具，設定的概念是把資料庫schema的異動(table的建立，column的異動，index的異動…)及資料內容的異動(insert，update，delete)用Liquibase定義的語法寫成xml格式change log，然後在資料庫裡多建立一個名為databasechangelog的table(如下)，用來記錄db更新了那些change log，當xml新增了更多的change log後，跟db裡的版號一比對，就可得知未同步的change log有那些，下次同步時，就會同步這些未同步過的change log。概念上跟 git 滿像的。</p>

<p>liquibase會在管理的database中加入databasechangelog table，用來記錄與xml同步的狀態</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mydb</span><span class="o">=#</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">databasechangelog</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">1</span> <span class="p">]</span><span class="o">-+</span><span class="c1">--------------------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">id</span>            <span class="o">|</span> <span class="mi">1</span>
</span><span class='line'><span class="n">author</span>        <span class="o">|</span> <span class="n">bob</span>
</span><span class='line'><span class="n">filename</span>      <span class="o">|</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">kent</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">liquibase</span><span class="o">-</span><span class="n">exercise</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">resources</span><span class="o">/</span><span class="n">db</span><span class="p">.</span><span class="n">changelog</span><span class="o">-</span><span class="n">master</span><span class="p">.</span><span class="n">xml</span>
</span><span class='line'><span class="n">dateexecuted</span>  <span class="o">|</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">30</span> <span class="mi">10</span><span class="p">:</span><span class="mi">28</span><span class="p">:</span><span class="mi">35</span><span class="p">.</span><span class="mi">235724</span>
</span><span class='line'><span class="n">orderexecuted</span> <span class="o">|</span> <span class="mi">1</span>
</span><span class='line'><span class="n">exectype</span>      <span class="o">|</span> <span class="n">EXECUTED</span>
</span><span class='line'><span class="n">md5sum</span>        <span class="o">|</span> <span class="mi">7</span><span class="p">:</span><span class="mi">17</span><span class="n">a94fcdd73aa8852c1f53e4d06ee651</span>
</span><span class='line'><span class="n">description</span>   <span class="o">|</span> <span class="n">createTable</span>
</span><span class='line'><span class="n">comments</span>      <span class="o">|</span>
</span><span class='line'><span class="n">tag</span>           <span class="o">|</span>
</span><span class='line'><span class="n">liquibase</span>     <span class="o">|</span> <span class="mi">3</span><span class="p">.</span><span class="mi">2</span><span class="p">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需特別注意，change log設定檔，一旦同步過後，如果設定檔中的id，檔案路徑等tag有改到，就會被當成新的change log，再次被同步到db中</p></blockquote>

<h4>執行Liquibase指令的方式</h4>

<p>要執行Liquibase指令，可透過command line，ant，maven，或API呼叫，本文採用maven的方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.liquibase<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>liquibase-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;changeLogFile&gt;</span>${basedir}/src/main/resources/db.changelog-master.xml<span class="nt">&lt;/changeLogFile&gt;</span>
</span><span class='line'>                <span class="nt">&lt;outputChangeLogFile&gt;</span>${basedir}/src/main/resources/output.xml<span class="nt">&lt;/outputChangeLogFile&gt;</span>
</span><span class='line'>                <span class="nt">&lt;driver&gt;</span>org.postgresql.Driver<span class="nt">&lt;/driver&gt;</span>
</span><span class='line'>                <span class="nt">&lt;url&gt;</span>jdbc:postgresql://localhost:5432/mydb<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>                <span class="nt">&lt;username&gt;</span>postgres<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>                <span class="nt">&lt;password&gt;</span>postgres<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>                <span class="nt">&lt;promptOnNonLocalDatabase&gt;</span>false<span class="nt">&lt;/promptOnNonLocalDatabase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>changeLogFile : 記錄要套用到db的xml檔(xml -> db)，執行update指令時，會依changeLogFile的內容異動資料庫schema</li>
<li>outputChangeLogFile: 從資料庫匯出xml時，會匯出到outputChangeLogFile (db -> xml)</li>
</ul>


<h4>maven goals:</h4>

<ul>
<li>changelogSync : 將changelog中未套用至db的change logs標示成已同步</li>
<li>changelogSyncSQL : 同<code>changelogSync</code>，但只產生sql，而不執行同步到db</li>
<li>generateChangeLog : 將目前資料庫的shcema(預設不含資料內容)匯出成 xml</li>
<li>dbDoc : 產生像java doc的文件</li>
<li>diff : 比對兩個資料庫間的差異</li>
<li>status : 顯示目前change set有那些change log會被套用到db</li>
<li>tag : 在liquibase產生在db的管理用table打上tag，之後可以當作rollback用</li>
<li>update : 更新未套用過的change set至db(xml -> db)</li>
<li>updateSQL : 同update，但產生更新的sql語法，不會真正同步db</li>
</ul>


<p>以下的指令沒用過，不太清楚實際的動作情形:</p>

<ul>
<li>clearCheckSums :Clears all checksums in the current changelog, so they will be recalculatednext update.</li>
<li>dropAll :
Drops all database objects owned by the user. Note that functions, procedures
and packages are not dropped.</li>
<li>futureRollbackSQL :
Generates the SQL that is required to rollback the database to current state
after the next update.</li>
<li>listLocks :
Lists all Liquibase updater locks on the current database.</li>
<li>releaseLocks :
Removes any Liquibase updater locks from the current database.</li>
<li>rollback :
Invokes Liquibase rollbacks on a database.</li>
<li>rollbackSQL :
Generates the SQL that is required to rollback the database to the specified
pointing attributes &#8216;rollbackCount&#8217;, &#8216;rollbackTag&#8217;</li>
<li>updateTestingRollback :
Applies the DatabaseChangeLogs to the database, testing rollback. This is done
by updating the database, rolling it back then updating it again.</li>
</ul>


<p>像 changelogSync，changelogSyncSQL，或 update，updateSQL，做的事情是差不多的，而有<em>SQL</em>後綴的版本，是會把要執行的SQL語法輸出到stdout，而不進行db的更新。</p>

<p>在使用上，新的database，一開始就用changelog的xml管理，所有的異動都透過xml管理，然後使用<code>mvn liquibase:update</code>，就會將plugin中的<code>changeLogFile</code>指定的
change log檔更新到db，如果是legcy的專案原本就有db的，可以用<code>mvn liquibase:generateChangeLog</code>把db匯成change log檔案至<code>outputChangeLogFile</code>指定的檔案中，之後再以產生出來的change log為基礎，做資料庫版本的管理。</p>

<h2>同步到xml到db</h2>

<h4>建立user table</h4>

<p>src/main/resources/db.changelog-master.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span>
</span><span class='line'>  <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span>
</span><span class='line'><span class="s">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- 建立 uesr table --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;create-user-table&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(50)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(50)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一次執行<code>mvn liquibase:update</code>執行後，原本完全沒有table的db多了三個table，</p>

<ul>
<li>databasechangelog是記錄同步用的，</li>
<li>databasechangeloglock是做locking的</li>
</ul>


<p>上面兩個都是直接由liquibase管理，不用去管它。</p>

<ul>
<li>user 則是上面的change log中的<code>&lt;createTable&gt;</code>建立的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>             List of relations
</span><span class='line'> Schema |         Name          | Type  |  Owner
</span><span class='line'>--------+-----------------------+-------+----------
</span><span class='line'> public | databasechangelog     | table | postgres
</span><span class='line'> public | databasechangeloglock | table | postgres
</span><span class='line'> public | user                  | table | postgres
</span></code></pre></td></tr></table></div></figure>


<p>user跟change log中定義的結構是一致的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>          Table &quot;public.user&quot;
</span><span class='line'>   Column   |         Type          | Modifiers
</span><span class='line'>------------+-----------------------+-----------
</span><span class='line'> first_name | character varying(50) | not null
</span><span class='line'> last_name  | character varying(50) |
</span></code></pre></td></tr></table></div></figure>


<h4>加入額外的欄位</h4>

<p>src/main/resources/db.changelog-master.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span>
</span><span class='line'>  <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span>
</span><span class='line'><span class="s">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   ...(略)
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 在user table加入 address column --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;addColumn-example&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改完changelog的xml檔，再次執行<code>mvn liquibase:update</code>後，user table就會多出address column，這次執行，因為databasechangelog中已有記錄<code>&lt;changeSet id="create-user-table" author="kent"&gt;</code>已經被執行過了，所以不會再次被執行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>           Table &quot;public.user&quot;
</span><span class='line'>   Column   |          Type          | Modifiers
</span><span class='line'>------------+------------------------+-----------
</span><span class='line'> first_name | character varying(50)  | not null
</span><span class='line'> last_name  | character varying(50)  |
</span><span class='line'> address    | character varying(255) |
</span></code></pre></td></tr></table></div></figure>


<h4>insert data</h4>

<p>src/main/resources/db.changelog-master.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span>
</span><span class='line'>  <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span>
</span><span class='line'><span class="s">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   ...(略)
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- insert兩筆測試資料 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;insert-example&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;kent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;cindy&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改完changelog的xml檔，執行<code>mvn liquibase:update</code>執行後，user table就會多出兩筆資料</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> first_name | last_name | address
</span><span class='line'>------------+-----------+---------
</span><span class='line'> kent       | chiu      |
</span><span class='line'> cindy      | chiu      |
</span></code></pre></td></tr></table></div></figure>


<h4>版控說明</h4>

<p>在實務上，只要是db的schema有要做異動，就一律從change log的設定檔改，如果是資料內容的異動，則視需求看要不要從change log異動。必要的預設資料可以在change log裡，透過insert tag來建立，可以省去每次重建table都還要另外建立預設資料的步驟。</p>

<p>搭配其他指令，還可以讓資料庫回到特一個特定的版本(change set)，這樣在開發時，就不用怕弄亂資料庫了。</p>

<h4>完整的 db.changelog-master.xml</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span>
</span><span class='line'>  <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span>
</span><span class='line'><span class="s">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 建立 uesr table --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;create-user-table&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(50)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(50)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 在user table加入 address column --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;addColumn-example&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span> <span class="na">type=</span><span class="s">&quot;varchar(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- insert兩筆測試資料 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">id=</span><span class="s">&quot;insert-example&quot;</span> <span class="na">author=</span><span class="s">&quot;kent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;kent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">catalogName=</span><span class="s">&quot;mydb&quot;</span> <span class="na">schemaName=</span><span class="s">&quot;public&quot;</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;cindy&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>從資料庫產生changelog.xml</h2>

<p>對於即有的database，可以透過<code>generateChangeLog</code>從資料庫產生change log，再以這個change log檔為基礎，之後的異動，再透過liquibase管理(xml -> db)</p>

<p>使用<code>generateChangeLog</code>進行匯出時，預設是只有schema(tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints)，如果要產
生資料，要在<code>diffTypes</code>中加入<strong>data</strong>這個type。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kent@Kents-MacBook-Pro:~/dev/liquibase-exercise<span class="nv">$ </span>mvn liquibase:generateChangeLog
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Scanning <span class="k">for </span>projects...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Building liquibase-exercise 1.1.0-SNAPSHOT
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- liquibase-maven-plugin:3.2.2:generateChangeLog <span class="o">(</span>default-cli<span class="o">)</span> @ liquibase-exercise ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Executing on Database: jdbc:postgresql://localhost:5432/mydb
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Generating Change Log from database postgres @ jdbc:postgresql://localhost:5432/mydb <span class="o">(</span>Default Schema: public<span class="o">)</span>
</span><span class='line'>INFO 8/30/14 12:30 PM: liquibase: /Users/kent/dev/liquibase-exercise/src/main/resources/output.xml does not exist, creating
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Output written to Change Log file, /Users/kent/dev/liquibase-exercise/src/main/resources/output.xml
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> BUILD SUCCESS
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 2.087 s
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Finished at: 2014-08-30T12:31:00+08:00
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Final Memory: 8M/61M
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>執行完<code>generateChangeLog</code>可以看到change log產生到我們plugin的設定中指定的位置<code>src/main/resources/output.xml</code></p>

<p>如果沒有特別指定<code>diffTypes</code>參數，那只會產生&#8217;tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints&#8217;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span> <span class="na">xmlns:ext=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;kent (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1409373059484-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;kent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;cindy&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;kent (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1409373299327-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(50)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(50)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>只產生data</h4>

<p>指定<code>diffTypes=data</code>，就會只產生資料，不會有schema的資訊，如果有需要，也可以直接將資料匯出成csv檔</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn liquibase:generateChangeLog -Dliquibase.diffTypes<span class="o">=</span>data
</span></code></pre></td></tr></table></div></figure>


<p>產生的xml如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span> <span class="na">xmlns:ext=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;kent (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1409373576402-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;kent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>        <span class="nt">&lt;insert</span> <span class="na">tableName=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;first_name&quot;</span> <span class="na">value=</span><span class="s">&quot;cindy&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;last_name&quot;</span> <span class="na">value=</span><span class="s">&quot;chiu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>同時產生schema + data</h4>

<p>如果要產生的xml如下，那<code>diffTypes</code>就要設定為<code>tables,views,columns,indexs,foreignkeys,primarykeys,uniqueconstraints,data</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn liquibase:generateChangeLog -Dliquibase.diffTypes<span class="o">=</span>tables,views,columns,indexs,foreignkeys,primarykeys,uniqueconstraints,data
</span></code></pre></td></tr></table></div></figure>


<p>產生的xml如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span> <span class="nv">encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span> <span class="nv">standalone</span><span class="o">=</span><span class="s2">&quot;no&quot;</span>?&gt;
</span><span class='line'>&lt;databaseChangeLog <span class="nv">xmlns</span><span class="o">=</span><span class="s2">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span> xmlns:ext<span class="o">=</span><span class="s2">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext&quot;</span> xmlns:xsi<span class="o">=</span><span class="s2">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xsi:schemaLocation<span class="o">=</span><span class="s2">&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd&quot;</span>&gt;
</span><span class='line'>    &lt;changeSet <span class="nv">author</span><span class="o">=</span><span class="s2">&quot;kent (generated)&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;1409373576402-1&quot;</span>&gt;
</span><span class='line'>        &lt;insert <span class="nv">tableName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;kent&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;chiu&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;address&quot;</span>/&gt;
</span><span class='line'>        &lt;/insert&gt;
</span><span class='line'>        &lt;insert <span class="nv">tableName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;cindy&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;chiu&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;address&quot;</span>/&gt;
</span><span class='line'>        &lt;/insert&gt;
</span><span class='line'>    &lt;/changeSet&gt;
</span><span class='line'>    &lt;changeSet <span class="nv">author</span><span class="o">=</span><span class="s2">&quot;kent (generated)&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;1409373769747-1&quot;</span>&gt;
</span><span class='line'>        &lt;createTable <span class="nv">tableName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;VARCHAR(50)&quot;</span>&gt;
</span><span class='line'>                &lt;constraints <span class="nv">nullable</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>/&gt;
</span><span class='line'>            &lt;/column&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;VARCHAR(50)&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;address&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;VARCHAR(255)&quot;</span>/&gt;
</span><span class='line'>        &lt;/createTable&gt;
</span><span class='line'>    &lt;/changeSet&gt;
</span><span class='line'>    &lt;changeSet <span class="nv">author</span><span class="o">=</span><span class="s2">&quot;kent (generated)&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;1409373769747-2&quot;</span>&gt;
</span><span class='line'>        &lt;insert <span class="nv">tableName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;kent&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;chiu&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;address&quot;</span>/&gt;
</span><span class='line'>        &lt;/insert&gt;
</span><span class='line'>        &lt;insert <span class="nv">tableName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;cindy&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;chiu&quot;</span>/&gt;
</span><span class='line'>            &lt;column <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;address&quot;</span>/&gt;
</span><span class='line'>        &lt;/insert&gt;
</span><span class='line'>    &lt;/changeSet&gt;
</span><span class='line'>&lt;/databaseChangeLog&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>完整的pom.xml</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.kent<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>liquibase-exercise<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.postgresql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>postgresql<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>9.3-1101-jdbc41<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.liquibase<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>liquibase-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;changeLogFile&gt;</span>${basedir}/src/main/resources/db.changelog-master.xml<span class="nt">&lt;/changeLogFile&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;outputChangeLogFile&gt;</span>${basedir}/src/main/resources/output.xml<span class="nt">&lt;/outputChangeLogFile&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;driver&gt;</span>org.postgresql.Driver<span class="nt">&lt;/driver&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;url&gt;</span>jdbc:postgresql://localhost:5432/mydb<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;username&gt;</span>postgres<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;password&gt;</span>postgres<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;promptOnNonLocalDatabase&gt;</span>false<span class="nt">&lt;/promptOnNonLocalDatabase&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- 同時產生資料跟schema --&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">                    &lt;diffTypes&gt;tables, views, columns, indexs,foreignkeys, primarykeys, uniqueconstraints, data&lt;/diffTypes&gt;</span>
</span><span class='line'><span class="c">                    --&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>個人心得</h2>

<p>會接觸liquibase，主要是因為維護的專案，是屬於產品類型的，一但delivery給客戶後，要昇級程式，常不可避免的會動到db的結構或資料。
新增table跟column通常都不太會有問題，但是如果是要做delete或rename，甚至是對即有資料內容做一些格式的調整或轉換，一些簡單的sql指令(ddl或dml)就有點使不上力了，可能就要寫一些sql的funciton來處理，如果邏輯更複雜時就需要用程式處理，</p>

<p>在當時並沒有比較適合的solution，於是採用了類似Ruby On Rails管資料庫版本的方式做了一套，大部份的異動，都還是希望透過
sql script就能處理，但有些最基本的判斷，像column存不存在，不存在就建立，或column的rename，這些透過sql也不是很好處理，通常都要透過自製的sql function來處理，如果比較複雜的，就寫一個小程式來取代原來的sql script，使用上並不方便，而且
維護成本也不小，光每次測試sql patch，所以這次斷然決定換成用liquibase來管理，看看會不會有顯著的改善，目前看來使用經
驗算是不錯。</p>

<h2>resource</h2>

<ul>
<li><a href="http://www.liquibase.org/documentation/maven/index.html">http://www.liquibase.org/documentation/maven/index.html</a> - liquibase maven plugin</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Boot筆記]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/05/30/spring-boot-101/"/>
    <updated>2014-05-30T12:44:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/05/30/spring-boot-101</id>
    <content type="html"><![CDATA[<p>pom.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.example<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>myproject<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.1.0.M2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Additional lines to be added here... --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>maven設定檔是透過<code>&lt;parent&gt;</code> tag繼承 spring-boot預先定義好的 parent pom，在parent的pom檔中，有許多預設的dependencies，所以，引用到 parent pom裡已預先定義好的 dependency 時，就不需再定義該 <code>&lt;dependency&gt;</code> tag下的 <code>&lt;version&gt;</code> tag。在本文章中的 <code>&lt;dependency&gt;</code>  只要是沒加 <code>&lt;version&gt;</code> tag的，都是因為 parent pom 已有預先定義好的 dependencies.</p>

<p>建議可以調 parent 的 pom.xml 出來看看，會比較清楚 spring boot 的 building 機制，eclipse 跟 intelliJ 都支援 link 到 parent pom 的功能。</p>

<p>Spring Boot Hello World:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">home</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Let&#39;s inspect the beans provided by Spring Boot:&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">beanNames</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">beanNames</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 表列出引用到的 beans</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">beanName</span> <span class="o">:</span> <span class="n">beanNames</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比起傳統的 Spring RESTful 程式，spring boot簡單許多。</p>

<p>spring-boot-maven-plugin主要的功能是 build 出 war 檔或可執行的 jar 檔</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行 <code>mvn spring-boot:run</code> ， 加入 <code>--debug</code> 參數可以dump auto config 的細節， 方便除錯 <code>mvn spring-boot:run --debug</code>，如果是在IDE執行成 Application，那把<code>--debug</code>加到program argument即可，或者是直接寫到<code>SpringApplicationBuilder</code></p>

<p><code>new SpringApplicationBuilder(MyConfig.class).run(new String[]{"--debug"});</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=========================</span>
</span><span class='line'>AUTO-CONFIGURATION <span class="nv">REPORT</span>
</span><span class='line'><span class="o">=========================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Positive matches:
</span><span class='line'>-----------------
</span><span class='line'>
</span><span class='line'>   AuditAutoConfiguration.AuditEventRepositoryConfiguration
</span><span class='line'>      - @ConditionalOnMissingBean <span class="o">(</span>types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all<span class="o">)</span> found no beans <span class="o">(</span>OnBeanCondition<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   EndpointAutoConfiguration#autoConfigurationAuditEndpoint
</span><span class='line'>      - @ConditionalOnBean <span class="o">(</span>types: org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport; SearchStrategy: all<span class="o">)</span> found the following <span class="o">[</span>autoConfigurationReport<span class="o">]</span> @ConditionalOnMissingBean <span class="o">(</span>types: org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint; SearchStrategy: current<span class="o">)</span> found no beans <span class="o">(</span>OnBeanCondition<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   EndpointAutoConfiguration#beansEndpoint
</span><span class='line'>      - @ConditionalOnMissingBean <span class="o">(</span>types: org.springframework.boot.actuate.endpoint.BeansEndpoint; SearchStrategy: all<span class="o">)</span> found no beans <span class="o">(</span>OnBeanCondition<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想要抓到Application傳進來的參數，可以implement <code>CommandLineRunner</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.*</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBean</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do something...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Properties</h2>

<p>屬性檔預設預案是在 classpath下的 application.properties或 application-{profile}.properties</p>

<p>屬性中可以用亂數產生器,因為使用了<code>RandomValuePropertySource</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">my.secret</span><span class="o">=</span><span class="s">${random.value}</span>
</span><span class='line'><span class="na">my.number</span><span class="o">=</span><span class="s">${random.int}</span>
</span><span class='line'><span class="na">my.bignumber</span><span class="o">=</span><span class="s">${random.long}</span>
</span><span class='line'><span class="na">my.number.less.than.ten</span><span class="o">=</span><span class="s">${random.int(10)}</span>
</span><span class='line'><span class="na">my.number.in.range</span><span class="o">=</span><span class="s">${random.int[1024,65536]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在屬性檔的屬性可以透過<code>@Value</code>及<code>@ConfigurationProperties</code> binding 到程式， 也可以jsr-303的 bean validation 進行驗證。</p>

<h2>JPA</h2>

<p>要在 spring boot 中啟用 JPA也相當簡單， 只要加入 <code>spring-boot-starter-data-jpa</code> 跟 database driver即可，其他的設定像 hibernate.dialect 等 spring boot 會依照使用的資料庫選擇適合的設定。</p>

<p>使用 hsqldb 當 database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 mysql 當 database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用 in-memory database，像hsqldb，h2，derby … 當db，jpa會自動建立 entity 對應的table，如果是其他 database，則需自行建立，或者也可以透過 application.properties 設定檔來改寫預設的行為。</p>

<h2>Testing</h2>

<h4>Unit Test</h4>

<p>spring一向強調測試的重要性，在spring寫測試比起在其它 framework 下會愉快許多。spring boot 在測試上，在基於 spring 本身的基礎上，又加了一些方便的配置。</p>

<p>在繼承 parent pom之後，unit test常用的三板斧，就會被配置在 test scope了(不會被 deploy 成product)，這三板斧是:</p>

<ol>
<li>Junit - 單元測試lib</li>
<li>Hamcrest - 斷言工具 (assertion)，搭配 <code>assertThat</code> 用的(不要再 <code>assertEquals</code>，請一律<code>assertThat</code>吧)</li>
<li>Mockito - 目前java最流行的 mock framework</li>
</ol>


<h4>Database Test</h4>

<p>如果要做的測試跟db有關，建議採用in-memory database，不要mock，但如果沒有採用像 jpa 這種會自動依 dialect 轉換 sql 語法的 framework時，可能就要對測試方式做調整。在資料庫的測試，我通常是採用 hsqldb + dbunit，而production的database，即依專案需求而決定，使用jpa時，單元測試時在 hsqldb，真正執行時在其他db ex: mysql， postgresql，…，都沒遇過太大的問題。</p>

<p>但是如果沒辦法使用jpa時(通常會換成 JdbcTemplate)，而且又使用到許多特定資料庫特有的功能時，就會採用 dbunit + rollback base的測試，這一類的測試，在測試程式的撰寫上，通常需要花比較多的心力。</p>

<h4>Web Test</h4>

<p>web test，spring 本來就有提供 MockMvc 的 mock object，4.x 版後以的 spring mvc test 都改用 fluent api 來寫測試了。</p>

<h4>Spring Boot Application Test</h4>

<h4>unsorted</h4>

<ul>
<li><del>在專案中所有的 classes 都會被 <code>@ComponentScan</code> 掃描</del> ﹣》 只有base package</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 lambda]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/03/14/java-8-lambda/"/>
    <updated>2014-03-14T12:47:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/03/14/java-8-lambda</id>
    <content type="html"><![CDATA[<p>基本語法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">expression</span>
</span><span class='line'><span class="n">or</span>
</span><span class='line'>    <span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">statements</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">expression</span>
</span><span class='line'><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>    <span class="c1">// 計算 x + y 的結果</span>
</span><span class='line'><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hi! &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">statements</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">3</span><span class="o">;</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參數的型別如果沒有指定的，會進行類型推斷(type infer)</p>

<h4>functional interface</h4>

<p>只有定義一個抽象方法的interface叫&#8221;functional interface&#8221;，functional interface主要的用途是做 lambda expression.</p>

<p>在對lambda的使用還不熟悉時，可以先用anonymous class來一步一步轉換成lambda</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Stream裡filter method的宣告，filter method需要傳入一個Predicate的interface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">BaseStream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="n">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">predicate</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Predicate主要是透過test這個method來解決結果是true，或false </span>
</span><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Evaluates this predicate on the given argument.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param t the input argument</span>
</span><span class='line'><span class="cm">     * @return {@code true} if the input argument matches the predicate,</span>
</span><span class='line'><span class="cm">     * otherwise {@code false}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>sample:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 先用anonymous實作，這邊就可以看出來，如果Predicate有超過一個的abstract method，</span>
</span><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 執行後，results會只包含list中大於3的數，所以為4,5這兩個數字    </span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">predicate</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 傳成lambda時，因為Predicate是function interface，只有一個abstract method，</span>
</span><span class='line'>    <span class="c1">// 所以，我們可以很清楚的知道，我們要實作的method是`public boolean test(Integer i)`</span>
</span><span class='line'>    <span class="c1">// 傳入的參數為Integer, 而實作的logic為判斷參數是否大於3</span>
</span><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="k">return</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// java8的compier類型推斷(type infer)能力變強了，可以compiler可以由程式的上下文(context)猜出正確的型別，</span>
</span><span class='line'>    <span class="c1">// lambda expression可以再簡化如下</span>
</span><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="k">return</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 再把冗餘的括號點去掉，lambda expression預設會return最後一行的值，所以，return也可以去掉    </span>
</span><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在filter中套上predicate</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">predicate</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 對predicate執行 inline variable的refactory</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Predicate中，還有幾個default method，主要是用來輔助Predicate的使用，例如我們想取出上面相反的結果(不是大於3的值)，
直覺的方式，就是判斷的邏輯 <code>i&gt;3</code> 改寫成 <code>!(i &gt; 3)</code>，而Predicate.negate()這個default method就是在做這件事</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;</span>  <span class="c1">// 先把lambda express從filter method中extract出來</span>
</span><span class='line'>    <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">negate</span> <span class="o">=</span> <span class="n">predicate</span><span class="o">.</span><span class="na">negate</span><span class="o">();</span> <span class="c1">// 取反向的值 </span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">negate</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span> <span class="c1">// 得到的results為 1, 2, 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，我們用<code>predicate.negate()</code>就不用直接改寫原來的邏輯，只要直接對predicate做negate的運算即可。</p>

<p>Predicate還有幾個default methods都是在做Predicate運算時常會用到的，功用跟<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Predicates.html">guava lib中的Predicats</a>類型，
Predicate function interface 的完整程式如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@FunctionalInterface</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">and</span><span class="o">(</span><span class="n">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">other</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">test</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">other</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">negate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">test</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">or</span><span class="o">(</span><span class="n">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">other</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">test</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">||</span> <span class="n">other</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">isEqual</span><span class="o">(</span><span class="n">Object</span> <span class="n">targetRef</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">targetRef</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">?</span> <span class="nl">Objects:</span><span class="o">:</span><span class="n">isNull</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">object</span> <span class="o">-&gt;</span> <span class="n">targetRef</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lambda expression</h4>

<p>A lambda expression is an instance of a functional interface</p>

<h4>lambda expression常見的參數為</h4>

<ul>
<li>Predicate：接受一個參數，對參數做評估後返回一個boolean的值
ex: 過濾條件時，傳入過濾條件的參數，如果成立(true) 就進行過濾</li>
<li>Function：接受一個參數並產出結果
ex: 輸入字串，返回數字</li>
<li>Supplier：不接受参數，並返回結果
ex: 對stream中的元素計算後產生資料</li>
<li>Consumer：接受一個參數，但不返回結果(返回void)
ex: 經function運算後，影響輸入的結果(副作用)</li>
</ul>


<p>上面的class都是零元或一元運算子，還有二元運算子，功能類似，差異之處是在都是接受兩個參數</p>

<ul>
<li>BiConsumer</li>
<li>BiFunction</li>
<li>BiPredicate</li>
</ul>


<h1>RESOURCE</h1>

<ul>
<li><a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">http://www.techempower.com/blog/2013/03/26/everything-about-java-8/</a></li>
<li><a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">http://winterbe.com/posts/2014/03/16/java-8-tutorial/</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/collections/streams/reduction.html">http://docs.oracle.com/javase/tutorial/collections/streams/reduction.html</a> - reduce</li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html">http://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a> - Java 8 中的 Streams API 详解</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 好用工具箱]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/03/14/java-8-utility-object/"/>
    <updated>2014-03-14T12:43:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/03/14/java-8-utility-object</id>
    <content type="html"><![CDATA[<p>java 8 多了不少好用的工具類class，例如: 字串處理，null處理…之前透常是透過<a href="https://code.google.com/p/guava-libraries/">google guava</a>，或<a href="http://commons.apache.org/proper/commons-lang/">apache common lang</a>來處理，現在java 8 就有內建了。</p>

<ul>
<li><a href="http://download.java.net/jdk8/docs/api/java/util/Optional.html">Optional</a> 更安全、方便處理NULL的物件</li>
<li>Objects</li>
<li>StringJoin</li>
</ul>


<h4>Objects</h4>

<ul>
<li>requireNonNull(T obj) 如果傳入的obj為空，會丟出<code>NullPointerException</code>異常</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 時間、日期 API]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/03/14/java-8-date-and-time-api/"/>
    <updated>2014-03-14T12:35:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/03/14/java-8-date-and-time-api</id>
    <content type="html"><![CDATA[<p>在做java 8 time轉換傳統的 java.util.Date時，要記住一個大原則，就是java 8的 LocalXXX是沒時區的，所以，要想辦法補上時區之後，之後再轉成Instant，就很容易轉換到Date(雖然整個過程實在說不上<strong>容易</strong>)</p>

<ul>
<li>Date -> LocalDate</li>
<li>Date -> LocalTime</li>
<li>Date -> LocalDateTime</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 先轉成 Instant</span>
</span><span class='line'><span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">toInstant</span><span class="o">();</span>
</span><span class='line'><span class="c1">// LocalDateTime 有提供 ofInstant 的factory method</span>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">localDateTime</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">ofInstant</span><span class="o">(</span><span class="n">instant</span><span class="o">,</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>  <span class="c1">//2014-06-06T00:41:19.550 </span>
</span><span class='line'><span class="c1">// LocalDate,LocalTime 沒有提供 ofInstant，需先轉成 LocalDateTime 後再 toLocalDate() 或 toLocalTime()</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">localDate</span>  <span class="o">=</span> <span class="n">localDateTime</span><span class="o">.</span><span class="na">toLocalDate</span><span class="o">();</span> <span class="c1">//00:41:19.550</span>
</span><span class='line'><span class="n">LocalTime</span> <span class="n">localTime</span> <span class="o">=</span> <span class="n">localDateTime</span><span class="o">.</span><span class="na">toLocalTime</span><span class="o">();</span> <span class="c1">//2014-06-06</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>LocalDate -> Date</li>
<li>LocalTime -> Date</li>
<li>LocalDateTime -> Date</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LocalDateTime</span> <span class="n">localDateTime</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="n">localDateTime</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(</span><span class="n">ZoneOffset</span><span class="o">.</span><span class="na">UTC</span><span class="o">);</span>
</span><span class='line'><span class="n">Date</span> <span class="n">date</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>日期格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd HH:mm&quot;</span><span class="o">));</span> <span class="c1">//2014-06-06 00:52</span>
</span></code></pre></td></tr></table></div></figure>


<p>LocalDateTime 是沒有時區資訊的，所以，如果要轉成 epoch (unix time)，就必需要加入時區資訊，沒有加入時區，就無法直接轉換。</p>

<p>LocalDateTime 對人來說，是使用上比較直覺的，不管在世界上任何一個地方 &#8216;2014-1-1 12:00:00&#8217; 都是指2014年第一天的中午12點，不用去管時區，但，如果把這個時間轉成格林威治時間(GMT)，或世界協調時間(UTC)，就必需加上時區的資料，才會正確，美國紐約的 &#8216;2014-1-1 12:00:00&#8217;跟台灣的&#8217;2014-1-1 12:00:00&#8217;, 一定是不一樣的，美國紐約是GMT - 4:00，台灣是GMT + 8:00</p>

<p>java的 getMillis() 的是採 unix timesamp(epoch)的設計，所以，如果要轉成 MILL</p>

<blockquote><p><a href="http://www.computerhope.com/jargon/e/epoch.htm">epoch</a>通常是指從1970/1/1 開始增加至今的秒數，最多可到2038-1-19 03:14:07 (32位元有號數最大值: 2,147,483,647)
<img src="http://en.wikipedia.org/wiki/Year_2038_problem#mediaviewer/File:Year_2038_problem.gif" alt="img" /></p></blockquote>

<h2>Resource</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/datetime/iso/legacy.html">http://docs.oracle.com/javase/tutorial/datetime/iso/legacy.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UMLet Sequence Diagram]]></title>
    <link href="http://blog.kent-chiu.com/blog/2014/03/14/umlet-sequence-diagram/"/>
    <updated>2014-03-14T12:05:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2014/03/14/umlet-sequence-diagram</id>
    <content type="html"><![CDATA[<p><img src="http://blog.kent-chiu.com/images/2014-05-14/umlet-sequence-diagram_001.jpg" alt="img_001" /></p>

<pre><code>title: sample
_alpha:A~id1_|_beta:B~id2_|_gamma:G~id3_
id1-&gt;&gt;id2:id1,id2
id2-/&gt;id1:async Msg.
id3-&gt;&gt;&gt;id1:id1,id3
id1.&gt;id3:id1,id3:async return Msg
id1-&gt;id1:id1:self
// this comment will not be render
iframe{:interaction frame
id2-&gt;id3:id1,id3:async Msg.
iframe}
</code></pre>

<p><code>title</code> : 圖左上方的標題</p>

<h2>Life Cycle</h2>

<p><code>_alpha:A~id1_</code> : alpha 是instance name, A: 是class name, id1 是識別用的id，用來當作其他圖示的reference，加上 <code>_</code> 則會出現下畫線</p>

<h2>Message</h2>

<p>訊息流向的基本格式為: <code>line:active:name</code> ，可以分成三段</p>

<ol>
<li><p>第一段是訊息的線條
訊息的線條又可分為</p>

<ul>
<li><code>-&gt;&gt;</code> 同步，空心箭頭</li>
<li><code>-/&gt;</code> 非同步，單邊箭頭</li>
<li>&#8217;->>>&#8217; 同步，實心箭頭</li>
<li>&#8217;.>&#8217; 非同步，虛線</li>
<li>&#8217;->&#8217; 同步</li>
</ul>
</li>
<li><p>第二段是訊息是否活動中
如果是活動中的訊息，會出現 execution specification (或者是 activation)</p></li>
<li><p>第三段是訊息的名稱，可省略</p></li>
</ol>


<p>ex:</p>

<p><code>id1-&gt;&gt;id2:id1,id2</code> :  <code>-&gt;&gt;</code> 表示同步訊息，從id1到id2
<code>id2-/&gt;id1:async Msg</code> : <code>-/&gt;</code> 表示非同步訊息，<code>async Msg</code>是訊息名稱
<code>3-&gt;&gt;&gt;1:1,3</code> : <code>-&gt;&gt;&gt;</code> 表示</p>

<h2>Interaction Fragment</h2>

<p>在 iframe 包來的範圍是 interaction fragment</p>

<h2>Resource</h2>

<ul>
<li><a href="http://www.uml-diagrams.org/sequence-diagrams.html">http://www.uml-diagrams.org/sequence-diagrams.html</a> uml圖示說明</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python type hint in IDEA]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea/"/>
    <updated>2013-12-28T12:09:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/12/28/python-type-hint-in-idea</id>
    <content type="html"><![CDATA[<p>在現代的IDE中，程式碼自動完成(code assist or code complete)幾乎是必備的基本功能，這個功能在靜態功能型別的語言中，IDE通常可以很完全的運作；但是在動態型別的語言中，就常常沒辦法推斷出正確的型別了。
因為有的IDE從另外從程式碼外的其它地方(通常是註解)加入協助IDE做類型推斷(type infer)的動作。</p>

<p>IDEA的python plugin(或 pycharm)也是使用註解的做type hint來協助IDEA做類型推斷。如果是使用python3開發，那麼還可以用<a href="http://www.python.org/dev/peps/pep-3107/">PEP-3107</a>。
<em>PEP-3107</em>在語言的級別上加入了參數跟傳回值的型別，這樣IDE就有辦法做類型的推斷。</p>

<pre><code># 未採用PEP-3107的method宣告方式
def a_method(foo, bar) :
    return foobar;

# 採用PEP-3107的method宣告方式
def a_method(foo : TypeFoo, bar: TypeBar) -&gt; TypeFooBar
</code></pre>

<p>TypeFoo是參數foo的型別，TypeBar是參數bar的型別，而TypeFooBar則是 return value foobar的型別</p>

<p>但是以下幾種狀況是<em>PEP-3107</em>無法處理的:</p>

<ul>
<li>locale variable，如果 locale variable不是某個method的傳回值，那就沒有型別</li>
<li>field ，field也沒有型別</li>
<li>third party的lib，third party的lib寫法可能不是採用<em>PEP-3107</em>方式，所以ide也無法提供code complete</li>
</ul>


<p>計對這些狀況，可以用一開始提到的方式，套用特定的註解來協助IDE做類型推斷。</p>

<pre><code>r = praw.Reddit(user_agent='User-Agent: rbot/1.0 by draculacwg')
''':type: six.Subreddit ''' 
subreddit = r.get_subreddit(subreddits)
submissions = subreddit.get_new()
</code></pre>

<p>原來的<code>subreddit.get_new()</code>，原本沒有code complete，加入<code>''':type: six.Subreddit '''</code> 後，就會有code complete了</p>

<h4>IDEA 建議的type hinting 語法</h4>

<ul>
<li>Foo # Class Foo visible in the current scope</li>
<li>x.y.Bar # Class Bar from x.y module</li>
<li>Foo | Bar # Foo or Bar</li>
<li>(Foo, Bar) # Tuple of Foo and Bar</li>
<li>list[Foo] # List of Foo elements</li>
<li>dict[Foo, Bar] # Dict from Foo to Bar</li>
<li>T # Generic type (T-Z are reserved for generics)</li>
<li>T &lt;= Foo # Generic type with upper bound Foo</li>
<li>Foo[T] # Foo parameterized with T</li>
<li>(Foo, Bar) -> Baz # Function of Foo and Bar that returns Baz</li>
<li>list[dict[str, datetime]] # List of dicts from str to datetime (nested arguments)</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html">http://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html</a> - pycharm 或 IDEA python plugin中 type hint的方式</li>
<li><a href="http://www.python.org/dev/peps/pep-0257/">http://www.python.org/dev/peps/pep-0257/</a> - PEP 257  : Docstring Conventions</li>
<li><a href="http://www.python.org/dev/peps/pep-3107/">http://www.python.org/dev/peps/pep-3107/</a> - PEP 3107 : python 3 中可用的類型註解</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Mac開發環境設定”]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/12/28/mac-dev-setup/"/>
    <updated>2013-12-28T12:09:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/12/28/mac-dev-setup</id>
    <content type="html"><![CDATA[<p>mac os重裝，重裝後開發需要用到的工具及相關設定方式如下:</p>

<ul>
<li>JDK 1.8</li>
<li>Apache Maven 3.2.1</li>
<li>ruby</li>
<li>python</li>
<li>homebrew</li>
<li>octopress</li>
<li>postgresql</li>
</ul>


<h2>環境變數</h2>

<p>設定環境變數可以在<code>.bashrc</code>跟<code>.bashfile</code>,
為了保證不管透過遠端登入或在登入後另外開shell都會執行設定環境的動作，可以在<code>.bashfile</code>加入環境變數的設定，
但linux下的習慣以’.bashrc’為主，因為在linux環境下，反而是’.bashrc’會保證被執行到</p>

<p><code>vi ~/.bash_profile</code></p>

<pre><code>function setjdk() {
  if [ $# -ne 0 ]; then
   removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
   if [ -n "${JAVA_HOME+x}" ]; then
    removeFromPath $JAVA_HOME
   fi
   export JAVA_HOME=`/usr/libexec/java_home -v $@`
   export PATH=$JAVA_HOME/bin:$PATH
  fi
 }
 function removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
 }
setjdk 1.8

export MAVEN_HOME=/Users/kent/dev/apache-maven-3.2.1
export M2_HOME=$MAVEN_HOME
export CATALINA_HOME=/Users/kent/dev/apache-tomcat-8.0.5
export GRADLE_HOME=/Users/kent/dev/gradle-1.10

export PATH=$MAVEN_HOME/bin:$GRADLE_HOME/bin:$PATH
</code></pre>

<p>完成後，記得執行一下 <code>source ~/.bash_profile</code>看看有沒有錯誤，然後便可以<code>echo $JAVA_HOME</code>看看java的部徑有沒有設定進去，
如果都ok，可以執行一下<code>java -version</code> 跟 &#8216;mvn -v&#8217;看一下java跟maven的版號</p>

<h4>Eclipse找不到jdk (JDK 7 only)</h4>

<p>Oracle沒有定義jvm 1.7的相容性，所以在gui環境eclipse會找不到jdk
解決的方式如下</p>

<pre><code># COPYjdk7的Info.plist出來修改
cp /Library/Java/JavaVirtualMachines/jdk.1.7.&lt;…&gt;/Contents/Info.plist ~/Downloads/
</code></pre>

<p>Info.plist</p>

<pre><code>&lt;key&gt;JVMCapabilities&lt;/key&gt;
 &lt;array&gt;
  &lt;string&gt;CommandLine&lt;/string&gt;
 &lt;/array&gt;
</code></pre>

<p>改成</p>

<pre><code>&lt;key&gt;JVMCapabilities&lt;/key&gt;
 &lt;array&gt;
  &lt;string&gt;JNI&lt;/string&gt;
  &lt;string&gt;BundledApp&lt;/string&gt;
  &lt;string&gt;WebStart&lt;/string&gt;
  &lt;string&gt;Applets&lt;/string&gt;
  &lt;string&gt;CommandLine&lt;/string&gt;
 &lt;/array&gt; 
</code></pre>

<p>之後再copy回去原來的地上，改完需重新登入或重開機，之後eclipse便可以執行了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[透過JMX重新載入Tomcat上的Web Application]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/11/16/reload-tomcat-web-application-by-jmx/"/>
    <updated>2013-11-16T15:45:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/11/16/reload-tomcat-web-application-by-jmx</id>
    <content type="html"><![CDATA[<h2>tomcat</h2>

<h2>test by jconsole</h2>

<p>啟動tomat</p>

<pre><code>kents-mbp:~ kent$ tail -f ~/dev/apache-tomcat-7.0.42/logs/catalina.out
Nov 16, 2013 4:05:29 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /Users/kent/dev/apache-tomcat-7.0.42/webapps/my-webapp.war
</code></pre>

<p>jconsole的位置在JDK的bin目錄下，執行後可以看到本機jvm運行中的程式。</p>

<p>一層一層展開下去可以看到tomcat有一個reload的節點，把節點的object name複製出來，程式會用到</p>

<p><code>Catalina/WebModule/"//localhost/my-webapp"/non/e/none/Operations/reload</code></p>

<p>jconsole可以直接執行reload的節點，執行後可以看到tomcat進行reload</p>

<pre><code>Nov 16, 2013 4:16:24 PM org.apache.catalina.core.StandardContext reload  # 透過JMX執行reload operation後可以看到tomcat對my-webapp進行reload
INFO: Reloading Context with name [/my-webapp] has started
Nov 16, 2013 4:16:25 PM org.apache.catalina.core.StandardContext reload
INFO: Reloading Context with name [/my-webapp] is completed
</code></pre>

<p>也可以透過程式進行jmx呼叫，下面的程式是透過spring3執行jmx</p>

<pre><code>// bean的configration檔
public MBeanServerConnection jmxConnector() {
    MBeanServerConnectionFactoryBean factoryBean =new MBeanServerConnectionFactoryBean();
    try {
        factoryBean.setServiceUrl("service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jmxrmi");
        factoryBean.afterPropertiesSet();
        MBeanServerConnection connection = factoryBean.getObject();
        return connection;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}


// 程式
@Autowaire
private MBeanServerConnection connection;

public void reloadWebApplication() {
    try {
        ObjectName objectName = new ObjectName("Catalina:j2eeType=WebModule,name=//localhost/idcview,J2EEApplication=none,J2EEServer=none");
        connection.invoke(objectName, "reload", null, null); // 執行tomcat的reload
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access imgur with API]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/31/access-imgur-with-api/"/>
    <updated>2013-08-31T01:20:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/31/access-imgur-with-api</id>
    <content type="html"><![CDATA[<ol>
<li>先註冊 <a href="http://imgur.com/">imgur</a> 的帳號</li>
<li>申請API使用權限
<img src="http://blog.kent-chiu.com/images/2013-08-31/2013-08-31-access-imgur-with-api-001.png" alt="2013-08-31-access-imgur-with-api-001.png" /></li>
<li>註冊成後功，imgur會寄信到email裡，裡面會有 client_id 跟 client_secret</li>
<li><p>試車 <code>https://api.imgur.com/3/gallery.json</code> 是取得</p>

<pre><code>curl https://api.imgur.com/3/gallery.json -i -H "Authorization: Client-ID 69a8cxxxxxxxxxx" 

HTTP/1.1 200 OK
Server: nginx
Date: Fri, 30 Aug 2013 17:59:29 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
…..
</code></pre>

<p>如果看到    http status code 200，就表示成功了</p>

<blockquote><p>69a8cxxxxxxxxxx -> 換成你自已的 client_id</p></blockquote></li>
</ol>


<h4>取得相簿</h4>

<pre><code>curl -i -H "Authorization: Client-ID 69a8cxxxxxxxxxx"  https://api.imgur.com/3/gallery/album/lDRB2/json
    https://api.imgur.com/3/gallery/album/lDRB2/json

{
    "data": {
        "id": "lDRB2",
        "title": "Imgur Office",
        "description": null,
        "datetime": 1357856292,
        "cover": "24nLu",
        "account_url": "Alan",
        "privacy": "public",
        "layout": "blog",
        "views": 13780,
        "link": "http://alanbox.imgur.com/a/lDRB2",
        "ups": 1602,
        "downs": 14,
        "score": 1917,
        "is_album": true,
        "vote": null,
        "images_count": 11,
        "images": [
            {
                "id": "24nLu",
                "title": null,
                "description": null,
                "datetime": 1357856352,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 855658,
                "views": 135772,
                "bandwidth": 116174397976,
                "link": "http://i.imgur.com/24nLu.jpg"
            },
            {
                "id": "Ziz25",
                "title": null,
                "description": null,
                "datetime": 1357856394,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 919391,
                "views": 135493,
                "bandwidth": 124571044763,
                "link": "http://i.imgur.com/Ziz25.jpg"
            },
            {
                "id": "9tzW6",
                "title": null,
                "description": null,
                "datetime": 1357856385,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 655028,
                "views": 135063,
                "bandwidth": 88470046764,
                "link": "http://i.imgur.com/9tzW6.jpg"
            },
            {
                "id": "dFg5u",
                "title": null,
                "description": null,
                "datetime": 1357856378,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 812738,
                "views": 134704,
                "bandwidth": 109479059552,
                "link": "http://i.imgur.com/dFg5u.jpg"
            },
            {
                "id": "oknLx",
                "title": null,
                "description": null,
                "datetime": 1357856338,
                "type": "image/jpeg",
                "animated": false,
                "width": 1749,
                "height": 2332,
                "size": 717324,
                "views": 32938,
                "bandwidth": 23627217912,
                "link": "http://i.imgur.com/oknLx.jpg"
            },
            {
                "id": "OL6tC",
                "title": null,
                "description": null,
                "datetime": 1357856321,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 1443262,
                "views": 32346,
                "bandwidth": 46683752652,
                "link": "http://i.imgur.com/OL6tC.jpg"
            },
            {
                "id": "cJ9cm",
                "title": null,
                "description": null,
                "datetime": 1357856330,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 544702,
                "views": 31829,
                "bandwidth": 17337319958,
                "link": "http://i.imgur.com/cJ9cm.jpg"
            },
            {
                "id": "7BtPN",
                "title": null,
                "description": null,
                "datetime": 1357856369,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 844863,
                "views": 31257,
                "bandwidth": 26407882791,
                "link": "http://i.imgur.com/7BtPN.jpg"
            },
            {
                "id": "42ib8",
                "title": null,
                "description": null,
                "datetime": 1357856424,
                "type": "image/jpeg",
                "animated": false,
                "width": 2592,
                "height": 1944,
                "size": 905073,
                "views": 30945,
                "bandwidth": 28007483985,
                "link": "http://i.imgur.com/42ib8.jpg"
            },
            {
                "id": "BbwIx",
                "title": null,
                "description": null,
                "datetime": 1357856360,
                "type": "image/jpeg",
                "animated": false,
                "width": 1749,
                "height": 2332,
                "size": 662413,
                "views": 30107,
                "bandwidth": 19943268191,
                "link": "http://i.imgur.com/BbwIx.jpg"
            },
            {
                "id": "x7b91",
                "title": null,
                "description": null,
                "datetime": 1357856406,
                "type": "image/jpeg",
                "animated": false,
                "width": 1944,
                "height": 2592,
                "size": 618567,
                "views": 29259,
                "bandwidth": 18098651853,
                "link": "http://i.imgur.com/x7b91.jpg"
            }
        ]
    },
    "success": true,
    "status": 200
}               
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Reference Reading Notes]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/30/spring-reference-reading-notes/"/>
    <updated>2013-08-30T11:37:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/30/spring-reference-reading-notes</id>
    <content type="html"><![CDATA[<h2>IoC container</h2>

<p>Spring 建議使用Setter Injection，Setter Injection有以下的優點
-   不會造成一堆constructor或長長的constructor parameters
-   可以避免 Circular Dependencies的引發exception問題；Bean A 依賴 Bean B, Bean B又依賴 Bean A(雞生蛋，蛋生雞問題)，這在 constructor 跟 field injection 會引發 exception，但在 setter injection不會
-   使用setter 或 constructor inject的方式會比較容易測試，因為不需要其他service locator (IOC container本身就是一種 service locator)</p>

<p>設定檔的路徑，應該要用絕對路徑，而非相對路徑</p>

<blockquote><p>spring 有些機制是透過參數名稱來做對應，這個是利用 complie 時有加入 debug flag，如果debug flag關掉了，這個功能就無效了
ex:</p>

<pre><code>  &lt;bean id="exampleBean" class="examples.ExampleBean"&gt;
      &lt;constructor-arg name="years" value="7500000"/&gt;
      &lt;constructor-arg name="ultimateanswer" value="42"/&gt;
  &lt;/bean&gt;
</code></pre>

<p><code>years</code>跟<code>ultimateanswer</code> 兩個是java class constructor的參數名稱，spring可以透過 complied 後的 debug info正確的把值派給對應的參數</p></blockquote>

<h4>lifecycle</h4>

<p>bean的初始化跟解構有三種方式</p>

<ol>
<li>InitializingBean,DisposableBean
傳統的方式，實作這兩個介面spring就會調用 callback method</li>
<li>@PostConstruct and @PreDestroy
JSR250 的做法，可以跟spring解耦，建議採用這種方式</li>
<li>自行定義init method (ex: start(), stop())
常用於整合即有的code，又不能改source的情況下，可用此方式</li>
</ol>


<p>上面這三種方式，也可以混在一起用，混在一起用時，調用的順序如下</p>

<ul>
<li>初始化 : @PostConstruct -> InitializingBean.afterPropertiesSet() -> custom configured init()</li>
<li>解構: PreDestroy -> DisposableBean.destroy() -> custom configured destroy()</li>
</ul>


<p>如果要知道 container 的啟動，停止，refresh 發生的時機，可以實作以下介面</p>

<pre><code>// container 啟動，停止
public interface Lifecycle {

  void start();

  void stop();

  boolean isRunning();

}   

// 重整，關閉
public interface LifecycleProcessor extends Lifecycle {

  void onRefresh();

  void onClose();

}

// phase用來決定啟動或停止順序的值，愈小的愈先啟動，愈晚停止
// 可以用來決定那個 object 要在那個 object 之後啟動，停止
public interface Phased {

  int getPhase();

}


public interface SmartLifecycle extends Lifecycle, Phased {

  boolean isAutoStartup();

  void stop(Runnable callback);

}
</code></pre>

<p>此外，spring還提供一堆感知(xxx-Aware)的call back method，用來感知一些context的事件</p>

<ul>
<li>ApplicationContextAware</li>
<li>ApplicationEventPublisherAware</li>
<li>BeanClassLoaderAware</li>
<li>BeanFactoryAware</li>
<li>BeanNameAware</li>
<li>BootstrapContextAware</li>
<li>EmbeddedValueResolverAware</li>
<li>EnvironmentAware</li>
<li>LoadTimeWeaverAware</li>
<li>MessageSourceAware</li>
<li>NotificationPublisherAware</li>
<li>PortletConfigAware</li>
<li>PortletContextAware</li>
<li>ResourceLoaderAware</li>
<li>ServletConfigAware</li>
<li>ServletContextAware</li>
</ul>


<p>看 class name 大概就可以見文思義，知道有那些合用的call back method可以用。基本原則就是，如果需要知道 spring 在什麼時間做了什麼事的需求，就可以在<code>org.springframework.context</code> 這個 package 找找看有沒有合用的 class</p>

<h4>Container Extension Points</h4>

<h5>BeanPostProcessor</h5>

<p>如果需要對特些特殊類似的 bean做處理，可以利用<code>BeanPostProcessor</code>做bean建立前，或建立後的處理,比如說，
我們可以所有的<code>@Schedule</code>的bean加上做排程。</p>

<pre><code>public interface BeanPostProcessor {

    Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;

    Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;

}
</code></pre>

<h5>BeanFactoryPostProcessor</h5>

<p><code>BeanPostProcessor</code>做bean建立前，或建立後的處理，而<code>BeanFactoryPostProcessor</code>則是做bean definition(meta data)做修改，例如<code>PropertyPlaceholderConfigurer</code>就是把bean的定義裡的placeholder換成真正的屬性值</p>

<pre><code>public interface BeanFactoryPostProcessor {

    void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;

}
</code></pre>

<h5>FactoryBean</h5>

<p>如果建立bean的過程比較複雜，可以使用<code>FactoryBean</code>來建立bean</p>

<h4>Annontation</h4>

<ul>
<li>@Required   舊的，不要用了<code>@Autowired</code>裡required屬性具有相同的效果</li>
<li>@Autowired  使用後會依型別自動做DI</li>
<li>@Qualifier  spring會依型別做auto wried，但常會遇過一個interface，有一個以上的實作，或者有子類別，子子類別，這時，可以用<code>@Qualifier</code>來指定要bind到那一個特定的 implementation</li>
<li>@Scope instance scope</li>
<li>@Value 通常用來跟屬性值 (property做binding)</li>
<li>@Lazy bean lazily initialized</li>
</ul>


<p>stereotype type</p>

<ul>
<li>@Component 主要是標明為spring的元件，在auto scan時會被spring處理</li>
<li>@Repository 同<code>@Component</code>，用在DAO上，JPA遇到@Repository時還會做ExceptionTranslation</li>
<li>@Service  同<code>@Component</code>，用在service上</li>
<li>@Controler 同<code>@Component</code>，但多用於 web controller，搭配<code>RequestMapping</code>使用</li>
</ul>


<p>@JSR250</p>

<ul>
<li>@Resource injected by name 而不是 by type</li>
<li>@PostConstruct 在bean建立後被call back</li>
<li>@PreDestroy 在bean destroy 前被 call back</li>
</ul>


<p>JSR 330有另一套Annotations(javax.inject.*)，可以對應到spring，但功能上會比spring專用的annotations有些許限制，如果沒有特別考慮移植性，建議採用spring版的，較能善用spring的功能</p>

<p><a href="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/#beans-standard-annotations">http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/#beans-standard-annotations</a></p>

<p><code>@Bean</code> annotation 也可以使用在 @Component 中，但跟使用在 @Configuration 中會有不同的處理流程</p>

<pre><code>@Component
public class FactoryMethodComponent {

  private static int i;

  @Bean @Qualifier("public")
  public TestBean publicInstance() {
      return new TestBean("publicInstance");
  }

  // use of a custom qualifier and autowiring of method parameters

  @Bean
  protected TestBean protectedInstance(@Qualifier("public") TestBean spouse,
                                       @Value("#{privateInstance.age}") String country) {
      TestBean tb = new TestBean("protectedInstance", 1);
      tb.setSpouse(tb);
      tb.setCountry(country);
      return tb;
  }

  @Bean @Scope(BeanDefinition.SCOPE_SINGLETON)
  private TestBean privateInstance() {
      return new TestBean("privateInstance", i++);
  }

  @Bean @Scope(value = WebApplicationContext.SCOPE_SESSION,
               proxyMode = ScopedProxyMode.TARGET_CLASS)
  public TestBean requestScopedInstance() {
      return new TestBean("requestScopedInstance", 3);
  }
}
</code></pre>

<h2>Resource</h2>

<p>注入 resource 時如果沒有指定 prefix (class path, file, http,…)時，會依 context 使用適合的 resource loading 方式，如果有指定 prefix ，就會以 prefix 指定的方式loading resource</p>

<p>不指定 prefix</p>

<pre><code>&lt;bean id="myBean" class="..."&gt;
  &lt;property name="template" value="some/resource/path/myTemplate.txt"/&gt;
&lt;/bean&gt;
</code></pre>

<p>指定 prefix</p>

<pre><code>&lt;property name="template" value="classpath:some/resource/path/myTemplate.txt"&gt;
&lt;property name="template" value="file:/some/resource/path/myTemplate.txt"/&gt;
</code></pre>

<p>resource path 可採用 ant-style的 wildcards</p>

<pre><code> /WEB-INF/*-context.xml
 com/mycompany/**/applicationContext.xml
 file:C:/some/path/*-context.xml
 classpath:com/mycompany/**/applicationContext.xml
</code></pre>

<blockquote><p><code>classpath*:</code> 與 <code>classpath:</code>的區別
 <code>classpath*:</code> 會在 class path 中找出所有符合條件的 resources
 <code>claspath</code>: 只會在 class path 中找出第一個符合條件的 resource</p></blockquote>

<h2>Validation </h2>

<p>對於非簡單型別的屬性，可以在 Validator 中另外套用其它的 Validator
ex: Customer物件中，基本屬性用CustomerValidator，而 address屬性，不是簡單的資料型別而是物件，可以在CustomerValidator.validate 再套用 address validator</p>

<pre><code>public class CustomerValidator implements Validator {

    private final Validator addressValidator;

    public CustomerValidator(Validator addressValidator) {
        if (addressValidator == null) {
            throw new IllegalArgumentException(
              "The supplied [Validator] is required and must not be null.");
        }
        if (!addressValidator.supports(Address.class)) {
            throw new IllegalArgumentException(
              "The supplied [Validator] must support the validation of [Address] instances.");
        }
        this.addressValidator = addressValidator;
    }

    /**
    * This Validator validates Customer instances, and any subclasses of Customer too
    */
    public boolean supports(Class clazz) {
        return Customer.class.isAssignableFrom(clazz);
    }

    public void validate(Object target, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "firstName", "field.required");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "surname", "field.required");
        Customer customer = (Customer) target;
        try {
            errors.pushNestedPath("address");
            ValidationUtils.invokeValidator(this.addressValidator, customer.getAddress(), errors);
        } finally {
            errors.popNestedPath();
        }
    }
}
</code></pre>

<h2>Type Conversion</h2>

<p>Type Conversion是指格式轉換，通常，常web進來的值，因為都是基於http，所以通常都會用純文字的方式送到後端，
type conversion就是負責把純文字轉成適點的型別或格式。</p>

<p>ex:</p>

<pre><code>http://locallost/example/user?name=kent&amp;age=10&amp;sex=MALE

class User {
    private String name;
    private int age;
    Sex   sex;
}

enum Sex {MALE, FEMALE}
</code></pre>

<p>前端進來的是純字串，name=&#8221;kent&#8221;，age=&#8221;1&#8221;，sex=&#8221;MALE&#8221;，但user物件的屬性，age 是int，sex 是enum型別。
type conversion 就是將字串&#8221;1&#8221;轉成 int 1, 字串 &#8220;MALE&#8221; 轉成 enum Sex.MALE，當然也可以適用在非字串轉非字串的格式。</p>

<p>spring 提供二種方式可以做type conversion
1.  PropertyEditors : 這是從java bean那邊借過來的功能，swing也有不少地方用到這個功能
2.  Conversion SPI  : spring 3後引入的功能，基於泛型(generic)的，所以型別資訊會比較豐富</p>

<p>另外，spring還有 Formatter SPI, 可以做格式化的功能，常用的formatter有</p>

<ul>
<li>CurrencyFormatter (org.springframework.format.number)</li>
<li>NumberFormatter (org.springframework.format.number)</li>
<li>PercentFormatter (org.springframework.format.number)</li>
<li>DateFormatter (org.springframework.format.datetime)</li>
</ul>


<p>或者用 format annotation</p>

<ul>
<li>@DateTimeFormat</li>
<li>@NumberFormat</li>
</ul>


<p>如果使用srping mvc的話，可以設定全局性的validator跟controller專用的validator</p>

<p>global validator</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;

    &lt;mvc:annotation-driven validator="globalValidator"/&gt;

&lt;/beans&gt;
</code></pre>

<p>controller validator</p>

<pre><code>@Controller
public class MyController {

    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        binder.setValidator(new FooValidator());
    }

    @RequestMapping("/foo", method=RequestMethod.POST)
    public void processFoo(@Valid Foo foo) { ... }

}
</code></pre>

<p>@Valid 會觸發 controller 進行 validate 的動作</p>

<h2>ORM</h2>

<h4>exception translation</h4>

<p>exception translation 是將各個 ORM Framework 的 exception 轉換成 Spring 的 DataAccessException ，這樣做的好處是可以在各種不同的 ORM Framework ，各種不同的Database中使用相同的Exception。</p>

<p>宣告成 <code>@Repository</code> 就會自動套用 exception translation</p>

<pre><code>@Repository
public class ProductDaoImpl implements ProductDao {

    // class body here...

}
</code></pre>

<p>有三種方式可以設定EntityManagerFacotry, EntityManagerFacotry是用來在程式裡取得EitityManager。</p>

<ol>
<li>LocalEntityManagerFactoryBean 用在簡單的佈署環境(獨立的應該程式)或整合測試，使用上有不少限制，請<a href="http://static.springsource.org/spring/docs/current/javadoc-api/">參閱文件</a></li>
<li>JNDI - JAVA EE 環境下使用</li>
<li>LocalContainerEntityManagerFactoryBean 使用這個就有完成的JPA功能，可用在像tomcat，或整合測試環境，但在JAVA EE環境下可能會有一些衝突(JAVA EE會自動找META-INFO下的persistence.xml，但採用LocalContainerEntityManagerFactoryBean可以完全不用使用persistence.xml)</li>
</ol>


<blockquote><p>load time weaver
spring使用load time weaving在load time時用aop的技術來改善entity的結構，像把entity 1對多關係改成lazy loading
但有的orm framework (ex: hibernate) 本身就有這個機制了</p></blockquote>

<h4>EntityManger</h4>

<blockquote><p>EntityManger V.S. EntityManagerFactory
在使用時要inject EntityManagerFactory or EntityManager? EntityManagerFactory 是thread-safe而EntityManager不是，但如果在spring使用，會保證每個EntityManager的instance是新的(shared EntityManager Proxy)，所以直接inject EntityManager，code會比較簡單(如果使用PersistenceContextType.EXTENDED，那entity manage就不是 thread-safe)
如果inject的是EntityManagerFactory，要用<code>@PersistenceUnit</code>而如果是EntityManager，就用<code>@PersistenceContext</code></p></blockquote>

<h4>JpaDialect</h4>

<p>使用JpaDialect可以enable一些vendor-specific的進階功能，預設的DefaultJpaDialect沒有提供特別的功能</p>

<h2>JMS</h2>

<p><code>javax.jms.Exception</code>是Checked Exception, 使用Spring JmsTemplate則會轉成UncheckedException</p>

<p>spring有提供訊息轉換的功能，可以方便的把java object轉成jms格式的訊息</p>

<p>配值檔</p>

<pre><code>@Configuration
public class JmsConfig {
    @Bean
    public JmsTemplate jmsTemplate() {
        final JmsTemplate jmsTemplate = new JmsTemplate(jmsConnectionFactory());
        // jmsTemplate會往名稱為`"my queue`的queue送訊息
        jmsTemplate.setDefaultDestination(new ActiveMQQueue("my queue"));  
        return jmsTemplate;
    }

    @Bean
    public ConnectionFactory jmsConnectionFactory() {
        final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
        factory.setBrokerURL("tcp://localhot:61616"); // mq server ip
        return factory;
    }


    @Bean
    public AbstractJmsListeningContainer jmsContainer() {
        final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
        container.setConnectionFactory(jmsConnectionFactory());
        // 當 "my topic" 做訊息發佈時，MyMessageListenerServiceImpl會收到訊息通知
        container.setDestination(new ActiveMQTopic("my topic"));
        //container.setSessionTransacted(true);
        container.setConcurrentConsumers(5);
        container.setReceiveTimeout(10000);
        container.setMessageListener(deviceEventListener());
        return container;
    }


    @Bean
    public MessageListener deviceEventListener() {
        return new MyMessageListenerServiceImpl();
    }
}
</code></pre>

<p>收/發訊息</p>

<p>收/發訊息會以上面配置檔設定的目的收/發訊息</p>

<pre><code>@Service
public class MyMessageListenerImpl implements MessageListener {

    private JmsTemplate jmsTemplate;
    @Autowired
    public void setJmsTemplate(JmsTemplate jmsTemplate) {
        this.jmsTemplate = jmsTemplate;
    }

    @Test
    public void jsmSend() throws Exception {
        // 往`my queue`發送訊息
        jmsTemplate.convertAndSend("test");
    }

    /**
     * Message Queue上的名稱為"my topic"的topic做publish時會觸發這個method
     *
     * @param message
     */
    @Override
    public void onMessage(Message message) {
        System.out.println(message);
    }
}
</code></pre>

<h2>Testing</h2>

<ul>
<li>org.springframework.test.util.ReflectionTestUtils 提供對private的屬性進行取值、設值的功能以輔助測試</li>
<li>org.springframework.test.jdbc.JdbcTestUtils 可以有計算 table 內資料筆數的方便的 methods 可以使用</li>
</ul>


<h4>Context management and caching</h4>

<p>spring test context 會進行 caching 以加速測試的速度，cache 是以一個 test suite 為單位，在同一個 jvm 一起執行的所有 test cases 算是同一個 test suite，如果 test suite 被污染時，必須 reload context</p>

<p><code>@DirtiesContext</code> 會把 context 標記為 dirty，被標記為 dirty 後，該 context 會被移出 cache區</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用curl指令測試REST服務]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command/"/>
    <updated>2013-08-14T11:26:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/08/14/testing-rest-with-curl-command</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/CURL">cURL</a> 是很方便的Rest客戶端，可以很方便的完成許多Rest API測試的需求，甚至，如果是需要先登入或認證的rest api，也可以進行測試，利用<em>curl</em>指令，可以送出HTTP GET, POST, PUT, DELETE, 也可以改變 HTTP header來滿足使用REST API需要的特定條件。</p>

<p><a href="http://curl.haxx.se/docs/manpage.html">curl的參數很多</a>，這邊僅列出目前測試REST時常用到的:</p>

<pre><code>-X/--request [GET|POST|PUT|DELETE|…]  使用指定的http method發出 http request
-H/--header                           設定request裡的header
-i/--include                          顯示response的header
-d/--data                             設定 http parameters 
-v/--verbose                          輸出比較多的訊息
-u/--user                             使用者帳號、密碼
-b/--cookie                           cookie  
</code></pre>

<blockquote><p>linux command line 的參數常，同一個功能常會有兩個功能完全相同參數，一個是比較短的參數，前面通常是用<code>-</code>(一個<code>-</code>)導引符號，另一個比較長的參數，通常會用<code>--</code>(兩個<code>-</code>)導引符號</p>

<p>在curl 使用說明</p>

<pre><code>  -X, --request COMMAND  Specify request command to use
      --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS
      --retry NUM   Retry request NUM times if transient problems occur
      --retry-delay SECONDS When retrying, wait this many seconds between each
      --retry-max-time SECONDS  Retry only within this period&gt;
</code></pre>

<p>參數<code>-X</code>跟<code>--request</code>兩個功能是一樣的，所以使用時
<code>ex:curl -X POST http://www.example.com/</code> 跟 <code>curl --request POST http://www.example.com/</code> 是相等的功能</p></blockquote>

<h4>GET/POST/PUT/DELETE使用方式</h4>

<p>-X 後面加 http method，</p>

<pre><code>curl -X GET "http://www.rest.com/api/users"
curl -X POST "http://www.rest.com/api/users"
curl -X PUT "http://www.rest.com/api/users"
curl -X DELETE "http://www.rest.com/api/users"
</code></pre>

<p>url要加引號也可以，不加引號也可以，如果有非純英文字或數字外的字元，不加引號可能會有問題，如果是網碼過的url，也要加上引號</p>

<h4>HEADER</h4>

<p>在http header加入的訊息</p>

<pre><code>curl -v -i -H "Content-Type: application/json" http://www.example.com/users
</code></pre>

<h4>HTTP Parameter</h4>

<p>http參數可以直接加在url的query string，也可以用<code>-d</code>帶入參數間用<code>&amp;</code>串接，或使用多個<code>-d</code></p>

<pre><code># 使用`&amp;`串接多個參數
curl -X POST -d "param1=value1&amp;param2=value2"
# 也可使用多個`-d`，效果同上
curl -X POST -d "param1=value1" -d "param2=value2"
curl -X POST -d "param1=a 0space"     
# "a space" url encode後空白字元會編碼成'%20'為"a%20space"，編碼後的參數可以直接使用
curl -X POST -d "param1=a%20space"     
</code></pre>

<h4>post json 格式得資料</h4>

<p>如同時需要傳送request parameter跟json，request parameter可以加在url後面，json資料則放入<code>-d</code>的參數，然後利用單引號將json資料含起來(如果json內容是用單引號，-d的參數則改用雙引號包覆)，header要加入&#8221;Content-Type:application/json&#8221;跟&#8221;Accept:application/json&#8221;</p>

<pre><code>curl http://www.example.com?modifier=kent -X PUT -i -H "Content-Type:application/json" -H "Accept:application/json" -d '{"boolean" : false, "foo" : "bar"}'
# 不加"Accept:application/json"也可以
curl http://www.example.com?modifier=kent -X PUT -i -H "Content-Type:application/json" -d '{"boolean" : false, "foo" : "bar"}'
</code></pre>

<h4>需先認證或登入才能使用的service</h4>

<p>許多服務，需先進行登入或認證後，才能存取其API服務，依服務要求的條件，的curl可以透過cookie，session或加入在header加入session key，api key或認證的token來達到認證的效果。</p>

<p>session 例子:</p>

<p>後端如果是用session記錄使用者登入資訊，後端會傳一個 session id給前端，前端需要在每次跟後端的requests的header中置入此session id，後端便會以此session id識別前端是屬於那個session，以達到session的效果</p>

<pre><code>curl --request GET 'http://www.rest.com/api/users' --header 'sessionid:1234567890987654321'
</code></pre>

<p>cookie 例子</p>

<p>如果是使用cookie，在認證後，後端會回一個cookie回來，把該cookie成檔案，當要存取需要任務的url時，再用<code>-b cookie_file</code> 的方式在request中植入cookie即可正常使用</p>

<pre><code># 將cookie存檔
curl -i -X POST -d username=kent -d password=kent123 -c  ~/cookie.txt  http://www.rest.com/auth
# 載入cookie到request中 
curl -i --header "Accept:application/json" -X GET -b ~/cookie.txt http://www.rest.com/users/1
</code></pre>

<h4>檔案上傳</h4>

<pre><code>curl -i -X POST -F 'file=@/Users/kent/my_file.txt' -F 'name=a_file_name'
</code></pre>

<p>這個是透過 HTTP multipart POST 上傳資料， <code>-F</code> 是使用http query parameter的方式，指定檔案位置的參數要加上<code>@</code></p>

<h4>HTTP Basic Authentication (HTTP基本認證)</h4>

<p>如果網站是採HTTP基本認證, 可以使用 <code>--user username:password</code> 登入</p>

<pre><code>curl -i --user kent:secret http://www.rest.com/api/foo'    
</code></pre>

<p>認證失敗時，會是<code>401 Unauthorized</code></p>

<pre><code>HTTP/1.1 401 Unauthorized
Server: Apache-Coyote/1.1
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
WWW-Authenticate: Basic realm="Realm"
Content-Type: text/html;charset=utf-8
Content-Language: en
Content-Length: 1022
Date: Thu, 15 May 2014 06:32:49 GMT
</code></pre>

<p>認證通過時，會回應 <code>200 OK</code></p>

<pre><code>HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Set-Cookie: JSESSIONID=A75066DCC816CE31D8F69255DEB6C30B; Path=/mdserver/; HttpOnly
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Date: Thu, 15 May 2014 06:14:11 GMT
</code></pre>

<p>可以把認證後的cookie存起來，重複使用</p>

<pre><code>curl -i --user kent:secret http://www.rest.com/api/foo' -c ~/cookies.txt
</code></pre>

<p>登入之前暫存的cookies，可以不用每次都認證</p>

<pre><code>curl -i  http://www.rest.com/api/foo' -b ~/cookies.txt
</code></pre>

<h2>相關資源    </h2>

<ul>
<li><a href="http://linux.about.com/od/commands/l/blcmdl1_curl.htm">http://linux.about.com/od/commands/l/blcmdl1_curl.htm</a> - curl 手冊</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restful Web Security]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/07/29/restful-web-security/"/>
    <updated>2013-07-29T10:36:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/07/29/restful-web-security</id>
    <content type="html"><![CDATA[<p>Restful Web Service 常用的保全方式有：</p>

<ol>
<li>session and cookies</li>
<li>HTTP 標準認證/摘要驗證(digest authentication)</li>
<li>API key</li>
</ol>


<p>各有各的優缺點:
採用 session 記錄 user 的認證的方式，有違 rest stateless 的特性, cookies 只有 http 能用，而且測試上沒header來的方便。而 http 認證，是透過跳出的一認證的視窗的方式，也不是很適合在沒有browser下做操作，所以比較好的方式是採用 API key的方式來處理認證及保全(security)的問題。</p>

<p>API key是指，由server產生一個包含 username password跟相關資料的 token，然後在<em>每個</em> request的 parameter 或 header 中置入這個 token 讓 server 判斷 request 是否合法。</p>

<blockquote><p>token 放在 query string(request parameter)的方式
這種方式的優點是方便，直覺，容易測試，但缺點是每個url裡都會多出一堆資訊在url，而且會有安全跟cache的問題
建議 token 放header會比較好</p></blockquote>

<p>要做權限管控，必須先了解需要管控的資源 (target resources) 有那些, 可要管控的等級，管控等級通常取決於登入時的角色，管控的等級大概如下:</p>

<ol>
<li>Application Level : 是否存取資源, ex: login user 才能存取或 anonymous 就可存取 (authentication &amp; authorization)</li>
<li>Module Level      : 是否以進入某個功能模組,底下可能會有許多子功能模組</li>
<li>Function Level    : 是否能使用對某個表單或單一功能, ex: 使用者管理</li>
<li>Instance Level    : 特定資料列的存取權限, ex: 系統中有10個使用者，但只有對其中 3 個有存取權限</li>
<li>Field Level       : 只針對特定欄位, ex: 使用者資料表中的敏感欄位(ex: 薪資) 只有特定人員可以存取</li>
</ol>


<p>1 ~ 3 是屬於功能性的權限管控</p>

<p>4 ~ 5 是屬於資料的權限管控</p>

<p>選定了要採用要在每個 header 置入 token 的方式後，再來就是設計要放入什麼樣的 token 在 header 當作辨識的依據()，以及採用什麼方式保護及驗証 toekn 的安全性及有效性。</p>

<p>keyed-HMAC</p>

<h2>Resources</h2>

<ul>
<li><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html</a></li>
<li><a href="http://devcenter.kinvey.com/rest/guides/security">http://devcenter.kinvey.com/rest/guides/security</a></li>
<li><a href="http://www.infoq.com/cn/news/2010/01/rest-api-authentication-schemes">http://www.infoq.com/cn/news/2010/01/rest-api-authentication-schemes</a></li>
<li><p><a href="http://www.baeldung.com/security-spring">http://www.baeldung.com/security-spring</a></p>

<h4>deprecate</h4></li>
<li><p><a href="http://appsandsecurity.blogspot.tw/2011/04/rest-and-stateless-session-ids.html">http://appsandsecurity.blogspot.tw/2011/04/rest-and-stateless-session-ids.html</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X keyboard shortcuts for terminal]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/07/15/mac-os-x-keyboard-shortcuts-for-terminal/"/>
    <updated>2013-07-15T16:53:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/07/15/mac-os-x-keyboard-shortcuts-for-terminal</id>
    <content type="html"><![CDATA[<p>Mac OS X 的 terminal 是 BASH, 以下是 BASH 的快捷鍵:</p>

<pre><code>Ctrl + A    回行首
Ctrl + E    去行尾
Ctrl + L    清劃面
Ctrl + U    清掉游標前的文字
Ctrl + H    刪一個字元
Ctrl + R    找執行過的指令 (好用)
Ctrl + C    中斷執行
Ctrl + D    跳出目前的shell
Ctrl + Z    把目前執行的指令設到背影.要回到前景可透過 fg 指令
Ctrl + W    刪除游標之前的字
Ctrl + K    清除游標之後所有內容
Ctrl + T    交換字元
Esc + T     交換"字"
Alt + F     往前移一個字
Alt + B     往後移一個字
Tab         自動完成
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/07/07/python-101/"/>
    <updated>2013-07-07T12:10:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/07/07/python-101</id>
    <content type="html"><![CDATA[<p>本文是初學 Python 遇到的一些問題留下的筆記:</p>

<p>一開始進入 Python 的世界，除了程式語言本身外還有許多基本的工具要先了解:</p>

<ul>
<li>Python 2 V.S Python 3 : python 語言的版本</li>
<li>easy_install V.S PIP : 套件安裝工具</li>
<li>virtualenv            : 虛擬工作環境</li>
</ul>


<h4>Python 2 V.S Python 3</h4>

<p>剛進行 Python 的世界，一開始就要面臨的抉擇，就是要用 Python 2 或 Python 3，因為是初學者，沒有任何包袱，當然是選 Python 3。 (也有人建議一律用2.7的語法撰寫，這樣可以同時相容於2跟3)</p>

<blockquote><p>Mac Os 10.8 (mountain lion)預裝的是 Python 2.7.2，要自行昇級成 Python 3.x (目前 2013/07/07 3.3.2是 release 版)
可以透過在 Mac OS 的terminal 下執行 <code>python -V</code> 取得版號</p></blockquote>

<h4>Easy_install V.S PIP</h4>

<p>一般的 lib 會提供 <code>python setup.py install</code></p>

<p>easy_install 跟 <a href="http://www.pip-installer.org/">pip</a> 兩者都是套件安裝工具， easy_install 沒有反安裝套件的功能，而 pip 有反安裝套件的功能，所以建議是裝pip</p>

<p>Mac Os 10.8 (mountain lion) 只有預裝 easy_install，要使用 pip，可以透過 easy_install 來安裝 pip
安裝 pip 的指令如下 <code>$ easy_install pip</code>，如果無法安裝的話，可以直接抓 source 下來裝
下載的url為 :</p>

<p>必須先安裝<a href="http://pythonhosted.org/setuptools/">setuptools</a></p>

<pre><code>$ curl -O https://bitbucket.org/pypa/setuptools/raw/0.8/ez_setup.py
$ python ez_setup.py --user 
</code></pre>

<p>才能再裝 pip</p>

<pre><code>$ curl -O https://pypi.python.org/packages/source/p/pip/pip-1.3.tar.gz
$ tar xzf pip-1.3.tar.gz
$ cd pip-1.3
$ sudo python setup.py install
</code></pre>

<p>裝完後檢查一下執行一下 <code>pip</code> 指令，如果不能執行，可能是Path沒設好,Path變數是在 <code>~/.bash_profile</code> 如果沒這個檔，可以自已新增一個</p>

<pre><code>export PATH=/System/Library/Frameworks/Python.framework/Versions/3.3/bin:/Users/kent/Library/Python/3.3/bin:$PATH
</code></pre>

<p>pip 的使用方式</p>

<pre><code>pip list   列出目前安裝的lib
pip search 搜尋lib
pip install 安裝lib   
</code></pre>

<p>ex:</p>

<pre><code>sudo pip install beautifulsoup4   # 安裝 beautifulsoup lib (一個 html parser)   
</code></pre>

<h4>Testing</h4>

<p>python的 test framework有好幾套，可以自行選擇適合的</p>

<ul>
<li>unittest 內建的，不用另外再抓lib</li>
<li>nosetest 可獨立執行某個 test method 或一整個 test suite 的功能</li>
<li>doctest  測試 python doc 的邏輯</li>
</ul>


<h4>初學者必備技能</h4>

<ul>
<li><p>python Interpreter (直譯器)
直譯式語言的優點就是會有直譯器可以用，在直譯器執行程式，可以立即得到執行的結果，在不了解API的用法時，我通常會在執譯器上先做測試，或者直接用 unittest 寫<em>Learning Test</em>。
平常沒事也可以掛著查 API doc</p></li>
<li><p>help([object])<br/>
列出說明，會說明該 object 有那些 methods 及使用方式</p></li>
<li>type(variable)
取得 object 的型別，撰寫弱型別語言最大的痛苦就是不知道變數是什麼型別，這 type 至少可以在runtime取得變數的型別</li>
<li>dir() 列出 object 內所有的 methods</li>
<li>pprint() 列出物件結構</li>
</ul>


<h2>Python Language</h2>

<h4>連算子</h4>

<ul>
<li>沒有增量 <code>++</code>，減量 <code>--</code> 運算子</li>
<li>+=，-= 這是合法的運算子</li>
<li>除法用<code>/</code> , 整數除法用 <code>//</code></li>
<li>一個<code>*</code>是乘，兩個<code>*</code>是幂(次方)英文為<em>power</em> <code>2 * 3 =6</code> , <code>2 ** 3 = 8</code></li>
</ul>


<h4>字串</h4>

<ul>
<li>字串可用單引號或雙引號，單引號較常用</li>
<li>字串前面加 <code>r</code> 表示為 raw string, ex: raw = r&#8217;this is a \t\n raw string&#8217;</li>
<li>字串前面加 <code>u</code> 表示為 unicode string, ex: ustring = u&#8217;A unicode \u018e string \xf1&#8217;</li>
</ul>


<h4>條件式結構</h4>

<pre><code> if speed &gt;= 80:
    print 'License and registration please'
    if mood == 'terrible' or speed &gt;= 100:
      print 'You have the right to remain silent.'
    elif mood == 'bad' or speed &gt;= 90:
      print "I'm going to have to write you a ticket."
      write_ticket()
    else:
      print "Let's try to keep it under 80 ok?"
</code></pre>

<p>較簡潔的語法</p>

<pre><code>if speed &gt;= 80: print 'You are so busted'
else: print 'Have a nice day'         
</code></pre>

<ul>
<li>python不是用 {}，也不是用begin/end，而是用縮排跟冒號<code>:</code>來做為區塊結構的範圍</li>
<li>不是用 <code>else if</code> 而是 <code>elif</code></li>
</ul>


<h4>List, Tuple, Dictionary</h4>

<pre><code>a = [ 1, 3.4, 'hello' ] # A list
b = ( 10, 20, 30 )      # A tuple   c = { 'a': 3, 'b': 42 } # A dictionary
</code></pre>

<p>list 可視為 array，語法如下</p>

<p>list = [&#8216;larry&#8217;, &#8216;curly&#8217;, &#8216;moe&#8217;]
list = [1, 2, 3.4, &#8216;hello&#8217;, &#8216;word&#8217;] # 可以放不同類型的內容</p>

<p>list 還有一個很特別的一點是可以直接在 list 裡執行 expression，叫 List Comprehensions,
語法為 [expr for var in list ]</p>

<p>範例:</p>

<pre><code>nums = [1, 2, 3, 4]
squares = [ n * n for n in nums ]   ## [1, 4, 9, 16]
</code></pre>

<p>tuple 很像 list，但tuple是不可變的，語法如下 <code>tuple = (1, 2, 'hi')</code></p>

<pre><code>a = ()      # 0-tuple (empty tuple) b = (item,) # 1-tuple (note the trailing comma) c = item,   # 1-tuple (note the trailing comma)tuple裡的值，可以容易再被獨立指派成變數，ex:
full_name = ('kent','chiu')
first_name, last_name = full_name # 把full_name的兩個值指派給 first_name, last_name
print(first_name)                 # kent
print(last_name)                  # chiu
</code></pre>

<h4>TBD</h4>

<ul>
<li>yield</li>
<li>decorator (@staticmethod)</li>
<li>list Ellipsis</li>
<li>class method (<code>__xxx__</code>)</li>
</ul>


<h2>學習資源</h2>

<ul>
<li><a href="https://developers.google.com/edu/python/">https://developers.google.com/edu/python/</a>  - Google Python Course</li>
<li><a href="http://getpython3.com/diveintopython3">http://getpython3.com/diveintopython3</a> - Dive Into Python 3 免費電子書</li>
<li><a href="http://chimera.labs.oreilly.com/books/1234000000754/index.html">http://chimera.labs.oreilly.com/books/1234000000754/index.html</a> - Test-Driven Web Development with Python</li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000393/index.html">http://chimera.labs.oreilly.com/books/1230000000393/index.html</a> - orally python cookbook (<em>問題-解法</em>導向線上電子書)</li>
<li><a href="http://docs.python.org/2/library/">http://docs.python.org/2/library/</a> - python 標準函式庫文件</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL encoding]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/25/url-encoding/"/>
    <updated>2013-06-25T11:01:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/25/url-encoding</id>
    <content type="html"><![CDATA[<p><code>https://bob:bobby@www.lunatech.com:8080/file;p=1?q=2#third</code></p>

<ul>
<li>Scheme           : https</li>
<li>User             : bob</li>
<li>Password         :bobby</li>
<li>Host address     : www.lunatech.com</li>
<li>Port             : 8080</li>
<li>Path             : /file</li>
<li>Path parameters  : p=1</li>
<li>Query parameters : q=2</li>
<li>Fragment         : third</li>
</ul>


<h6>Path parameters</h6>

<p>Path parameters 又叫 Matrix Parameters, 每個 <em>path segment</em> 可以有自已的 Matrix Parameters，這在 Restful style 的設計上有時會很有用。</p>

<h6>Fragment</h6>

<p>Fragment 是用來指出整份 URL resrouce 的某一特定部份，在網頁設計上是用來做定位用的錨點 (anchor)</p>

<h4>保留字處理</h4>

<p>path 跟 query string 對保留字的處理方式不一樣，所以，在做編解碼時，要分開處理</p>

<p>ex:
空白字元在 path 會被編成 %20 , &#8216;+&#8217; 會被編成 &#8216;_&#8217; ,但在 query string 空白字元會被編成 &#8216;+&#8217; or &#8216;%20&#8217;, &#8216;+&#8217; 會被編成 &#8216;%2B&#8217;</p>

<p>所以，如果有一個<code>blue+light blue</code>同時放在 path 跟 query string，那結果會是這樣</p>

<pre><code>http://example.com/blue+light%20blue?blue%2Blight+blue
</code></pre>

<h4>編碼、中文與 Unicode</h4>

<p>RFC 1738 並沒有規定要用什麼樣的編碼，所以，一般會在 HTTP header 指定 encoding 或採用 HTML page encoding</p>

<h2>Resource</h2>

<ul>
<li><a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding</a> - What every web developer must know about URL encoding</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API Design]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design/"/>
    <updated>2013-06-04T09:58:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/06/04/restful-api-design</id>
    <content type="html"><![CDATA[<h2>Method</h2>

<p>POST : 操作是 nont-idempotent(非幕等)</p>

<p>GET, PUT, DELETE  : 操作是 idempotent(幕等)</p>

<p>idempotent 是指執行的結果不依賴於執行的次數，ex: <code>count=1+2</code> 是 idempotent，因為不管執行幾次，都不會影響到結果，但 <code>count++</code> 就是 nont-idempotent，因為執行的次數會影響結果。通常，GET是idempotent，POST是non-idemptent這沒什麼爭議，但PUT的操作是幕等，就常常令人感到疑惑，
目前看到最好的解釋是，PUT是用來建立或取代資源(PUT不是只用於update，也可以create)
ex: <code>PUT www.api.com/blogs/blog-123</code> 這個操作不管執行幾次，應該都是用來建立或更新 id 為<em>blog-123</em> 的blog
相對於<code>POST www.api.com/blogs</code>，則是每次執行都會產生一篇新的blog。</p>

<p>另外DELETE操作是idempotent是指，不論執行幾次，都可以執行刪除的動作，所以就算資源不存在，也不應丟出異常，以避免前端double submit時，第二個submit造成失敗</p>

<h2>GET</h2>

<p>GET method用來取得一筆或多的資源，如果是多筆資源，還可以加入分頁，過濾等資訊，也可在header傳入分頁的links，ex:&#8217;first&#8217;, &#8216;last&#8217;, &#8216;next&#8217; and &#8216;prev&#8217;</p>

<ul>
<li>GET     http://www.example.com/orders                           取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345                     取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/orders/12345/items               取得訂單編號為 12345 的訂單下的所有訂單項目</li>
<li>GET     http://www.example.com/orders/12345/oitems/678          取得訂單編號為 12345 的訂單下的訂單項目 678</li>
<li>GET     http://www.example.com/orders?customer=kent             取得客戶 kent 的所有訂單</li>
</ul>


<h5>status code</h5>

<ul>
<li>200 (OK)            順利取得資源</li>
<li>400 (BAD REQUEST)   無法順利取得資訊，通常是參數有問題或某個查詢條件失效</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>POST</h3>

<p>POST method用來建立新資源，建立完成資源後，通常是回應 201(CREATED) 的狀態碼，而且建立的新資源的 uri link 會放在 HEAD (不是response body)</p>

<pre><code>POST http://www.example.com/order
</code></pre>

<p>response</p>

<pre><code>200 OK
Content-Type: application/json
Location: http://www.example.com/order/123  
</code></pre>

<blockquote><p>POST, PUT, PATCH 出去的資料應該儘量採用json，而不是Request Parameter(form submit)的格式
而且header必須加上 <code>application/json</code> 否則就要丟出 HTTP 405 Unsupported Media Type的error</p></blockquote>

<h5>status code</h5>

<ul>
<li>201 (CREATED)       成功建立新資源</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>PUT</h3>

<p>POST method 用來更新資源，</p>

<p>如果 resource 的 id，是由前端決定，而不是後端，那麼此時 PUT 也可以拿用做建立新資源的動作</p>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個status code，response裡會有異動後的內容</li>
<li>201 (CREATED)       成功建立新資源</li>
<li>204 (No Content)    更新成功，如果使用這個status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在</li>
</ul>


<h3>DELETE</h3>

<h5>status code</h5>

<ul>
<li>200 (OK)            更新成功，如果使用這個 status code，response裡會有異動後的內容</li>
<li>204 (No Content)    更新成功，如果使用這個 status code，response裡沒有任何內容</li>
<li>404 (Not Found)     資源不存在，連續呼叫兩次相同的 delete，會傳回 404</li>
</ul>


<h4>命名規則</h4>

<p>資源命名應為<strong>複數名詞</strong>，不論是 GET, POST, PUT, DELETE 應該都要用<strong>複數名詞</strong>來命名，如果是要取得單筆資訊，
則是在<strong>複數名詞</strong>的資源後接上該資源的indentity</p>

<p>如果是複合字，應該用<code>-</code>隔開，而不是用 camel style : ex: 採用 <code>hello-world</code> 而非 <code>helloWorld</code></p>

<ul>
<li>GET     http://www.example.com/orders             取得多筆訂單</li>
<li>GET     http://www.example.com/orders/12345       取得訂單編號為 12345 的訂單</li>
<li>GET     http://www.example.com/users?name=kent    取得使用者 kent 的資訊</li>
<li>PUT     http://www.example.com/users/kent         更新使用者 kent</li>
<li>POST    http://www.example.com/users/kent         新增使用者 kent</li>
<li>DELETE  http://www.example.com/users/kent         刪除使用者 kent</li>
</ul>


<p>所以，一般來說，只有兩種 url 的定義方式</p>

<pre><code>GET | PUT | DELETE  http://www.example.com/orders/{id}
POST                http://www.example.com/orders
</code></pre>

<blockquote><p>資源 id 當識別會比用name來的好，因為名稱可能會異動，如果要用名稱，應該是類似查詢參數的用法 /users?name=kent
另外，用id也可以避免名稱衝突ex: orders/new 如果這邊是採用名稱，就不易辨識這個new是指新的order，還是有張order名稱為<em>new</em></p></blockquote>

<h4>輔助用字</h4>

<ul>
<li>search 搜尋，如果有時就是做搜尋當resource最直覺，就用吧，以名詞命規的規格，還是可以有例外的</li>
<li>filter 過濾用</li>
<li>page   分頁用</li>
<li>sort   排序用，可以用<code>-</code>表示昇冪, ex: sort=-age 由大到小排序，sort=age 由小到大排序</li>
<li>fields 用來指定後端只傳合那些欄位  ex: fields=id,name,address</li>
<li>embed  用來指定後端傳合的部份是不是包含 detail，有些資料是master/detail的關係，用embed可以決定要不要傳回 detail</li>
</ul>


<h2>Resource</h2>

<ul>
<li><a href="http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">http://zh.wikipedia.org/zh-tw/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a> - HTTP 狀態碼</li>
<li><a href="http://www.restapitutorial.com/lessons/httpmethods.html">http://www.restapitutorial.com/lessons/httpmethods.html</a>  - RESTful Tutorial</li>
<li><a href="http://blog.2partsmagic.com/restful-uri-design/">http://blog.2partsmagic.com/restful-uri-design/</a> - rest 命名規格</li>
<li><a href="http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs">http://stackoverflow.com/questions/1619152/how-to-create-rest-urls-without-verbs</a> - 如何避免用動詞命名
件</li>
<li><a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel">http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#snake-vs-camel</a> - 設計Restful API 相當不錯的參考資料，內容很全面，方方面面都有提到</li>
<li><a href="http://codeplanet.io/principles-good-restful-api-design/">http://codeplanet.io/principles-good-restful-api-design/</a> - Principles of good RESTful API Design, 譂述如何設計優質的API</li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a> - RESTful API 设计指南(阮一峰)</li>
<li>一些流行的 Rest API

<ol>
<li> <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html">http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html</a> - Amazon 的 REST API文件</li>
<li> <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list">https://dev.twitter.com/docs/api/1.1/get/lists/list</a> - twitter 的 REST API文件</li>
<li> <a href="https://developers.facebook.com/docs/reference/api/">https://developers.facebook.com/docs/reference/api/</a> - FaceBook 的 REST API文件</li>
<li> <a href="https://developer.linkedin.com/apis">https://developer.linkedin.com/apis</a> - linkedin 的 REST API文件</li>
<li> <a href="https://developer.paypal.com/webapps/developer/docs/api/">https://developer.paypal.com/webapps/developer/docs/api/</a> - paypal  的 REST API文</li>
</ol>
</li>
<li><a href="http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a> - auth token的設計</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My IntelliJ IDEA Shortcut]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/17/my-intellij-idea-shortcut/"/>
    <updated>2013-05-17T11:03:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/17/my-intellij-idea-shortcut</id>
    <content type="html"><![CDATA[<p>Intellij IDEA Mac版的 KeyMap 有兩個版本，這邊的是 Mac 專用版的版本 (Mac OS X 10.5+)</p>

<h2>符號說明</h2>

<ul>
<li>⌘ : cmd key</li>
<li>⌥ : option / alt key</li>
<li>⌃ : ctrl key</li>
<li>⇧ : shift key</li>
<li>⇥ : tab</li>
<li>⏎ : enter key</li>
<li>⌦ : delete (mac pro 上是 fn + backspace)</li>
<li>⌫ : backspace</li>
<li>⌙ : space</li>
<li>⎋ : esc</li>
<li>⇠⇡⇣⇢ : 方向鍵</li>
</ul>


<h2>常用</h2>

<p>A ~ Z 不分大小寫</p>

<ul>
<li>⌘ + ⇧ + A   : Find Action，萬鍵之王，可用來找其他快捷鍵，但前提是必須知道對應操作的關鍵字，像 : &#8216;Copy&#8217; , &#8216;Code Completion&#8217;, &#8216;Go To Line&#8217;, &#8230;.</li>
<li>⌘ + ⇧ + V   : 從剪貼簿選取</li>
<li>⌘ + ⇧ + E   : 列出最近異動的檔案</li>
<li>⌘ + ⇧ + F12 : 最大化編輯區</li>
<li>⌘ + O       : Go to Class</li>
<li>⌃ + R       : Run</li>
<li>⌃ + D       : Debug</li>
<li>⌘ + ⇧ + ⌫   : 跳到上次的異動處</li>
<li>⌘ + [       : 上一個位置</li>
<li>⌘ + ]       : 下一個位置</li>
<li>⌘ + P       : method parameter 提示</li>
<li>⌃ + space   : 自動完成 (選到method後，用tab可以 overwrite 目前的 method)</li>
<li>⌘ + D       : 複製游標所在位置的那一行，或已選擇擇的區塊</li>
<li>⌘ + ⌫       : 刪除游標所在位置的那一行，或已選擇擇的區塊</li>
<li>⌘ + f12     : member outline</li>
<li>⌃ + ⌥ + R   : Run&#8230;</li>
<li>⌃ + ⌥ + D   : Debug&#8230;</li>
<li>⌃ + ⇧ + R   : run test case (如果是在method內會只會執行該 method)</li>
<li>⌃ + ⇧ + D   : debug  test case</li>
<li>⌘ + ⇧ + T   : 程式跟測試程式間互跳</li>
<li>⌥ + ⇧ + ⇡   : 游標所在位置的那一行或已選擇擇的區塊 上移</li>
<li>⌥ + ⇧ + ⇣   : 游標所在位置的那一行或已選擇擇的區塊 下移</li>
<li>⌥ + ⇡       : 增量選擇 (字母 -> 單字 -> 片語 -> 行 -> 區塊 -> &#8230;)</li>
<li>⌥ + ⇣       : 減量選擇</li>
<li>⌘ + N       : 產生新的 class, file , test case, getter/setter, toString,&#8230;</li>
<li>⌘ + F       : Find</li>
<li>⌘ + R       : Replace</li>
<li>⌘ + ⇧ + F   : Find in path</li>
<li>⌘ + ⇧ + R   : Replace in path</li>
<li>F7          : Step into</li>
<li>F8          : Step over</li>
</ul>


<h2>少用，但值得記</h2>

<ul>
<li>⌃ + J               : 調出javadoc</li>
<li>⌃ + ⇧ + J         : 多行合併</li>
<li>⌘ + ⏎             : 智能分行</li>
<li>⌃ + T               : 在本行(或標記區塊)加上 try/catch,if block, &#8230;.</li>
<li>⌃ + ⇧ + ⌥ + V    : 以純文字貼上(無格式，不會被ide format)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasper Report, IReport 匯出成中文PDF]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/12/jasper-report-font-issue/"/>
    <updated>2013-05-12T12:22:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/12/jasper-report-font-issue</id>
    <content type="html"><![CDATA[<p>jasper report 匯出成 PDF 時， 中文字會無法正常匯出， 需做額外的處理，才能正確的輸出中文。
中文會有問題主要的原因是缺少中文字體的關係，所以只要滿足了這個條件， PDF 就能顯示中文。</p>

<p>以下步驟為設定 iReport Designer (5.x) 中文字型的方式</p>

<h4>工具 ﹣> 選項</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-000.png" alt="2013-05-12-jesper-report-font-issue-000.png" /></p>

<h4>安裝字型</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-001.png" alt="2013-05-12-jesper-report-font-issue-001.png" /></p>

<p>字形檔為 true type (.ttf)格式，本範例是繁體中文的標楷體 (kaiu.ttf)</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-002.png" alt="2013-05-12-jesper-report-font-issue-002.png" /></p>

<blockquote><p>可以在windows的字型檔目錄下取得字型檔，但我在測試時無法直接在windows/font的目錄選得字型檔，
須把字型檔copy到其他目錄時，iReport 的 <em>Select True Type Font</em> dialog 才看得到字型檔。</p></blockquote>

<h4>設定字型檔的細節</h4>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-005.png" alt="2013-05-12-jesper-report-font-issue-005.png" /></p>

<p>選進來後的Family Name(字型檔名) 預設是 &#8220;標楷體&#8221;，我把它改名成 <em>kaiu</em> (這麼做的原因只是不想讓設定檔出現一堆中文字型名稱，當然，
你也可以保持預設的名稱 &#8220;標楷體&#8221;)，PDF details的設定要特別注意，
PDF ENcodeing要設成 <em>Identity-H (Unicode with horizontal writer)</em>, 然後 <em>Enbed this font in PDF document</em>要勾選</p>

<p>到這邊，基本上就算設定好了，之後就是要在範本檔 (jrxml) 裡指定中文字時，要使用剛設定出來的這個字型即可</p>

<h4>在範本檔設定使用中文字型</h4>

<p>文字內容的<code>font name</code>要設定為剛剛新安裝的字型檔名稱</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-007.png" alt="2013-05-12-jesper-report-font-issue-007.png" /></p>

<p>做preivew後就會產出 pdf 檔，裡面的中文就會正常顯示了</p>

<h3>用程式匯出成pdf檔時中文的問題</h3>

<p>上述的步驟，只是讓iReport Designer可以正確的匯出有中文字的 pdf，但如果是要用程式做 pdf 匯出的動作，需要把字型檔 export 成 jar 格式的 extension ，
並丟到 class path 底下，用程式做匯出時，中文字才會正常的顯示。</p>

<p>匯出的功能是在原來安裝字型檔的功能畫面上，裡面有一個 <code>Export as extension</code> 的按鍵，執行後設定 export 的副檔名為 <em>.jar</em> 即可，ex : kaiu.jar</p>

<p>匯出後，將該 jar 檔丟到 class path下即可；如果執行匯出時，發生字型檔找不到的異常，應該是字型檔的 jar 檔沒正確的放在 class path 下</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jesper-report-font-issue-006.png" alt="2013-05-12-jesper-report-font-issue-006.png" /></p>

<h6>jrxml 範本定義檔 hello.jrxml</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="myreport"&gt;

 &lt;detail&gt;
    &lt;band height="20"&gt;
      &lt;staticText&gt;
        &lt;reportElement x="180" y="0" width="200" height="20"/&gt;
        &lt;textElement&gt;
            &lt;font fontName="kaiu" isPdfEmbedded="true"/&gt;
        &lt;/textElement&gt;
        &lt;text&gt;&lt;![CDATA[Hello!!! World! 中文字測試]]&gt;&lt;/text&gt;
      &lt;/staticText&gt;
    &lt;/band&gt;
  &lt;/detail&gt;
&lt;/jasperReport&gt;
</code></pre>

<p><code>&lt;font fontName="kaiu" isPdfEmbedded="true"/&gt;</code> : fontName 必須設定安裝時設定的名稱</p>

<h6>測試程式</h6>

<pre><code>@Test
public void exportToPDF_statics_text_only() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/hello.jrxml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), new JREmptyDataSource());
        String output = input.getParent() + "/hello1.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>執行 test case後，可以看 output 的目錄看到匯出的 PDF 檔中文是否有正常顯示</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JasperReport 101]]></title>
    <link href="http://blog.kent-chiu.com/blog/2013/05/12/jasperreport-101/"/>
    <updated>2013-05-12T00:49:00+08:00</updated>
    <id>http://blog.kent-chiu.com/blog/2013/05/12/jasperreport-101</id>
    <content type="html"><![CDATA[<h4>jrxml  report定義檔</h4>

<p>Jasper Report 是由副檔名為 <code>jrxml</code> 的 xml 檔進行報表範本定義，範本檔的主結構可被切割成數個區，每一區有專屬的tag，每個 tag 有各自專屬的位置及功能，
每個 tag 都不是必要的，可以視需求選用，以下列出 Jasper Report 主結構會用到的 tag</p>

<ol>
<li><code>&lt;title&gt;</code>            - 主標題，只會出現一次</li>
<li><code>&lt;pageHeader&gt;</code>       - 頁首標題，每頁頁首都會出現</li>
<li><code>&lt;columnHeader&gt;</code>     - <code>&lt;detail&gt;</code> 的 header，會出現在每個detail區前面</li>
<li><code>&lt;detail&gt;</code>           - 內容區，會重覆的出現，一個 detail 對應到 data source 的一個資料列</li>
<li><code>&lt;columnFooter&gt;</code>     - <code>&lt;detail&gt;</code> 的 footer，會出現在每個detail區後面(可設定只出現在最後的detail區)</li>
<li><code>&lt;pageFooter&gt;</code>       - 頁尾區，每頁頁尾都會出現，通常來放置頁碼 (可設定只出現在最後一頁)</li>
<li><code>&lt;summary&gt;</code>          - 總結區，在報表的最後面，只會出現一次</li>
<li><code>&lt;background&gt;</code>       - 設定背景圖片</li>
</ol>


<p>上面的tag，都需要包含 <code>&lt;band&gt;</code> ，才能再放入報表元素(Report Element）</p>

<p>另外還有 <code>group</code> tag用來做可用來群組化，每個 group tag 下可有自已的 header 跟 footer</p>

<p>每一區的位置如下圖所示</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-001.png" alt="2013-05-12-jasperreport-101-001.png" /></p>

<p>比較完整的主結構是像這樣</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-002.png" alt="2013-05-12-jasperreport-101-002.png" /></p>

<p>上面有提到，每一區必須要定義一個唯一的 <code>&lt;band&gt;</code> 後，才能放入其他的報表元件 (Report Element), 報表元件有這些 :</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-003.png" alt="2013-05-12-jasperreport-101-003.png" /></p>

<h4>Jasper Report 版的 HELLO WORLD</h4>

<p>以下的 hello word 範例，我們不用 designer, 改用全手工的方式打造出最簡單的報表定義檔，定義檔內只有 detail 區， detail 區裡顯示靜態的文字 &#8216;Hello World&#8217;</p>

<blockquote><p>用 designer 產生的定義檔，會多很多 tags，每個 tag 也會多很多屬性，用手工打造比較乾淨，也比較容易理解</p></blockquote>

<h6>xml helloworld.jrxml 定義檔</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="myreport"&gt;
 &lt;detail&gt;
    &lt;band height="20"&gt;
      &lt;staticText&gt;
        &lt;reportElement x="180" y="0" width="200" height="20"/&gt;
        &lt;text&gt;&lt;![CDATA[Hello World!]]&gt;&lt;/text&gt;
      &lt;/staticText&gt;
    &lt;/band&gt;
  &lt;/detail&gt;
&lt;/jasperReport&gt;
</code></pre>

<p>我們只用了 detail section, 上面有提到 section 內必須要有 <code>&lt;band&gt;</code> tag才能放置其他的 Report Element, 我們這邊用到的 Report Element 為
<code>&lt;staticText&gt;</code> 用途為顯示靜態文字， <code>&lt;staticText&gt;</code> 使用 <code>&lt;reportElement&gt;</code> 做基本屬性設定，然後用 <code>&lt;text&gt;</code> 設定文字內容</p>

<h6>java junit test case for export pdf</h6>

<pre><code>@Test
public void exportToPDF_statics_text_only() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/helloworld.jrxml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), new JREmptyDataSource());
        String output = input.getParent() + "/hello1.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p><code>JasperFillManager.fillReport()</code> 需要三個參數,</p>

<ol>
<li>jasperReport
jrxml complied 後的 binary file</li>
<li>paramaters
控制報表的參數設定值</li>
<li>datasource 為 <code>JRDataSource</code> 的 subclass</li>
</ol>


<h6>java JasperFillManager.fill() 的 source code</h6>

<p><code>JasperFillManager.fill()</code> 的 source code 如下</p>

<pre><code>/**
 * Fills the compiled report design supplied as the first parameter and returns
 * the generated report object.
 * 
 * @param jasperReport compiled report design object to use for filling
 * @param parameters   report parameters map
 * @param dataSource   data source object
 * @return generated report object
 */
public JasperPrint fill(
    JasperReport jasperReport, 
    Map&lt;String,Object&gt; parameters, 
    JRDataSource dataSource
    ) throws JRException
{
    return JRFiller.fill(jasperReportsContext, jasperReport, parameters, dataSource);
}
</code></pre>

<p>JRDataSource 的 subclass 如下圖，我們這個範例，因為只是單純的顯示靜態文字，不需要任何的資料，所以使用 <code>JREmptyDataSource</code> 即可</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-004.png" alt="2013-05-12-jasperreport-101-004.png" /></p>

<h4>JRMapCollectionDataSource</h4>

<p>這個範例改用 java collection 當作 data source</p>

<h6>helloword_collection.xml</h6>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd"
    name="myreport"&gt;
    &lt;field name="USER_NAME" class="java.lang.String" /&gt;

    &lt;detail&gt;
        &lt;band height="30"&gt;
            &lt;staticText&gt;
                &lt;reportElement x="10" y="0" width="100" height="20" /&gt;
                &lt;text&gt;&lt;![CDATA[Hello!]]&gt;&lt;/text&gt;
            &lt;/staticText&gt;
            &lt;textField&gt;
                &lt;reportElement x="80" y="0" width="100" height="20" /&gt;
                &lt;textFieldExpression&gt;&lt;![CDATA[$F{USER_NAME}]]&gt;&lt;/textFieldExpression&gt;
            &lt;/textField&gt;
        &lt;/band&gt;
    &lt;/detail&gt;

&lt;/jasperReport&gt;
</code></pre>

<p>範本定義檔裡用了兩個 report element</p>

<ol>
<li><code>&lt;staticText&gt;</code> : 用來顯示靜態文字</li>
<li><code>&lt;textField&gt;</code>  : 文字欄位，裡面的 <code>&lt;textFieldExpression&gt;</code> 可以用使用 Jasper Report 的 Expression
$F{USER_NAME} 為Jasper Report 的 Expression，是變數名稱的 placeholder，在匯出後，
placeholder 會被 data source 裡對應的值所取代，有幾個資料列就會重覆幾次</li>
</ol>


<h6>java 匯出 PDF 的 test case</h6>

<pre><code>@Test
public void exportToPDF_data_from_collection() throws Exception {
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    try {
        URI uri = getClass().getResource("/helloword_collection.xml").toURI();
        File input = new File(uri);
        jasperReport = JasperCompileManager.compileReport(input.getAbsolutePath());

        Collection&lt;Map&lt;String, ?&gt;&gt; col = Lists.newArrayList();
        col.add(ImmutableMap.&lt;String, Object&gt;of("USER_NAME", "Kent"));
        col.add(ImmutableMap.&lt;String, Object&gt;of("USER_NAME", "Cindy"));
        JRMapCollectionDataSource ds = new JRMapCollectionDataSource(col );
        jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), ds);
        String output = input.getParent() + "/hello1_collection.pdf";
        System.out.println("output to :" +  output);
        JasperExportManager.exportReportToPdfFile(jasperPrint, output);
    } catch (JRException e) {
        e.printStackTrace();
    }
}
</code></pre>

<ul>
<li>這個範例改用 java collection 來當作資料源，所以要用 <code>JRMapCollectionDataSource</code></li>
<li>10 ~ 12 行 放了兩個單位的資料(&#8216;Kent&#8217; &amp; &#8216;Cindy&#8217;) 進去 data source， 所以，在輸出時，會看到這兩組資料會被套用到 detail section</li>
</ul>


<p>輸出的PDF結果如下</p>

<p><img src="http://blog.kent-chiu.com/images/2013-05-12/2013-05-12-jasperreport-101-005.png" alt="2013-05-12-jasperreport-101-005.png" /></p>
]]></content>
  </entry>
  
</feed>
